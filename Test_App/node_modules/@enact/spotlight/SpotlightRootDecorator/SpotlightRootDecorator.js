"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpotlightRootDecorator = void 0;
Object.defineProperty(exports, "activateInputType", {
  enumerable: true,
  get: function get() {
    return _inputType.activateInputType;
  }
});
exports["default"] = void 0;
Object.defineProperty(exports, "getInputType", {
  enumerable: true,
  get: function get() {
    return _inputType.getInputType;
  }
});
Object.defineProperty(exports, "setInputType", {
  enumerable: true,
  get: function get() {
    return _inputType.setInputType;
  }
});
var _hoc = _interopRequireDefault(require("@enact/core/hoc"));
var _keymap = require("@enact/core/keymap");
var _react = require("react");
var _Spottable = require("../Spottable");
var _container = require("../src/container");
var _inputType = require("../src/inputType");
var _spotlight = _interopRequireDefault(require("../src/spotlight"));
require("../styles/debug.less");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); } /**
                                                                                                                                                                                                                      * Exports the {@link spotlight/SpotlightRootDecorator.SpotlightRootDecorator}
                                                                                                                                                                                                                      * higher-order component.
                                                                                                                                                                                                                      *
                                                                                                                                                                                                                      * @module spotlight/SpotlightRootDecorator
                                                                                                                                                                                                                      * @exports SpotlightRootDecorator
                                                                                                                                                                                                                      */ /**
                                                                                                                                                                                                                          * Default configuration for SpotlightRootDecorator
                                                                                                                                                                                                                          *
                                                                                                                                                                                                                          * @hocconfig
                                                                                                                                                                                                                          * @memberof spotlight/SpotlightRootDecorator.SpotlightRootDecorator
                                                                                                                                                                                                                          */
var defaultConfig = {
  /**
   * When `true`, the contents of the component will not receive spotlight focus after being rendered.
   *
   * @type {Boolean}
   * @default false
   * @public
   * @memberof spotlight/SpotlightRootDecorator.SpotlightRootDecorator.defaultConfig
   */
  noAutoFocus: false
};

/**
 * Constructs a higher-order component that initializes and enables Spotlight 5-way navigation
 * within an application.
 *
 * No additional properties are passed to the wrapped component.
 *
 * Example:
 * ```
 *	const App = SpotlightRootDecorator(ApplicationView);
 * ```
 *
 * @class SpotlightRootDecorator
 * @memberof spotlight/SpotlightRootDecorator
 * @param  {Object} defaultConfig Set of default configuration parameters
 * @param  {Function} Wrapped higher-order component
 * @returns {Function} SpotlightRootDecorator
 * @hoc
 */
var SpotlightRootDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;
  var noAutoFocus = config.noAutoFocus;
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);
    var _super = _createSuper(_class);
    function _class(props) {
      var _this;
      _classCallCheck(this, _class);
      _this = _super.call(this, props);
      _this.applyInputType = function () {
        if (_assertThisInitialized(_this) && _this.containerNode) {
          (0, _inputType.applyInputTypeToNode)(_this.containerNode);
        }
      };
      _this.handleFocusInBeforeMount = function () {
        _this.hasFocusedIn = true;
      };
      _this.handleFocusIn = function () {
        if (!(0, _inputType.getInputInfo)().applied) {
          _this.applyInputType();
        }
      };
      // For key input
      _this.handleKeyDown = function (ev) {
        var keyCode = ev.keyCode;
        if ((0, _keymap.is)('enter', keyCode) && _this.containerNode.classList.contains('spotlight-input-touch')) {
          // Prevent onclick event trigger by enter key
          ev.preventDefault();
        }
        setTimeout(function () {
          if (!(0, _inputType.getInputInfo)().activated) {
            (0, _inputType.setInputType)('key');
          }
          _this.applyInputType();
        }, 0);
      };
      // For mouse input
      _this.handlePointerMove = function (ev) {
        if (ev.pointerType === 'mouse') {
          (0, _inputType.setInputType)('mouse');
          _this.applyInputType();
        }
      };
      // For touch input
      _this.handlePointerOver = function (ev) {
        if (ev.pointerType === 'touch') {
          (0, _inputType.setInputType)('touch');
          _this.applyInputType();
        }
      };
      _this.containerNode = null;
      if (typeof window === 'object') {
        _spotlight["default"].initialize({
          selector: '.' + _Spottable.spottableClass,
          restrict: 'none'
        });
        _spotlight["default"].set(_container.rootContainerId, {
          overflow: true
        });

        // Sometimes the focusin event is fired before componentDidMount.
        document.addEventListener('focusin', _this.handleFocusInBeforeMount, {
          capture: true
        });
      }
      return _this;
    }
    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (!noAutoFocus) {
          _spotlight["default"].focus();
        }
        if (typeof document === 'object') {
          this.containerNode = document.querySelector('#root');
          document.addEventListener('focusin', this.handleFocusIn, {
            capture: true
          });
          document.addEventListener('keydown', this.handleKeyDown, {
            capture: true
          });
          document.addEventListener('pointermove', this.handlePointerMove, {
            capture: true
          });
          document.addEventListener('pointerover', this.handlePointerOver, {
            capture: true
          });
          document.removeEventListener('focusin', this.handleFocusInBeforeMount, {
            capture: true
          });
        }
        if (this.hasFocusedIn) {
          this.hasFocusedIn = false;
          this.handleFocusIn();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _spotlight["default"].terminate();
        if (typeof document === 'object') {
          document.removeEventListener('focusin', this.handleFocusIn, {
            capture: true
          });
          document.removeEventListener('keydown', this.handleKeyDown, {
            capture: true
          });
          document.removeEventListener('pointermove', this.handlePointerMove, {
            capture: true
          });
          document.removeEventListener('pointerover', this.handlePointerOver, {
            capture: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, this.props));
      }
    }]);
    return _class;
  }(_react.Component), _class.displayName = 'SpotlightRootDecorator', _class;
});
exports.SpotlightRootDecorator = SpotlightRootDecorator;
var _default = SpotlightRootDecorator;
exports["default"] = _default;