"use strict";

var _platform = require("../platform");
describe('platform', function () {
  describe('parseUserAgent for webOS', function () {
    // From http://webostv.developer.lge.com/discover/specifications/web-engine/
    var webOSTVNext = 'Mozilla/5.0 (Web0S; Linux/SmartTV) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 WebAppManager';
    var webOSTV6 = 'Mozilla/5.0 (Web0S; Linux/SmartTV) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3440.106 Safari/537.36 WebAppManager';
    var webOSTV5 = 'Mozilla/5.0 (Web0S; Linux/SmartTV) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36 WebAppManager';
    var webOSTV4 = 'Mozilla/5.0 (Web0S; Linux/SmartTV) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.1785.34 Safari/537.36 WebAppManager';
    var webOSTV3 = 'Mozilla/5.0 (Web0S; Linux/SmartTV) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.1.1 Chrome/38.0.2125.122 Safari/537.36 WebAppManager';
    var webOSTV2 = 'Mozilla/5.0 (Web0S; Linux/SmartTV) AppleWebKit/538.2 (KHTML, like Gecko) Large Screen WebAppManager Safari/538.2';
    var webOSTV1 = 'Mozilla/5.0 (Web0S; Linux/SmartTV) AppleWebKit/537.41 (KHTML, like Gecko) Large Screen WebAppManager Safari/537.41';

    // From https://developers.whatismybrowser.com/useragents/explore/operating_system_name/webos/
    var LuneOS2 = 'Mozilla/5.0 (LuneOS, like webOS/3.0.5; Tablet) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.9.2 Chrome/56.0.2924.103 Safari/537.36';
    var LuneOS1 = 'Mozilla/5.0 (LuneOS, like webOS/3.0.5; Tablet) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.6.2 Chrome/45.0.2454.103 Safari/537.36';
    var webOS10 = 'Mozilla/5.0 (webOS/1.0; U; en-US) AppleWebKit/525.27.1 (KHTML, like Geko) Version/1.0 Safari/525.27.1 Pre/1.0';
    var webOS11 = 'Mozilla/5.0 (webOS/1.1; U; en-US) AppleWebKit/525.27.1 (KHTML, like Gecko) Version/1.0 Safari/525.27.1 Pre/1.0';
    var webOS12 = 'Mozilla/5.0 (webOS/1.2; U; en-US) AppleWebKit/525.27.1 (KHTML, like Gecko) Version/1.0 Safari/525.27.1 Pre/1.0';
    var webOS13 = 'Mozilla/5.0 (webOS/1.3.1; U; en-US) AppleWebKit/525.27.1 (KHTML, like Gecko) Version/1.0 Safari/525.27.1 Pre/1.0';
    var webOS1351 = 'Mozilla/5.0 (webOS/1.3.5.1; U; en-US) AppleWebKit/525.27.1 (KHTML, like Gecko) Version/1.0 Safari/525.27.1 Pre/1.1';
    var webOS2 = 'Mozilla/5.0 (webOS/2.0.1; U; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Version/1.0 Safari/532.2 Pre/1.2';
    var webOSOther = 'Mozilla/5.0 (Web0S; Linux) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36 WebAppManager';
    test('should return webOS 1', function () {
      var expected = {
        webos: 1
      };
      var actual = (0, _platform.parseUserAgent)(webOSTV1);
      expect(actual).toMatchObject(expected);
    });
    test('should return webOS 2', function () {
      var expected = {
        webos: 2
      };
      var actual = (0, _platform.parseUserAgent)(webOSTV2);
      expect(actual).toMatchObject(expected);
    });
    test('should return webOS 3', function () {
      var expected = {
        webos: 3
      };
      var actual = (0, _platform.parseUserAgent)(webOSTV3);
      expect(actual).toMatchObject(expected);
    });
    test('should return webOS 4', function () {
      var expected = {
        webos: 4
      };
      var actual = (0, _platform.parseUserAgent)(webOSTV4);
      expect(actual).toMatchObject(expected);
    });
    test('should return webOS 5', function () {
      var expected = {
        webos: 5
      };
      var actual = (0, _platform.parseUserAgent)(webOSTV5);
      expect(actual).toMatchObject(expected);
    });
    test('should return webOS 6', function () {
      var expected = {
        webos: 6
      };
      var actual = (0, _platform.parseUserAgent)(webOSTV6);
      expect(actual).toMatchObject(expected);
    });
    test('should return webOS Next and chrome 87', function () {
      var expected = {
        webos: -1,
        chrome: 87
      };
      var actual = (0, _platform.parseUserAgent)(webOSTVNext);
      expect(actual).toMatchObject(expected);
    });
    test('should return webOS -1', function () {
      var expected = {
        webos: -1
      };
      var actual = (0, _platform.parseUserAgent)(webOSOther);
      expect(actual).toMatchObject(expected);
    });
    test('should return webOS -1 + LuneOS 1', function () {
      var expected = {
        webos: -1,
        luneos: 1
      };
      expect((0, _platform.parseUserAgent)(LuneOS1)).toMatchObject(expected);
      expect((0, _platform.parseUserAgent)(LuneOS2)).toMatchObject(expected);
    });
    test('should return webOS -1 + legacy 1', function () {
      var expected = {
        webos: -1,
        legacy: 1
      };
      expect((0, _platform.parseUserAgent)(webOS10)).toMatchObject(expected);
      expect((0, _platform.parseUserAgent)(webOS11)).toMatchObject(expected);
      expect((0, _platform.parseUserAgent)(webOS12)).toMatchObject(expected);
      expect((0, _platform.parseUserAgent)(webOS13)).toMatchObject(expected);
      expect((0, _platform.parseUserAgent)(webOS1351)).toMatchObject(expected);
    });
    test('should return webOS -1 + legacy 2', function () {
      var expected = {
        webos: -1,
        legacy: 2
      };
      expect((0, _platform.parseUserAgent)(webOS2)).toMatchObject(expected);
    });
  });
  describe('parseUserAgent for Windows Phone', function () {
    var windowsPhone = 'Mozilla/5.0 (Windows Phone 8.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4103.84 Mobile Safari/537.36';
    test('should return platformName `windowsPhone`', function () {
      var expected = {
        platformName: 'windowsPhone'
      };
      var actual = (0, _platform.parseUserAgent)(windowsPhone);
      expect(actual).toMatchObject(expected);
    });
  });
  describe('parseUserAgent for Edge', function () {
    var edge1 = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.42';
    var edge2 = 'Mozilla/5.0 (Linux; Android 10; HD1913) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.76 Mobile Safari/537.36 EdgA/113.0.1774.38';
    var edge3 = 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 EdgiOS/113.1774.42 Mobile/15E148 Safari/605.1.15';
    var edge4 = 'Mozilla/5.0 (Windows Mobile 10; Android 10.0; Microsoft; Lumia 950XL) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Mobile Safari/537.36 Edge/40.15254.603';
    test('should return edge for Edg', function () {
      var expected = {
        platformName: 'edge'
      };
      var actual = (0, _platform.parseUserAgent)(edge1);
      expect(actual).toMatchObject(expected);
      expected = {
        chrome: 113
      };
      expect(actual).toMatchObject(expected);
      expected = {
        edge: 113
      };
      expect(actual).toMatchObject(expected);
    });
    test('should return edge for EdgA', function () {
      var expected = {
        platformName: 'edge'
      };
      var actual = (0, _platform.parseUserAgent)(edge2);
      expect(actual).toMatchObject(expected);
      expected = {
        chrome: 113
      };
      expect(actual).toMatchObject(expected);
      expected = {
        edge: 113
      };
      expect(actual).toMatchObject(expected);
    });
    test('should return edge for EdgiOS', function () {
      var expected = {
        platformName: 'edge'
      };
      var actual = (0, _platform.parseUserAgent)(edge3);
      expect(actual).toMatchObject(expected);
      expected = {
        chrome: 113
      };
      expect(actual).not.toMatchObject(expected);
      expected = {
        edge: 113
      };
      expect(actual).toMatchObject(expected);
    });
    test('should return edge for Edge', function () {
      var expected = {
        platformName: 'edge'
      };
      var actual = (0, _platform.parseUserAgent)(edge4);
      expect(actual).toMatchObject(expected);
      expected = {
        chrome: 113
      };
      expect(actual).toMatchObject(expected);
      expected = {
        edge: 40
      };
      expect(actual).toMatchObject(expected);
    });
  });
  describe('parseUserAgent for User-Agent Reduction', function () {
    var testVersion = '113';
    var uaGenerator = function uaGenerator(unifiedPlatform) {
      var deviceCompatibility = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var majorVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : testVersion;
      return "Mozilla/5.0 (".concat(unifiedPlatform, ") AppleWebKit/537.36 (KHTML, like Gecko) Chrome/").concat(majorVersion, ".0.0.0 ").concat(deviceCompatibility, " Safari/537.36");
    };
    var testCases = [[uaGenerator('Macintosh; Intel Mac OS X 10_15_7'), 'chrome'], [uaGenerator('Windows NT 10.0; Win64; x64'), 'chrome'], [uaGenerator('X11; Linux x86_64'), 'chrome'], [uaGenerator('X11; CrOS x86_64 14541.0.0'), 'chrome'], [uaGenerator('Fuchsia'), 'chrome'], [uaGenerator('Linux; Android 10; K', 'Mobile'), 'androidChrome']];
    test("should return object including chrome ".concat(testVersion), function () {
      for (var i = 0; i < testCases.length; i++) {
        var _parseUserAgent;
        expect((_parseUserAgent = (0, _platform.parseUserAgent)(testCases[i][0])) === null || _parseUserAgent === void 0 || (_parseUserAgent = _parseUserAgent[testCases[i][1]]) === null || _parseUserAgent === void 0 ? void 0 : _parseUserAgent.toString()).toBe(testVersion);
      }
    });
  });
  describe('parseUserAgent for Safari', function () {
    test('should detect Safari browsers', function () {
      var knownUserAgents = {
        userAgentList: [
        // Safari on macOS
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.3 Safari/605.1.15', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.3 Safari/605.1.15'],
        expected: {
          type: 'desktop',
          browserName: 'safari',
          browserVersion: 17.3,
          safari: 17.3
        }
      };
      for (var i = 0; i < knownUserAgents.userAgentList.length; i++) {
        var actual = (0, _platform.parseUserAgent)(knownUserAgents.userAgentList[i]);
        expect(actual).toMatchObject(knownUserAgents.expected);
      }
    });
    test('should detect mobile Safari browsers', function () {
      var knownUserAgents = {
        //
        userAgentList: [
        // Safari on iPhone, iPad
        'Mozilla/5.0 (iPhone; CPU iPhone OS 17_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.3 Mobile/15E148 Safari/604.1', 'Mozilla/5.0 (iPad; CPU OS 17_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.3 Mobile/15E148 Safari/604.1',
        // Chrome on iPhone, iPad
        'Mozilla/5.0 (iPhone; CPU iPhone OS 17_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/121.0.6167.138 Mobile/15E148 Safari/604.1', 'Mozilla/5.0 (iPad; CPU OS 17_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/121.0.6167.138 Mobile/15E148 Safari/604.1',
        // Edge on iPhone
        'Mozilla/5.0 (iPhone; CPU iPhone OS 17_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 EdgiOS/121.2277.99 Mobile/15E148 Safari/605.1.15',
        // Firefox on iPhone, iPad
        'Mozilla/5.0 (iPhone; CPU iPhone OS 17_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/122.0 Mobile/15E148 Safari/605.1.15', 'Mozilla/5.0 (iPad; CPU OS 17_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/122.0 Mobile/15E148 Safari/605.1.15'],
        expected: {
          type: 'mobile',
          browserName: 'safari',
          browserVersion: 17.3,
          safari: 17.3
        }
      };
      for (var i = 0; i < knownUserAgents.userAgentList.length; i++) {
        var actual = (0, _platform.parseUserAgent)(knownUserAgents.userAgentList[i]);
        expect(actual).toMatchObject(knownUserAgents.expected);
      }
    });
  });
  describe('parseUserAgent for Chrome', function () {
    test('should detect Chrome browsers', function () {
      var knownUserAgents = {
        // Chrome on Windows, macOS, Linux, Edge on Windows, macOS, respectively
        userAgentList: [
        // Chrome on Windows, macOS, Linux
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
        // Edge on Windows, macOS
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.2277.98', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.2277.98'],
        expected: {
          type: 'desktop',
          browserName: 'chrome',
          browserVersion: 121,
          chrome: 121
        }
      };
      for (var i = 0; i < knownUserAgents.userAgentList.length; i++) {
        var actual = (0, _platform.parseUserAgent)(knownUserAgents.userAgentList[i]);
        expect(actual).toMatchObject(knownUserAgents.expected);
      }
    });
    test('should detect mobile Chrome browsers', function () {
      var knownUserAgents = {
        userAgentList: [
        // Chrome on Android
        'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.143 Mobile Safari/537.36',
        // Edge on Android
        'Mozilla/5.0 (Linux; Android 10; Pixel 3 XL) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.143 Mobile Safari/537.36 EdgA/120.0.2210.157'],
        expected: {
          type: 'mobile',
          browserName: 'chrome',
          browserVersion: 121,
          chrome: 121
        }
      };
      for (var i = 0; i < knownUserAgents.userAgentList.length; i++) {
        var actual = (0, _platform.parseUserAgent)(knownUserAgents.userAgentList[i]);
        expect(actual).toMatchObject(knownUserAgents.expected);
      }
    });
  });
  describe('parseUserAgent for Firefox', function () {
    test('should detect Firefox browsers', function () {
      var knownUserAgents = {
        userAgentList: [
        // Firefox on Windows, macOS, Linux
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 14.3; rv:122.0) Gecko/20100101 Firefox/122.0', 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:122.0) Gecko/20100101 Firefox/122.0'],
        expected: {
          type: 'desktop',
          browserName: 'firefox',
          browserVersion: 122,
          firefox: 122
        }
      };
      for (var i = 0; i < knownUserAgents.userAgentList.length; i++) {
        var actual = (0, _platform.parseUserAgent)(knownUserAgents.userAgentList[i]);
        expect(actual).toMatchObject(knownUserAgents.expected);
      }
    });
    test('should detect mobile Firefox browsers', function () {
      var knownUserAgents = {
        userAgentList: [
        // Firefox on Android
        'Mozilla/5.0 (Android 14; Mobile; rv:122.0) Gecko/122.0 Firefox/122.0'],
        expected: {
          type: 'mobile',
          browserName: 'firefox',
          browserVersion: 122,
          firefox: 122
        }
      };
      for (var i = 0; i < knownUserAgents.userAgentList.length; i++) {
        var actual = (0, _platform.parseUserAgent)(knownUserAgents.userAgentList[i]);
        expect(actual).toMatchObject(knownUserAgents.expected);
      }
    });
  });
  describe('parseUserAgent for Chrome on webOS', function () {
    test('should detect Chrome browsers on webOS', function () {
      var knownUserAgent = 'Mozilla/5.0 (Web0S; Linux/SmartTV) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 WebAppManager';
      var expected = {
        type: 'webos',
        browserName: 'chrome',
        browserVersion: 108,
        chrome: 108
      };
      var actual = (0, _platform.parseUserAgent)(knownUserAgent);
      expect(actual).toMatchObject(expected);
    });
  });
  describe('platform', function () {
    test('should detect node environment if \'window\' does not exist', function () {
      var windowSpy = jest.spyOn(window, 'window', 'get').mockImplementation(function () {});
      var expected = {
        node: true,
        // Deprecated: will be removed in 5.0.0.
        type: 'node',
        browserName: 'unknown',
        browserVersion: 0
      };
      expect(_platform.platform).toMatchObject(expected);
      windowSpy.mockRestore();
    });
    test('should return `true` for `unknown` in the testing environment', function () {
      // Deprecated: will be removed in 5.0.0
      // The first access invokes detecting based on user agent value
      expect(_platform.platform['unknown']).toBe(true);
      // The second access makes the module to return already detected platform information
      expect(_platform.platform['unknown']).toBe(true);
    });
  });
});