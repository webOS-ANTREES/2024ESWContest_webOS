"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _useHandlers = _interopRequireDefault(require("../useHandlers"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
describe('useHandlers', function () {
  var data = {};
  var context = {
    value: 1
  };
  function Component(props) {
    var handlers = (0, _useHandlers["default"])({
      testEvent: function testEvent(ev, p, c) {
        return ev(p, c);
      }
    }, props, context);
    data = {
      handlers: handlers
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, props), {}, {
      "data-testid": "divComponent"
    }));
  }

  // Sanity test for Component moreso than useHandlers test
  test('should include handlers in props', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var actual = data.handlers.testEvent;
    expect(actual).toBeDefined();
  });
  test('should have the same reference across renders', function () {
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {})),
      rerender = _render.rerender;
    var expected = data.handlers.testEvent;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var actual = data.handlers.testEvent;
    expect(actual).toBe(expected);
  });
  test('should receive the event', function () {
    var spy = jest.fn();
    var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {})),
      rerender = _render2.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      children: 'updated'
    }));
    data.handlers.testEvent(spy);
    expect(spy).toHaveBeenCalled();
  });
  test('should reflect the latest props', function () {
    var spy = jest.fn();
    var _render3 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {})),
      rerender = _render3.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      children: 'updated'
    }));
    data.handlers.testEvent(spy);
    var expected = {
      children: 'updated'
    };
    var actual = spy.mock.calls[0][0];
    expect(actual).toMatchObject(expected);
  });
  test('should support component-driven context', function () {
    var spy = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    data.handlers.testEvent(spy);

    // defined a "global" context to ease testability but this isn't representative of the
    // expected use case of this feature.
    var expected = context;
    var actual = spy.mock.calls[0][1];
    expect(actual).toMatchObject(expected);
  });
  test('should return the value from the handler', function () {
    var spy = jest.fn().mockImplementation(function () {
      return 'ok';
    });
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var returnValue = data.handlers.testEvent(spy);

    // defined a "global" context to ease testability but this isn't representative of the
    // expected use case of this feature.
    var expected = 'ok';
    expect(returnValue).toBe(expected);
  });
});