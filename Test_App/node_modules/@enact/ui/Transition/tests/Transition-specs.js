"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _Transition = _interopRequireWildcard(require("../Transition"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
describe('Transition Specs', function () {
  // NOTE: Feature not yet implemented
  test.skip('should apply author classes', function () {
    var className = 'classA classB';
    var ChildNode = function ChildNode(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, props), {}, {
        children: "Body"
      }));
    };
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition["default"], {
      className: className,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ChildNode, {})
    }));
    var expected = className;
    var actual = _react.screen.getByText('Body');
    expect(actual).toHaveClass(expected);
  });

  // NOTE: Feature not yet implemented
  test.skip('should apply author styles', function () {
    var styles = {
      color: '#000000',
      backgroundColor: '#FFFFFF'
    };
    var ChildNode = function ChildNode(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, props), {}, {
        children: "Body"
      }));
    };
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition["default"], {
      style: styles,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ChildNode, {})
    }));
    var expected = styles;
    var actual = _react.screen.getByText('Body');
    expect(actual).toHaveStyle(expected);
  });
  test('should apply \'shown\' class when visible', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition.TransitionBase, {
      "data-testid": "transition"
    }));
    var expected = 'shown';
    var actual = _react.screen.getByTestId('transition');
    expect(actual).toHaveClass(expected);
  });
  test('should apply \'hidden\' class when not visible', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition.TransitionBase, {
      "data-testid": "transition",
      visible: false
    }));
    var expected = 'hidden';
    var actual = _react.screen.getByTestId('transition');
    expect(actual).toHaveClass(expected);
  });
  test('should apply \'shown\' class when visible with noAnimation', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition.TransitionBase, {
      "data-testid": "transition",
      noAnimation: true
    }));
    var expected = 'shown';
    var actual = _react.screen.getByTestId('transition');
    expect(actual).toHaveClass(expected);
  });
  test('should apply \'hidden\' class when not visible with noAnimation', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition.TransitionBase, {
      "data-testid": "transition",
      noAnimation: true,
      visible: false
    }));
    var expected = 'hidden';
    var actual = _react.screen.getByTestId('transition');
    expect(actual).toHaveClass(expected);
  });
  test('should fire \'onShow\' event with type when \'visible\' prop bacomes true', function () {
    var handleShow = jest.fn();
    var ChildNode = function ChildNode(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, props), {}, {
        children: "Body"
      }));
    };
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition["default"], {
        noAnimation: true,
        onShow: handleShow,
        visible: false,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ChildNode, {})
      })),
      rerender = _render.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition["default"], {
      noAnimation: true,
      onShow: handleShow,
      visible: true,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ChildNode, {})
    }));
    var expected = 1;
    var expectedType = {
      type: 'onShow'
    };
    var actual = handleShow.mock.calls.length && handleShow.mock.calls[0][0];
    expect(handleShow).toBeCalledTimes(expected);
    expect(actual).toMatchObject(expectedType);
  });
  test('should fire \'onHide\' event with type when \'visible\' prop bacomes false', function () {
    var handleHide = jest.fn();
    var ChildNode = function ChildNode(props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, props), {}, {
        children: "Body"
      }));
    };
    var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition["default"], {
        noAnimation: true,
        onHide: handleHide,
        visible: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ChildNode, {})
      })),
      rerender = _render2.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition["default"], {
      noAnimation: true,
      onHide: handleHide,
      visible: false,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ChildNode, {})
    }));
    var expected = 1;
    var expectedType = {
      type: 'onHide'
    };
    var actual = handleHide.mock.calls.length && handleHide.mock.calls[0][0];
    expect(handleHide).toBeCalledTimes(expected);
    expect(actual).toMatchObject(expectedType);
  });

  // Tests for prop and className combinations
  var directionCombination = [['up', 'up'], ['right', 'right'], ['down', 'down'], ['left', 'left']];
  var durationCombination = [['short', 'short'], ['medium', 'medium'], ['long', 'long']];
  var timingFunctionCombination = [['ease', 'ease'], ['ease-in', 'ease-in'], ['ease-out', 'ease-out'], ['ease-in-out', 'ease-in-out'], ['ease-in-quart', 'ease-in-quart'], ['ease-out-quart', 'ease-out-quart'], ['linear', 'linear']];
  var propStyleCombination = [['duration', durationCombination], ['direction', directionCombination], ['timingFunction', timingFunctionCombination]];
  propStyleCombination.forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      prop = _ref2[0],
      val = _ref2[1];
    val.forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
        key = _ref4[0],
        value = _ref4[1];
      test("should apply classes for ".concat(prop, "=\"").concat(value, "\""), function () {
        var propValue = _defineProperty({}, prop, value);
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Transition["default"], _objectSpread(_objectSpread({}, propValue), {}, {
          "data-testid": "transition",
          visible: true,
          children: "Body"
        })));
        var expected = key;
        var actual = _react.screen.getByTestId('transition');
        expect(actual).toHaveClass(expected);
      });
    });
  });
});