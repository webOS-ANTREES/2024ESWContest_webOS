"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toFlexAlign = exports["default"] = exports.CellDecorator = exports.CellBase = exports.Cell = void 0;
var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes2 = _interopRequireDefault(require("prop-types"));
var _ForwardRef = _interopRequireDefault(require("../ForwardRef"));
var _resolution = _interopRequireDefault(require("../resolution"));
var _LayoutModule = _interopRequireDefault(require("./Layout.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["component", "componentRef"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var toFlexAlign = function toFlexAlign(align) {
  return align === 'end' && 'flex-end' || align === 'start' && 'flex-start' || align;
};

/**
 * A stateless component that provides a space for your content in a
 * {@link ui/Layout.Layout|Layout}, without {@link ui/Layout.CellDecorator|CellDecorator} applied.
 *
 * @class CellBase
 * @memberof ui/Layout
 * @ui
 * @public
 */
exports.toFlexAlign = toFlexAlign;
var CellBase = (0, _kind["default"])({
  name: 'Cell',
  propTypes: /** @lends ui/Layout.CellBase.prototype */{
    /**
     * The alignment of `Cell`.
     *
     * Aligns this `Cell` vertically in the case of a horizontal layout or
     * horizontally in the case of a vertical layout. `"start"`, `"center"` and
     * `"end"` are the most commonly used, although all values of `align-self` are supported.
     * `"start"` refers to the top in a horizontal layout, and left in a vertical LTR layout
     * `"end"` refers to the bottom in a horizontal layout, and right in a vertical LTR layout
     * `"start"` and `"end"` reverse places when in a vertical layout in a RTL locale.
     *
     * @type {String}
     * @public
     */
    align: _propTypes2["default"].string,
    /**
     * Any valid {@link /docs/developer-guide/glossary/#node|Node} that should be positioned in this `Cell`.
     *
     * @type {Any}
     * @public
     */
    children: _propTypes2["default"].any,
    /**
     * The type of component to use to render as the `Cell`. May be a DOM node name (e.g 'div',
     * 'span', etc.) or a custom component.
     *
     * @type {String|Component}
     * @default 'div'
     * @public
     */
    component: _propTypes["default"].renderable,
    /**
     * Called with a reference to the root component.
     *
     * When using {@link ui/Layout.Cell}, the `ref` prop is forwarded to this component
     * as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,
    /**
     * Sizes `Cell` to its container.
     *
     * A `grow`able cell will expand to its maximum size, according to the remaining space of the
     * container. This is used when you want to grow the size of this Cell so that it fills the
     * container. See the {@link ui/Layout.CellBase.size|size} property for more details.
     *
     * When combined with {@link ui/Layout.CellBase.shrink|shrink}, `shrink` prop takes precedence over
     * `grow` prop and `grow` prop is simply ignored.
     *
     * @type {Boolean}
     * @public
     */
    grow: _propTypes2["default"].bool,
    /**
     * Sizes `Cell` to its contents.
     *
     * A `shrink`able cell will contract to its minimum size, according to the dimensions of its
     * contents. This is used when you want the size of this Cell's content to influence the
     * dimensions of this cell. `shrink` will not allow the contents of the Layout to be pushed
     * beyond its boundaries (overflowing). See the {@link ui/Layout.CellBase.size|size} property
     * for more details.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    shrink: _propTypes2["default"].bool,
    /**
     * Sets the desired size of the Cell using any valid CSS measurement value.
     *
     * When used in conjunction with {@link ui/Layout.CellBase.shrink|shrink}, the size will be
     * the maximum size, shrinking as necessary, to fit the content.
     *
     * When used in conjunction with {@link ui/Layout.CellBase.grow|grow}, the size will be the
     * minimunm size, growing as necessary, to fit the container.
     *
     * E.g.
     * * `size="400px"` -> cell will be 400px, regardless of the dimensions of your content
     * * `size="400px" shrink` -> cell will be 400px if your content is greater than 400px,
     *   and will match your contents size if it's smaller
     * * `size="400px" grow` -> cell will be 400px if the container has no remaining space.
     *   Cell can grow larger than `size` to fill the container if there is remaining space
     *   in the container.
     *
     * This accepts any valid CSS measurement value string. If a numeric value is used, it will
     * be treated as a pixel value and converted to a
     * {@link ui/resolution.unit|relative unit} based on the rules of
     * {@link ui/resolution|resolution independence}.
     *
     * @type {String|Number}
     * @public
     */
    size: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number])
  },
  defaultProps: {
    component: 'div',
    shrink: false
  },
  styles: {
    css: _LayoutModule["default"],
    className: 'cell'
  },
  computed: {
    className: function className(_ref) {
      var grow = _ref.grow,
        shrink = _ref.shrink,
        size = _ref.size,
        styler = _ref.styler;
      return styler.append({
        shrink: shrink,
        grow: !shrink && (grow || !size),
        size: size
      });
    },
    style: function style(_ref2) {
      var align = _ref2.align,
        shrink = _ref2.shrink,
        size = _ref2.size,
        _style = _ref2.style;
      if (typeof size === 'number') size = _resolution["default"].unit(_resolution["default"].scale(size), 'rem');
      var cellSize = size;
      if (!size) {
        if (shrink) {
          cellSize = '100%';
        } else {
          cellSize = 'none';
        }
      }
      return _objectSpread(_objectSpread({}, _style), {}, {
        alignSelf: toFlexAlign(align),
        flexBasis: shrink ? null : size,
        // Setting 100% below in the presence of `shrink`` and absense of `size` prevents overflow
        '--cell-size': cellSize
      });
    }
  },
  render: function render(_ref3) {
    var Component = _ref3.component,
      componentRef = _ref3.componentRef,
      rest = _objectWithoutProperties(_ref3, _excluded);
    delete rest.align;
    delete rest.grow;
    delete rest.shrink;
    delete rest.size;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _objectSpread({
      ref: componentRef
    }, rest));
  }
});

/**
 * Applies Cell behaviors.
 *
 * @hoc
 * @memberof ui/Layout
 * @mixes ui/ForwardRef.ForwardRef
 * @public
 */
exports.CellBase = CellBase;
var CellDecorator = (0, _ForwardRef["default"])({
  prop: 'componentRef'
});

/**
 * A stateless component that provides a space for your content in a
 * {@link ui/Layout.Layout|Layout}.
 *
 * @class Cell
 * @memberof ui/Layout
 * @extends ui/Layout.CellBase
 * @mixes ui/Layout.CellDecorator
 * @omit componentRef
 * @ui
 * @public
 */
exports.CellDecorator = CellDecorator;
var Cell = CellDecorator(CellBase);
exports.Cell = Cell;
var _default = Cell;
exports["default"] = _default;