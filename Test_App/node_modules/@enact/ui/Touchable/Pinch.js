"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pinchConfigPropType = exports.defaultPinchConfig = exports["default"] = exports.Pinch = void 0;
var _clamp = _interopRequireDefault(require("ramda/src/clamp"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var Pinch = /*#__PURE__*/_createClass(function Pinch() {
  var _this = this;
  _classCallCheck(this, Pinch);
  this.pinchConfig = null;
  this.startScale = 1.0;
  this.scale = 1.0;
  this.isPinching = function () {
    return _this.pinchConfig != null;
  };
  this.setContainerBounds = function (node) {
    var _this$pinchConfig = _this.pinchConfig,
      isGlobal = _this$pinchConfig.global,
      boxSizing = _this$pinchConfig.boxSizing;
    var bounds = null;
    if (typeof window === 'undefined' || !node) return;
    if (isGlobal) {
      bounds = {
        minX: 0,
        minY: 0,
        maxX: window.innerWidth,
        maxY: window.innerHeight
      };
    } else {
      bounds = node.getBoundingClientRect();

      // adjust for padding when using content-box
      if (boxSizing === 'content-box') {
        var computedStyle = window.getComputedStyle(node);
        bounds = {
          minX: bounds.left + parseInt(computedStyle.paddingLeft),
          minY: bounds.top + parseInt(computedStyle.paddingTop),
          maxX: bounds.right - parseInt(computedStyle.paddingRight),
          maxY: bounds.bottom - parseInt(computedStyle.paddingBottom)
        };
      } else {
        bounds = {
          minX: bounds.left,
          minY: bounds.top,
          maxX: bounds.right,
          maxY: bounds.bottom
        };
      }
    }
    _this.bounds = bounds;
  };
  this.getBoundsCoords = function (_ref) {
    var x = _ref.x,
      y = _ref.y;
    var _this$bounds = _this.bounds,
      maxX = _this$bounds.maxX,
      maxY = _this$bounds.maxY,
      minX = _this$bounds.minX,
      minY = _this$bounds.minY;
    return {
      x: (0, _clamp["default"])(minX, maxX, x) - minX,
      y: (0, _clamp["default"])(minY, maxY, y) - minY
    };
  };
  this.getDistance = function (coords) {
    if (Array.isArray(coords)) {
      var _this$getBoundsCoords = _this.getBoundsCoords(coords[0]),
        x1 = _this$getBoundsCoords.x,
        y1 = _this$getBoundsCoords.y;
      var _this$getBoundsCoords2 = _this.getBoundsCoords(coords[1]),
        x2 = _this$getBoundsCoords2.x,
        y2 = _this$getBoundsCoords2.y;
      var dx = x1 - x2;
      var dy = y1 - y2;
      return Math.sqrt(dx * dx + dy * dy);
    }
    return 0;
  };
  this.updateScale = function (scale) {
    var _this$pinchConfig2 = _this.pinchConfig,
      maxScale = _this$pinchConfig2.maxScale,
      minScale = _this$pinchConfig2.minScale;
    var newScale = (0, _clamp["default"])(minScale, maxScale, scale);
    if (newScale !== _this.scale) {
      _this.scale = newScale;
      return true;
    }
    return false;
  };
  this.begin = function (config, _ref2, coords, node) {
    var noResume = _ref2.noResume,
      onPinch = _ref2.onPinch,
      onPinchEnd = _ref2.onPinchEnd,
      onPinchStart = _ref2.onPinchStart;
    if (!onPinch && !onPinchStart && !onPinchEnd) {
      return;
    }
    _this.pinchConfig = _objectSpread(_objectSpread({}, config), {}, {
      node: node,
      resume: !noResume
    });
    _this.setContainerBounds(node);
    _this.startDist = _this.getDistance(coords);
    _this.previousDist = _this.startDist;
    _this.startScale = _this.scale;
    _this.onPinch = onPinch;
    _this.onPinchStart = onPinchStart;
    _this.onPinchEnd = onPinchEnd;
    if (_this.onPinchStart) {
      _this.onPinchStart({
        type: 'onPinchStart',
        coords: coords
      });
    }
  };
  // This method will get the `onPinch`, `onPinchEnd`, and `onPinchStart` props.
  this.updateProps = function (_ref3) {
    var onPinch = _ref3.onPinch,
      onPinchEnd = _ref3.onPinchEnd,
      onPinchStart = _ref3.onPinchStart;
    // Check `isPinching` gesture is not in progress. Check if gesture exists before updating the references to the `pinchConfig`
    if (!_this.isPinching()) return;

    // This will update the `pinchConfig` with the new value
    _this.onPinch = onPinch;
    _this.onPinchStart = onPinchStart;
    _this.onPinchEnd = onPinchEnd;
  };
  this.move = function (coords) {
    if (!_this.isPinching()) return;
    var moveTolerance = _this.pinchConfig.moveTolerance;
    var currentDist = _this.getDistance(coords);
    var scale = currentDist / _this.startDist * _this.startScale;
    if (Math.abs(_this.previousDist - currentDist) > moveTolerance && _this.onPinch && _this.updateScale(scale)) {
      _this.onPinch({
        type: 'onPinch',
        scale: _this.scale,
        coords: coords
      });
      _this.previousDist = currentDist;
    }
  };
  this.blur = function () {
    if (!_this.isPinching()) return;
    if (!_this.pinchConfig.global) {
      _this.end();
    }
  };
  this.end = function () {
    if (!_this.isPinching()) return;
    if (_this.onPinchEnd) {
      _this.onPinchEnd({
        type: 'onPinchEnd'
      });
    }
    _this.pinchConfig = null;
  };
});
exports.Pinch = Pinch;
var defaultPinchConfig = {
  boxSizing: 'border-box',
  global: false,
  maxScale: 4,
  minScale: 0.5,
  moveTolerance: 16
};
exports.defaultPinchConfig = defaultPinchConfig;
var pinchConfigPropType = _propTypes["default"].shape({
  boxSizing: _propTypes["default"].string,
  global: _propTypes["default"].bool,
  maxScale: _propTypes["default"].number,
  minScale: _propTypes["default"].number,
  moveTolerance: _propTypes["default"].number
});
exports.pinchConfigPropType = pinchConfigPropType;
var _default = Pinch;
exports["default"] = _default;