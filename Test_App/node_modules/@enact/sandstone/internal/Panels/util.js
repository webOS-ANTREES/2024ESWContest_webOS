"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSharedProps = exports.deleteSharedProps = exports.ContextAsDefaults = void 0;
exports.useContextAsDefaults = useContextAsDefaults;
var _hoc = _interopRequireDefault(require("@enact/core/hoc"));
var _react = require("react");
var _pick = _interopRequireDefault(require("ramda/src/pick"));
var _omit = _interopRequireDefault(require("ramda/src/omit"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var PanelsStateContext = /*#__PURE__*/(0, _react.createContext)(null);
var sharedContextProps = ['backButtonAriaLabel', 'backButtonBackgroundOpacity', 'closeButtonAriaLabel', 'closeButtonBackgroundOpacity', 'noBackButton', 'noCloseButton', 'onBack', 'onClose'];

// Given a full collection of props, return just the props from the shared list.
var getSharedProps = exports.getSharedProps = function getSharedProps(props) {
  return (0, _pick["default"])(sharedContextProps, props);
};

// Remove these shared props from the props object
var deleteSharedProps = exports.deleteSharedProps = function deleteSharedProps(props) {
  sharedContextProps.forEach(function (key) {
    delete props[key];
  });
};
function useContextAsDefaults(props) {
  var ctx = (0, _react.useContext)(PanelsStateContext);
  var contextProps = _objectSpread(_objectSpread({}, ctx), getSharedProps(props));
  var provideContextAsDefaults = function provideContextAsDefaults(children) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(PanelsStateContext.Provider, {
      value: contextProps,
      children: children
    });
  };
  return {
    contextProps: contextProps,
    provideContextAsDefaults: provideContextAsDefaults
  };
}
var defaultConfig = {
  // Array of prop names to add to the Wrapped component.
  props: []
};
var ContextAsDefaults = exports.ContextAsDefaults = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  // eslint-disable-next-line no-shadow
  return function ContextAsDefaults(props) {
    var sharedProps = getSharedProps(props);
    var _useContextAsDefaults = useContextAsDefaults(props, sharedProps),
      contextProps = _useContextAsDefaults.contextProps,
      provideContextAsDefaults = _useContextAsDefaults.provideContextAsDefaults;

    // The following generates a complete list of all of the props expected by Wrapped
    // Using `pick`, add the specifically requested shared context props
    // Using `omit`, exclude all of the shared props
    return provideContextAsDefaults( /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, (0, _pick["default"])(config.props, contextProps)), (0, _omit["default"])(sharedContextProps, props))));
  };
});