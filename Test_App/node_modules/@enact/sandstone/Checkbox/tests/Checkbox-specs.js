"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _Checkbox = _interopRequireWildcard(require("../Checkbox"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
describe('CheckboxItem Specs', function () {
  test('should not include the selected class when not selected', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {}));
    var checkboxElement = _react.screen.getByRole('checkbox');
    expect(checkboxElement).not.toHaveClass('selected');
  });
  test('should not be checked', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {}));
    var actual = _react.screen.getByRole('checkbox');
    expect(actual).toHaveAttribute('aria-checked', 'false');
  });
  test('should add the selected class when given the selected prop', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {
      selected: true
    }));
    var checkboxElement = _react.screen.getByRole('checkbox');
    var expected = 'selected';
    expect(checkboxElement).toHaveClass(expected);
  });
  test('should be checked when initiated with `selected` prop', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {
      selected: true
    }));
    var actual = _react.screen.getByRole('checkbox');
    expect(actual).toHaveAttribute('aria-checked', 'true');
  });
  test('should add the indeterminate class when given the indeterminate prop', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {
      indeterminate: true
    }));
    var actual = _react.screen.getByRole('checkbox');
    var expected = 'indeterminate';
    expect(actual).toHaveClass(expected);
  });
  test('should not include the indeterminate class when not indeterminate', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {}));
    var actual = _react.screen.getByRole('checkbox');
    var expected = 'indeterminate';
    expect(actual).not.toHaveClass(expected);
  });
  test('should prioritize indeterminate over selected', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {
      indeterminate: true,
      selected: true,
      indeterminateIcon: "Ind"
    }));
    var actual = _react.screen.getByRole('checkbox').textContent;
    var expected = 'Ind';
    expect(actual).toBe(expected);
  });
  test('should check the checkbox with one click', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox["default"], {}));
    var actual = _react.screen.getByRole('checkbox');
    var expected = 'selected';
    yield user.click(actual);
    expect(actual).toHaveClass(expected);
  }));
  test('should uncheck the checkbox with two clicks', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox["default"], {}));
    var actual = _react.screen.getByRole('checkbox');
    var expected = 'selected';
    yield user.click(actual);
    yield user.click(actual);
    expect(actual).not.toHaveClass(expected);
  }));
});