"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.WizardPanelsDecorator = exports.WizardPanelsContext = exports.WizardPanelsBase = exports.WizardPanels = void 0;
var _handle = _interopRequireWildcard(require("@enact/core/handle"));
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));
var _useChainRefs = _interopRequireDefault(require("@enact/core/useChainRefs"));
var _I18nDecorator = require("@enact/i18n/I18nDecorator");
var _spotlight = _interopRequireDefault(require("@enact/spotlight"));
var _SpotlightContainerDecorator = _interopRequireWildcard(require("@enact/spotlight/SpotlightContainerDecorator"));
var _Layout = require("@enact/ui/Layout");
var _Changeable = _interopRequireDefault(require("@enact/ui/Changeable"));
var _ForwardRef = _interopRequireDefault(require("@enact/ui/ForwardRef"));
var _ViewManager = _interopRequireDefault(require("@enact/ui/ViewManager"));
var _IString = _interopRequireDefault(require("ilib/lib/IString"));
var _propTypes2 = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _react = require("react");
var _$L = _interopRequireDefault(require("../internal/$L"));
var _Button = _interopRequireDefault(require("../Button"));
var _Panels = require("../Panels");
var _Panel = require("../Panels/Panel");
var _Panels2 = require("../internal/Panels");
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _Steps = _interopRequireDefault(require("../Steps"));
var _useFocusOnTransition2 = _interopRequireDefault(require("./useFocusOnTransition"));
var _useToggleRole2 = _interopRequireDefault(require("./useToggleRole"));
var _WizardPanelsModule = _interopRequireDefault(require("./WizardPanels.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["aria-label", "children", "closeButton", "footer", "fullScreenContent", "index", "prevNavigationButton", "nextNavigationButton", "noAnimation", "noSubtitle", "onTransition", "onWillTransition", "reverseTransition", "steps", "subtitle", "title"],
  _excluded2 = ["children", "componentRef", "data-spotlight-id", "index", "onTransition", "onWillTransition", "subtitle", "title", "rtl"],
  _excluded3 = ["onWillTransition"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var WizardPanelsContext = exports.WizardPanelsContext = /*#__PURE__*/(0, _react.createContext)(null);
var DecoratedPanelBase = (0, _Panels2.FloatingLayerIdProvider)(_Panel.PanelBase);
var HeaderContainer = (0, _SpotlightContainerDecorator["default"])(_Panels.Header);

/**
 * A WizardPanels that has steps with corresponding panels.
 *
 * @example
 * 	<WizardPanels>
 *		<WizardPanels.Panel subtitle="Subtitle" title="Title">
 *			<Scroller>
 *				lorem ipsum ...
 *			</Scroller>
 *			<footer>
 *				<Button>OK</Button>
 *				<Button>Cancel</Button>
 *			</footer>
 *		</WizardPanels.Panel>
 *	</WizardPanels>
 *
 * @class WizardPanelsBase
 * @memberof sandstone/WizardPanels
 * @ui
 * @public
 */
var WizardPanelsBase = exports.WizardPanelsBase = (0, _kind["default"])({
  name: 'WizardPanels',
  propTypes: /** @lends sandstone/WizardPanels.WizardPanelsBase.prototype */{
    /**
     * The "aria-label" for the Panel.
     *
     * By default, the panel will be labeled by its {@link sandstone/Panels.Header|Header}.
     * When `aria-label` is set, it will be used instead to provide an accessibility label for
     * the panel.
     *
     * @type {String}
     * @public
     */
    'aria-label': _propTypes2["default"].string,
    /**
     * Hint string read when focusing the close button.
     *
     * @type {String}
     * @default 'Exit quick guide'
     * @private
     */
    closeButtonAriaLabel: _propTypes2["default"].string,
    /**
     * Obtains a reference to the root node.
     *
     * @type {Function|Object}
     * @public
     */
    componentRef: _propTypes["default"].ref,
    /**
     * The current step.
     *
     * This is 1-based, not 0-based; as in the first step is `1`. If omitted, this will equal
     * the currently selected panel.
     *
     * @type {Number}
     * @public
     */
    current: _propTypes2["default"].number,
    /**
    * Components to be included under the primary content.
    *
    * Typically, up to 2 buttons may be included.
    *
    * @type {Element|Element[]}
    * @public
    */
    footer: _propTypes2["default"].node,
    /**
    * When `true`, indicates full screen size content
    *
    * @type {Boolean}
    * @private
    */
    fullScreenContent: _propTypes2["default"].bool,
    /**
    * The currently selected panel.
    *
    * @type {Number}
    * @default 0
    * @private
    */
    index: _propTypes2["default"].number,
    /**
     * The button to use in place of the standard next button.
     *
     * This prop accepts a component (e.g. `Button`), a component instance, or a boolean value.
     *
     * If `false`, the button will not show. If set to a component, or `true`, the button will
     * show. This will override the setting of `nextButtonVisibility`.
     *
    	 * Example:
    	 * ```
     * nextButton={<Button icon="closex" aria-label="Quit">Close</Button>}
     * ```
     *
     * @type {Boolean|Component}
     * @private
     */
    nextButton: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes["default"].componentOverride]),
    /**
     * Specifies when and how to show `nextButton` on WizardPanel.
     *
     * * `'auto'` will display the `nextButton` on every `WizardPanel.Panel` except the last
     * * `'always'` will always display the `nextButton`
     * * `'never'` will always hide the `nextButton`
     *
     * Note, children values will override the generalized parent visibility settings. In this
     * case, a customized `nextButton` on WizardPanel.Panel will take precedence over the
     * `nextButtonVisibility` value.
     *
     * @type {('auto'|'always'|'never')}
     * @default 'auto'
     * @public
     */
    nextButtonVisibility: _propTypes2["default"].oneOf(['auto', 'always', 'never']),
    /**
     * Disables panel transitions.
     *
     * @type {Boolean}
     * @public
     */
    noAnimation: _propTypes2["default"].bool,
    /**
    * Omits the steps component.
    *
    * @type {Boolean}
    * @public
    */
    noSteps: _propTypes2["default"].bool,
    /**
    * Omits the subtitle area.
    *
    * @type {Boolean}
    * @default false
    * @public
    */
    noSubtitle: _propTypes2["default"].bool,
    /**
    * Called when the index value is changed.
    *
    * @type {Function}
    * @param {Object} event
    * @public
    */
    onChange: _propTypes2["default"].func,
    /**
     * Called when the close button is clicked.
     *
     * @type {Function}
     * @private
     */
    onClose: _propTypes2["default"].func,
    /**
     * Called when the next button is clicked in WizardPanel.
     *
     * Calling `preventDefault` on the passed event will prevent advancing to the next panel.
     *
     * @type {Function}
     * @public
     */
    onNextClick: _propTypes2["default"].func,
    /**
     * Called when previous button is clicked in WizardPanel.
     *
     * Calling `preventDefault` on the passed event will prevent navigation to the previous panel.
     *
     * @type {Function}
     * @public
     */
    onPrevClick: _propTypes2["default"].func,
    /**
     * Called when a transition completes.
     *
     * @type {Function}
     */
    onTransition: _propTypes2["default"].func,
    /**
     * Called before a transition begins.
     *
     * @type {Function}
     */
    onWillTransition: _propTypes2["default"].func,
    /**
     * The button to use in place of the standard prev button.
     *
     * This prop accepts a component (e.g. `Button`), a component instance, or a boolean value.
     *
     * If `false`, the button will not show. If set to a component, or `true`, the button will
     * show. This will override the setting of `prevButtonVisibility`.
     *
    	 * Example:
    	 * ```
     * prevButton={<Button icon="closex" aria-label="Back">Back</Button>}
     * ```
     *
     * @type {Boolean|Component}
     * @private
     */
    prevButton: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes["default"].componentOverride]),
    /**
     * Specifies when and how to show `prevButton` on WizardPanel.
     *
     * * `'auto'` will display the `prevButton` on every `WizardPanel.Panel` except the first
     * * `'always'` will always display the `prevButton`
     * * `'never'` will always hide the `prevButton`
     *
     * Note, children values will override the generalized parent visibility settings. In this case,
     * if user provides a customized `prevButton` on WizardPanel.Panel will take precedence over the `prevButtonVisibility` value.
     *
     * @type {('auto'|'always'|'never')}
     * @default 'auto'
     * @public
     */
    prevButtonVisibility: _propTypes2["default"].oneOf(['auto', 'always', 'never']),
    /**
     * Explicitly sets the ViewManager transition direction.
     *
     * @type {Boolean}
     * @private
     */
    reverseTransition: _propTypes2["default"].bool,
    /**
    * The subtitle to display.
    *
    * If {@link sandstone/WizardPanels.WizardPanelsBase.noSubtitle|noSubtitle} is `true`, this prop is ignored.
    *
    * @type {String}
    * @public
    */
    subtitle: _propTypes2["default"].string,
    /**
    * The title to display.
    *
    * @type {String}
    * @public
    */
    title: _propTypes2["default"].string,
    /**
     * The total number of steps.
     *
     * If omitted, this will equal the total number of Panels.
     *
     * @type {Number}
     * @public
     */
    total: _propTypes2["default"].number,
    /**
    * The total panels in WizardPanels.
    *
    * @type {Number}
    * @private
    */
    totalPanels: _propTypes2["default"].number
  },
  defaultProps: {
    index: 0,
    nextButtonVisibility: 'auto',
    noSubtitle: false,
    prevButtonVisibility: 'auto'
  },
  styles: {
    css: _WizardPanelsModule["default"],
    className: 'wizardPanels'
  },
  handlers: {
    onClose: (0, _handle.forwardCustom)('onClose'),
    onNextClick: (0, _handle["default"])((0, _handle.forwardCustomWithPrevent)('onNextClick'), function (ev, _ref) {
      var spotlightId = _ref['data-spotlight-id'],
        fullScreenContent = _ref.fullScreenContent,
        index = _ref.index,
        onChange = _ref.onChange,
        totalPanels = _ref.totalPanels;
      if (fullScreenContent) {
        _spotlight["default"].set(spotlightId, {
          enterTo: 'last-focused'
        });
      }
      if (onChange && index !== totalPanels) {
        var nextIndex = index < totalPanels - 1 ? index + 1 : index;
        onChange({
          type: 'onChange',
          index: nextIndex
        });
      }
    }),
    onPrevClick: (0, _handle["default"])((0, _handle.forwardCustomWithPrevent)('onPrevClick'), function (ev, _ref2) {
      var index = _ref2.index,
        onChange = _ref2.onChange;
      if (onChange && index !== 0) {
        var prevIndex = index > 0 ? index - 1 : index;
        onChange({
          type: 'onChange',
          index: prevIndex
        });
      }
    }),
    onTransition: function onTransition(ev, _ref3) {
      var index = _ref3.index,
        _onTransition = _ref3.onTransition;
      if (_onTransition) {
        _onTransition({
          type: 'onTransition',
          index: index
        });
      }
    },
    onWillTransition: function onWillTransition(ev, _ref4) {
      var index = _ref4.index,
        _onWillTransition = _ref4.onWillTransition;
      if (_onWillTransition) {
        _onWillTransition({
          type: 'onWillTransition',
          index: index
        });
      }
    }
  },
  computed: {
    'aria-label': function ariaLabel(_ref5) {
      var label = _ref5['aria-label'],
        current = _ref5.current,
        index = _ref5.index,
        noSteps = _ref5.noSteps,
        subtitle = _ref5.subtitle,
        title = _ref5.title;
      if (label) return label;
      var stepNum = typeof current === 'number' && current > 0 ? current : index + 1;
      var step = noSteps ? '' : new _IString["default"]((0, _$L["default"])('step {num}')).format({
        num: stepNum
      }) + ' ';
      return "".concat(step).concat(title, " ").concat(subtitle);
    },
    className: function className(_ref6) {
      var noSteps = _ref6.noSteps,
        noSubtitle = _ref6.noSubtitle,
        styler = _ref6.styler;
      return styler.append({
        noSteps: noSteps,
        noSubtitle: noSubtitle
      });
    },
    closeButton: function closeButton(_ref7) {
      var closeButtonAriaLabel = _ref7.closeButtonAriaLabel,
        onClose = _ref7.onClose,
        totalPanels = _ref7.totalPanels;
      return totalPanels ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        "aria-label": closeButtonAriaLabel == null ? (0, _$L["default"])('Exit quick guide') : closeButtonAriaLabel,
        className: _WizardPanelsModule["default"].close,
        icon: "closex",
        onClick: onClose,
        size: "small"
      }) : null;
    },
    steps: function steps(_ref8) {
      var current = _ref8.current,
        fullScreenContent = _ref8.fullScreenContent,
        index = _ref8.index,
        noSteps = _ref8.noSteps,
        total = _ref8.total,
        totalPanels = _ref8.totalPanels;
      var currentStep = noSteps && 1 || (typeof current === 'number' && current > 0 ? current : index + 1);
      var totalSteps = noSteps && 1 || (typeof total === 'number' && total > 0 ? total : totalPanels);
      return fullScreenContent ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps["default"], {
        className: _WizardPanelsModule["default"].steps,
        pastIcon: 'circle',
        currentIcon: 'circle',
        futureIcon: 'circle',
        current: currentStep,
        layout: "quickGuidePanels",
        total: totalSteps
      }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps["default"], {
        className: _WizardPanelsModule["default"].steps,
        current: currentStep,
        slot: "slotAbove",
        total: totalSteps
      });
    },
    prevNavigationButton: function prevNavigationButton(_ref9) {
      var fullScreenContent = _ref9.fullScreenContent,
        index = _ref9.index,
        onPrevClick = _ref9.onPrevClick,
        prevButton = _ref9.prevButton,
        prevButtonVisibility = _ref9.prevButtonVisibility;
      var isPrevButtonVisible = prevButtonVisibility === 'always' || prevButtonVisibility === 'auto' && index !== 0;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels2.NavigationButton, {
        "aria-label": (0, _$L["default"])('Previous'),
        backgroundOpacity: "transparent",
        component: prevButton,
        focusEffectIconOnly: true,
        icon: "arrowlargeleft",
        className: _WizardPanelsModule["default"].navigationButton,
        iconFlip: "auto",
        minWidth: false,
        onClick: onPrevClick,
        slot: fullScreenContent ? null : 'slotBefore',
        visible: isPrevButtonVisible
      });
    },
    nextNavigationButton: function nextNavigationButton(_ref10) {
      var fullScreenContent = _ref10.fullScreenContent,
        index = _ref10.index,
        nextButton = _ref10.nextButton,
        nextButtonVisibility = _ref10.nextButtonVisibility,
        onNextClick = _ref10.onNextClick,
        totalPanels = _ref10.totalPanels;
      var isNextButtonVisible = nextButtonVisibility === 'always' || nextButtonVisibility === 'auto' && index < totalPanels - 1;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels2.NavigationButton, {
        "aria-label": (0, _$L["default"])('Next'),
        backgroundOpacity: "transparent",
        component: nextButton,
        focusEffectIconOnly: true,
        className: _WizardPanelsModule["default"].navigationButton,
        icon: "arrowlargeright",
        iconFlip: "auto",
        iconPosition: "after",
        id: fullScreenContent ? 'fullScreenNextButton' : null,
        minWidth: false,
        onClick: onNextClick,
        slot: fullScreenContent ? null : 'slotAfter',
        visible: isNextButtonVisible
      });
    }
  },
  render: function render(_ref11) {
    var ariaLabel = _ref11['aria-label'],
      children = _ref11.children,
      closeButton = _ref11.closeButton,
      footer = _ref11.footer,
      fullScreenContent = _ref11.fullScreenContent,
      index = _ref11.index,
      prevNavigationButton = _ref11.prevNavigationButton,
      nextNavigationButton = _ref11.nextNavigationButton,
      noAnimation = _ref11.noAnimation,
      noSubtitle = _ref11.noSubtitle,
      onTransition = _ref11.onTransition,
      onWillTransition = _ref11.onWillTransition,
      reverseTransition = _ref11.reverseTransition,
      steps = _ref11.steps,
      subtitle = _ref11.subtitle,
      title = _ref11.title,
      rest = _objectWithoutProperties(_ref11, _excluded);
    delete rest.closeButtonAriaLabel;
    delete rest.current;
    delete rest.nextButton;
    delete rest.nextButtonVisibility;
    delete rest.noSteps;
    delete rest.onClose;
    delete rest.onNextClick;
    delete rest.onPrevClick;
    delete rest.prevButton;
    delete rest.prevButtonVisibility;
    delete rest.total;
    delete rest.totalPanels;
    if (fullScreenContent) {
      // eslint-disable-next-line enact/prop-types
      delete rest.hideChildren;
    }
    return fullScreenContent ? /*#__PURE__*/(0, _jsxRuntime.jsx)("article", {
      role: "region",
      "aria-labelledby": "quickguidepanel_index_".concat(index),
      ref: rest.componentRef,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Column, _objectSpread(_objectSpread({
        "aria-label": ariaLabel,
        id: "quickguidepanel_index_".concat(index)
      }, rest), {}, {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Row, {
          className: _WizardPanelsModule["default"].fullScreenContentHeader,
          children: [steps, closeButton]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Row, {
          className: _WizardPanelsModule["default"].fullScreenNavigationButtonContainer,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
            shrink: true,
            children: prevNavigationButton
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
            shrink: true,
            children: nextNavigationButton
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ViewManager["default"], {
          arranger: _Panels2.BasicArranger,
          duration: 400,
          noAnimation: true,
          onTransition: onTransition,
          onWillTransition: onWillTransition,
          children: children
        })]
      }))
    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(DecoratedPanelBase, _objectSpread(_objectSpread({}, rest), {}, {
      header: /*#__PURE__*/(0, _jsxRuntime.jsxs)(HeaderContainer, {
        "aria-label": ariaLabel,
        arranger: noAnimation ? null : _Panels2.CrossFadeArranger,
        centered: true,
        css: _WizardPanelsModule["default"],
        noCloseButton: true,
        noSubtitle: noSubtitle,
        subtitle: subtitle,
        title: title,
        type: "wizard",
        children: [steps, prevNavigationButton, nextNavigationButton]
      }),
      panelType: "wizard",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Column, {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
          className: _WizardPanelsModule["default"].content,
          children: children ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ViewManager["default"], {
            arranger: _Panels2.BasicArranger,
            duration: 400,
            onTransition: onTransition,
            onWillTransition: onWillTransition,
            noAnimation: noAnimation,
            reverseTransition: reverseTransition,
            children: children
          }) : null
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
          className: _WizardPanelsModule["default"].footer,
          component: "footer",
          shrink: true,
          children: footer
        }, index)]
      })
    }));
  }
});

// single-index ViewManagers need some help knowing when the transition direction needs to change
// because the index is always 0 from its perspective.
function useReverseTransition() {
  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
  var rtl = arguments.length > 1 ? arguments[1] : undefined;
  var prevIndex = (0, _react.useRef)(index);
  var reverse = (0, _react.useRef)(rtl);
  // If the index was changed, the panel transition is occured on the next cycle by `Panel`
  var prev = {
    reverseTransition: reverse.current,
    prevIndex: prevIndex.current
  };
  if (prevIndex.current !== index) {
    reverse.current = rtl ? index > prevIndex.current : index < prevIndex.current;
    prevIndex.current = index;
  }
  return prev;
}

/**
 * WizardPanelsRouter passes the children, footer, subtitle, and title from
 * {@link sandstone/WizardPanels.Panel|WizardPanel} to
 * {@link sandstone/WizardPanels.WizardPanelsBase|WizardPanelsBase}.
 *
 * @class WizardPanelsRouter
 * @memberof sandstone/WizardPanels
 * @private
 */
var WizardPanelsRouter = function WizardPanelsRouter(Wrapped) {
  var WizardPanelsProvider = function WizardPanelsProvider(_ref12) {
    var children = _ref12.children,
      componentRef = _ref12.componentRef,
      spotlightId = _ref12['data-spotlight-id'],
      index = _ref12.index,
      onTransition = _ref12.onTransition,
      onWillTransition = _ref12.onWillTransition,
      subtitle = _ref12.subtitle,
      title = _ref12.title,
      rtl = _ref12.rtl,
      rest = _objectWithoutProperties(_ref12, _excluded2);
    var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      panel = _useState2[0],
      setPanel = _useState2[1];
    var _useToggleRole = (0, _useToggleRole2["default"])(),
      a11yRef = _useToggleRole.ref,
      a11yOnWillTransition = _useToggleRole.onWillTransition;
    var autoFocus = (0, _Panels2.useAutoFocus)({
      autoFocus: 'default-element',
      hideChildren: panel == null
    });
    var ref = (0, _useChainRefs["default"])(autoFocus, a11yRef, componentRef);
    var _useReverseTransition = useReverseTransition(index, rtl),
      reverseTransition = _useReverseTransition.reverseTransition,
      prevIndex = _useReverseTransition.prevIndex;
    var _useFocusOnTransition = (0, _useFocusOnTransition2["default"])({
        onTransition: onTransition,
        onWillTransition: onWillTransition,
        spotlightId: spotlightId
      }),
      focusOnWillTransition = _useFocusOnTransition.onWillTransition,
      transition = _objectWithoutProperties(_useFocusOnTransition, _excluded3);
    var handleWillTransition = (0, _react.useCallback)(function (ev) {
      focusOnWillTransition(ev);
      a11yOnWillTransition(ev);
    }, [a11yOnWillTransition, focusOnWillTransition]);
    var totalPanels = panel ? _react.Children.count(children) : 0;
    var currentTitle = panel && panel.title ? panel.title : title;
    var currentSubTitle = panel && panel.subtitle ? panel.subtitle : subtitle;
    // eslint-disable-next-line enact/prop-types
    delete rest.onBack;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(WizardPanelsContext.Provider, {
      value: setPanel,
      children: [_react.Children.toArray(children)[index], /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), panel), transition), {}, {
        componentRef: ref,
        "data-spotlight-id": spotlightId,
        index: index,
        onWillTransition: handleWillTransition,
        title: currentTitle,
        subtitle: currentSubTitle,
        totalPanels: totalPanels,
        reverseTransition: reverseTransition,
        children: panel && panel.children ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "enact-fit",
          children: panel.children
        }, "panel".concat(prevIndex)) : null
      }))]
    });
  };
  WizardPanelsProvider.propTypes = /** @lends sandstone/WizardPanels.WizardPanelsRouter.prototype */{
    /**
     * Obtains a reference to the root node.
     *
     * @type {Function|Object}
     * @private
     */
    componentRef: _propTypes["default"].ref,
    /**
    * The spotlight id for the panel
    *
    * @type {String}
    * @private
    */
    'data-spotlight-id': _propTypes2["default"].string,
    /**
    * The currently selected step.
    *
    * @type {Number}
    * @default 0
    * @private
    */
    index: _propTypes2["default"].number,
    /**
     * Disables panel transitions.
     *
     * @type {Boolean}
     * @public
     */
    noAnimation: _propTypes2["default"].bool,
    /**
    * Called when a transition completes
    *
    * @type {Function}
    * @private
    */
    onTransition: _propTypes2["default"].func,
    /**
    * Called when a transition begins
    *
    * @type {Function}
    * @private
    */
    onWillTransition: _propTypes2["default"].func,
    /**
     * Used to determine the transition direction
     *
     * @type {Boolean}
     * @private
     */
    rtl: _propTypes2["default"].bool,
    /**
    * The "default" subtitle for WizardPanels if subtitle isn't explicitly set in
    * {@link sandstone/WizardPanels.Panel|Panel}.
    * @example
    * 	<WizardPanels subtitle="Subtitle">
    *		<WizardPanels.Panel>
    *			lorem ipsum ...
    *		</WizardPanels.Panel>
    *	</WizardPanels>
    *
    * @type {String}
    * @private
    */
    subtitle: _propTypes2["default"].string,
    /**
    * The "default" title for WizardPanels if title isn't explicitly set in
    * {@link sandstone/WizardPanels.Panel|Panel}.
    * @example
    * 	<WizardPanels title="Title">
    *		<WizardPanels.Panel>
    *			lorem ipsum ...
    *		</WizardPanels.Panel>
    *	</WizardPanels>
    *
    * @type {String}
    * @private
    */
    title: _propTypes2["default"].string
  };
  WizardPanelsProvider.defaultProps = {
    index: 0,
    subtitle: '',
    title: ''
  };
  return WizardPanelsProvider;
};
var WizardPanelsDecorator = exports.WizardPanelsDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}), (0, _Changeable["default"])({
  prop: 'index'
}), (0, _Panels2.CancelDecorator)({
  cancel: 'onChange',
  shouldCancel: (0, _handle["default"])((0, _handle.forwardCustomWithPrevent)('onBack'), (0, _handle.not)((0, _handle.forProp)('noPrevButton', true)))
}), (0, _SpotlightContainerDecorator["default"])({
  continue5WayHold: true,
  // prefer any spottable within the panel body (content or footer) followed by header
  defaultElement: [".".concat(_SpotlightContainerDecorator.spotlightDefaultClass), ".".concat(_WizardPanelsModule["default"].content, " *, .").concat(_WizardPanelsModule["default"].footer, " *"), 'header > *', "#fullScreenNextButton", ".".concat(_WizardPanelsModule["default"].close, " *")],
  enterTo: 'default-element'
}), (0, _I18nDecorator.I18nContextDecorator)({
  rtlProp: 'rtl'
}), WizardPanelsRouter, _Skinnable["default"]);

/**
 * A WizardPanels that can step through different panels.
 * Expects {@link sandstone/WizardPanels.Panel|WizardPanel} as children.
 *
 * @class WizardPanels
 * @memberof sandstone/WizardPanels
 * @extends sandstone/WizardPanels.WizardPanelsBase
 * @mixes ui/Changeable.Changeable
 * @ui
 * @public
 */
var WizardPanels = exports.WizardPanels = WizardPanelsDecorator(WizardPanelsBase);

/**
 * Called when the back button is pressed.
 *
 * If `ev.preventDefault` is called, `WizardPanels` will not process the event further. If it is
 * not called, the index of the panel will be decremented unless `noPrevButton` is set.
 *
 * @name onBack
 * @memberof sandstone/WizardPanels.WizardPanels.prototype
 * @type {Function}
 */
var _default = exports["default"] = WizardPanels;