"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.RadioItemDecorator = exports.RadioItemBase = exports.RadioItem = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));
var _Slottable = _interopRequireDefault(require("@enact/ui/Slottable"));
var _Toggleable = _interopRequireDefault(require("@enact/ui/Toggleable"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Item = require("../Item");
var _RadioItemModule = _interopRequireDefault(require("./RadioItem.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "css", "icon", "selected", "slotBefore"];
/**
 * Provides a Sandstone-themed Item component with an interactive radio toggle icon.
 *
 * @example
 * <RadioItem>Item</RadioItem>
 *
 * @module sandstone/RadioItem
 * @exports RadioItem
 * @exports RadioItemBase
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Item = (0, _Item.ItemDecorator)(_Item.ItemBase);

/**
 * An item component with a radio toggle icon.
 *
 * This component is most often not used directly but may be composed within another component as it
 * is within {@link sandstone/RadioItem.RadioItem|RadioItem}.
 *
 * @class RadioItemBase
 * @memberof sandstone/RadioItem
 * @extends sandstone/Item.Item
 * @ui
 * @public
 */
var RadioItemBase = exports.RadioItemBase = (0, _kind["default"])({
  name: 'RadioItem',
  propTypes: /** @lends sandstone/RadioItem.RadioItem.prototype */{
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `radioItem` - The root class name
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,
    /**
     * The icon to display when selected.
     *
     * @type {String}
     * @default 'circle'
     * @see {@link sandstone/Icon.Icon}
     */
    icon: _propTypes["default"].string,
    /**
     * If true it will be selected.
     *
     * @type {Boolean}
     * @public
     */
    selected: _propTypes["default"].bool,
    /**
     * Nodes to be inserted after the radio button and before `children`.
     *
     * @type {Node}
     * @public
     */
    slotBefore: _propTypes["default"].node
  },
  defaultProps: {
    icon: 'circle'
  },
  styles: {
    css: _RadioItemModule["default"],
    className: 'radioItem',
    publicClassNames: ['radioItem']
  },
  render: function render(_ref) {
    var children = _ref.children,
      css = _ref.css,
      icon = _ref.icon,
      selected = _ref.selected,
      slotBefore = _ref.slotBefore,
      rest = _objectWithoutProperties(_ref, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Item, _objectSpread(_objectSpread({
      "data-webos-voice-intent": "SelectRadioItem",
      role: "checkbox"
    }, rest), {}, {
      "aria-checked": selected,
      css: css,
      selected: selected,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("slotBefore", {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon["default"], {
          className: css.icon,
          size: "tiny",
          children: icon
        }), slotBefore]
      }), children]
    }));
  }
});

/**
 * Sandstone specific behaviors to apply to {@link sandstone/RadioItem.RadioItemBase|RadioItem}.
 *
 * @hoc
 * @memberof sandstone/RadioItem
 * @mixes ui/Toggleable.Toggleable
 * @public
 */
var RadioItemDecorator = exports.RadioItemDecorator = (0, _compose["default"])((0, _Toggleable["default"])({
  toggleProp: 'onClick'
}), (0, _Slottable["default"])({
  slots: ['label', 'slotAfter', 'slotBefore']
}));

/**
 * Renders an `Item` with a radio-dot component. Useful to show a selected state on an Item.
 *
 * @class RadioItem
 * @memberof sandstone/RadioItem
 * @extends sandstone/RadioItem.RadioItemBase
 * @mixes sandstone/RadioItem.RadioItemDecorator
 * @ui
 * @public
 */
var RadioItem = exports.RadioItem = (0, _Pure["default"])(RadioItemDecorator(RadioItemBase));
var _default = exports["default"] = RadioItem;