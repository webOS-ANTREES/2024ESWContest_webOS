"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FeedbackBase = exports.Feedback = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _util = require("../internal/util");
var _FeedbackIcon = _interopRequireDefault(require("./FeedbackIcon"));
var _FeedbackIcons = _interopRequireDefault(require("./FeedbackIcons.js"));
var _FeedbackModule = _interopRequireDefault(require("./Feedback.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "playbackState"];
/**
 * Feedback {@link sandstone/VideoPlayer}. This displays the media's playback rate and other
 * information.
 *
 * @class Feedback
 * @memberof sandstone/VideoPlayer
 * @ui
 * @private
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var FeedbackBase = exports.FeedbackBase = (0, _kind["default"])({
  name: 'Feedback',
  propTypes: /** @lends sandstone/VideoPlayer.Feedback.prototype */{
    children: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
    /**
     * Refers to one of the following possible media playback states.
     * `'play'`, `'pause'`, `'rewind'`, `'fastForward'` ,
     * `'jumpBackward'`, `'jumpForward'`, `'jumpToStart'`, `'jumpToEnd'`, `'stop'`.
     *
     * Each state understands where its related icon should be positioned, and whether it should
     * respond to changes to the `visible` property.
     *
     * This string feeds directly into {@link sandstone/FeedbackIcon.FeedbackIcon}.
     *
     * @type {('play'|'pause'|'rewind'|'fastForward'|'jumpBackward'|'jumpForward'|'jumpToStart'|'jumpToEnd'|'stop')}
     * @public
     */
    playbackState: _propTypes["default"].oneOf(Object.keys(_FeedbackIcons["default"])),
    /**
     * If the current `playbackState` allows this component's visibility to be changed,
     * this component will be hidden. If not, setting this property will have no effect.
     * All `playbackState`s respond to this property except the following:
     * `'rewind'`, `'fastForward'`.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    visible: _propTypes["default"].bool
  },
  defaultProps: {
    visible: true
  },
  styles: {
    css: _FeedbackModule["default"],
    className: 'feedback'
  },
  computed: {
    className: function className(_ref) {
      var styler = _ref.styler,
        visible = _ref.visible;
      return styler.append({
        hidden: !visible
      });
    },
    children: function children(_ref2) {
      var _children = _ref2.children,
        s = _ref2.playbackState;
      if (_FeedbackIcons["default"][s]) {
        // Working with a known state, treat `children` as playbackRate
        if (_FeedbackIcons["default"][s].message && _children !== 1) {
          // `1` represents a playback rate of 1:1
          return _children.toString().replace(/^-/, '') + _FeedbackIcons["default"][s].message;
        }
      } else {
        // Custom Message
        return _children;
      }
    }
  },
  render: function render(_ref3) {
    var children = _ref3.children,
      playbackState = _ref3.playbackState,
      rest = _objectWithoutProperties(_ref3, _excluded);
    delete rest.visible;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
      children: [_FeedbackIcons["default"][playbackState] && _FeedbackIcons["default"][playbackState].position === 'before' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_FeedbackIcon["default"], {
        children: playbackState
      }) : null, children ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: _FeedbackModule["default"].message,
        children: children
      }) : null, _FeedbackIcons["default"][playbackState] && _FeedbackIcons["default"][playbackState].position === 'after' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_FeedbackIcon["default"], {
        children: playbackState
      }) : null]
    }));
  }
});
var Feedback = exports.Feedback = (0, _util.onlyUpdateForProps)(FeedbackBase, ['children', 'playbackState', 'visible']);
var _default = exports["default"] = Feedback;