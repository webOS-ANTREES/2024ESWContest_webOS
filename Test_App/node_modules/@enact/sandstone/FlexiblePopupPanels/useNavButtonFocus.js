"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.NavButtonFocusDecorator = void 0;
exports.useNavButtonFocus = useNavButtonFocus;
var _spotlight = _interopRequireDefault(require("@enact/spotlight"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
var _FlexiblePopupPanelsModule = _interopRequireDefault(require("./FlexiblePopupPanels.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["index"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var prevButtonSelector = ".".concat(_FlexiblePopupPanelsModule["default"].navCellBefore, " .").concat(_FlexiblePopupPanelsModule["default"].navButton);
var nextButtonSelector = ".".concat(_FlexiblePopupPanelsModule["default"].navCellAfter, " .").concat(_FlexiblePopupPanelsModule["default"].navButton);
function useNavButtonFocus(_ref) {
  var index = _ref.index;
  var autoFocus;
  var _useRef = (0, _react.useRef)({
      index: index
    }),
    ref = _useRef.current;

  // on index change
  if (index !== ref.index) {
    var current = _spotlight["default"].getCurrent();
    // if the currently focused component is a nav button
    if (current && current.classList.contains(_FlexiblePopupPanelsModule["default"].navButton)) {
      var prevButtonFocused = current.matches(prevButtonSelector);

      // set autoFocus to point to the selector for the appropriate button
      autoFocus = prevButtonFocused ? prevButtonSelector : nextButtonSelector;
    }
    ref.index = index;
  }
  return {
    autoFocus: autoFocus
  };
}
var NavButtonFocusDecorator = exports.NavButtonFocusDecorator = function NavButtonFocusDecorator(Wrapped) {
  // eslint-disable-next-line no-shadow
  function NavButtonFocusDecorator(_ref2) {
    var index = _ref2.index,
      rest = _objectWithoutProperties(_ref2, _excluded);
    var nav = useNavButtonFocus({
      index: index
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread(_objectSpread({}, rest), nav), {}, {
      index: index
    }));
  }
  NavButtonFocusDecorator.propTypes = {
    index: _propTypes["default"].number
  };
  return NavButtonFocusDecorator;
};
var _default = exports["default"] = useNavButtonFocus;