"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.MediaSliderDecorator = void 0;
var _handle = require("@enact/core/handle");
var _hoc = _interopRequireDefault(require("@enact/core/hoc"));
var _platform = _interopRequireDefault(require("@enact/core/platform"));
var _utils = require("@enact/ui/Slider/utils");
var _clamp = _interopRequireDefault(require("ramda/src/clamp"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["selection"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); } // decrements the MediaKnob position if we're tracking
var _decrement = function decrement(state) {
  if (state.tracking && state.x > 0) {
    var x = Math.max(0, state.x - 0.05);
    return {
      x: x
    };
  }
  return null;
};

// increments the MediaKnob position if we're tracking
var _increment = function increment(state) {
  if (state.tracking && state.x < 1) {
    var x = Math.min(1, state.x + 0.05);
    return {
      x: x
    };
  }
  return null;
};
var handleBlur = (0, _handle.handle)((0, _handle.forward)('onBlur'), (0, _handle.call)('untrack'));
var handleFocus = (0, _handle.handle)((0, _handle.forward)('onFocus'),
// extract target from the event and pass it to track()
(0, _handle.adaptEvent)(function (_ref) {
  var target = _ref.target;
  return target;
}, (0, _handle.call)('track')));
var handleKeyDown = (0, _handle.handle)((0, _handle.forward)('onKeyDown'), (0, _handle.call)('isTracking'),
// if tracking and the key is left/right update the preview x position
(0, _handle.oneOf)([(0, _handle.forKey)('left'), (0, _handle.returnsTrue)((0, _handle.call)('decrement'))], [(0, _handle.forKey)('right'), (0, _handle.returnsTrue)((0, _handle.call)('increment'))]),
// if we handled left or right, preventDefault to prevent browser scroll behavior
_handle.preventDefault,
// stopImmediate to prevent spotlight handling
_handle.stopImmediate);
var handleKeyUp = (0, _handle.handle)((0, _handle.forward)('onKeyUp'), (0, _handle.call)('isTracking'), (0, _handle.forKey)('enter'),
// prevent sandstone/Slider from activating the knob
_handle.preventDefault, (0, _handle.adaptEvent)((0, _handle.call)('getEventPayload'), (0, _handle.forwardCustom)('onChange', function (ev) {
  return ev;
})));

/**
 * MediaSlider for {@link sandstone/VideoPlayer}.
 *
 * @class MediaSliderDecorator
 * @memberof sandstone/MediaPlayer
 * @hoc
 * @private
 */
var MediaSliderDecorator = exports.MediaSliderDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class;
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);
    var _super = _createSuper(_class);
    function _class(props) {
      var _this;
      _classCallCheck(this, _class);
      _this = _super.call(this, props);
      _this.handleMouseOver = _this.handleMouseOver.bind(_assertThisInitialized(_this));
      _this.handleMouseOut = _this.handleMouseOut.bind(_assertThisInitialized(_this));
      _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_this));
      if (_platform["default"].touch) {
        _this.handleTouchMove = _this.handleTouchMove.bind(_assertThisInitialized(_this));
      }
      handleBlur.bindAs(_assertThisInitialized(_this), 'handleBlur');
      handleFocus.bindAs(_assertThisInitialized(_this), 'handleFocus');
      handleKeyDown.bindAs(_assertThisInitialized(_this), 'handleKeyDown');
      handleKeyUp.bindAs(_assertThisInitialized(_this), 'handleKeyUp');
      _this.state = {
        maxX: 0,
        minX: 0,
        tracking: false,
        x: 0
      };
      return _this;
    }
    _createClass(_class, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (prevState.x !== this.state.x) {
          (0, _handle.forwardCustom)('onKnobMove', function (ev) {
            return ev;
          })(this.getEventPayload(), this.props);
        }
      }
    }, {
      key: "getEventPayload",
      value: function getEventPayload() {
        return {
          value: this.state.x,
          proportion: this.state.x
        };
      }
    }, {
      key: "track",
      value: function track(target) {
        var bounds = target.getBoundingClientRect();
        this.setState({
          maxX: bounds.right,
          minX: bounds.left,
          tracking: true,
          x: this.props.value
        });
      }
    }, {
      key: "move",
      value: function move(clientX) {
        this.setState(function (state) {
          var value = (0, _clamp["default"])(state.minX, state.maxX, clientX);
          return {
            x: (0, _utils.calcProportion)(state.minX, state.maxX, value)
          };
        });
      }
    }, {
      key: "untrack",
      value: function untrack() {
        this.setState({
          maxX: 0,
          minX: 0,
          tracking: false
        });
      }
    }, {
      key: "decrement",
      value: function decrement() {
        this.setState(_decrement);
      }
    }, {
      key: "increment",
      value: function increment() {
        this.setState(_increment);
      }
    }, {
      key: "isTracking",
      value: function isTracking() {
        return this.state.tracking;
      }
    }, {
      key: "handleMouseOver",
      value: function handleMouseOver(ev) {
        if (ev.currentTarget.contains(ev.relatedTarget)) {
          return;
        }
        this.track(ev.currentTarget);
        this.move(ev.clientX);
      }
    }, {
      key: "handleMouseOut",
      value: function handleMouseOut(ev) {
        if (ev.currentTarget.contains(ev.relatedTarget)) {
          return;
        }
        this.untrack();
      }
    }, {
      key: "handleMouseMove",
      value: function handleMouseMove(ev) {
        this.move(ev.clientX);
      }
    }, {
      key: "handleTouchMove",
      value: function handleTouchMove(ev) {
        // ignores multi touch
        this.move(ev.touches[0].clientX);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          selection = _this$props.selection,
          rest = _objectWithoutProperties(_this$props, _excluded);
        var backgroundProgress = this.props.backgroundProgress;
        var progressAnchor = 0;
        if (selection != null && selection.length > 0) {
          // extracts both values from selection, defaulting backgroundProgress to
          // progressAnchor if not defined
          var _selection = _slicedToArray(selection, 2);
          progressAnchor = _selection[0];
          var _selection$ = _selection[1];
          backgroundProgress = _selection$ === void 0 ? progressAnchor : _selection$;
        }
        delete rest.onKnobMove;
        if (_platform["default"].touch) {
          rest.onTouchMove = this.handleTouchMove;
        }
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, rest), {}, {
          backgroundProgress: backgroundProgress,
          onBlur: this.handleBlur,
          onFocus: this.handleFocus,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp,
          onMouseOver: this.handleMouseOver,
          onMouseOut: this.handleMouseOut,
          onMouseMove: this.handleMouseMove,
          preview: this.state.tracking,
          previewProportion: this.state.x,
          progressAnchor: progressAnchor
        }));
      }
    }]);
    return _class;
  }(_react.Component), _class.displayName = 'MediaSliderDecorator', _class.propTypes = {
    backgroundProgress: _propTypes["default"].number,
    selection: _propTypes["default"].arrayOf(_propTypes["default"].number),
    value: _propTypes["default"].number
  }, _class;
});
var _default = exports["default"] = MediaSliderDecorator;