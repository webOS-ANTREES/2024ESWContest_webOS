"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.MediaSliderBase = exports.MediaSlider = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Slider = _interopRequireDefault(require("../Slider"));
var _MediaKnob = _interopRequireDefault(require("./MediaKnob"));
var _MediaSliderDecorator = _interopRequireDefault(require("./MediaSliderDecorator"));
var _MediaSliderModule = _interopRequireDefault(require("./MediaSlider.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["className", "preview", "previewProportion", "sliderClassName"];
/**
 * The base component to render a customized {@link sandstone/Slider.Slider|Slider} for use in
 * media player components such as {@link sandstone/VideoPlayer.VideoPlayer|VideoPlayer}.
 *
 * @class MediaSliderBase
 * @memberof sandstone/MediaPlayer
 * @ui
 * @private
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var MediaSliderBase = exports.MediaSliderBase = (0, _kind["default"])({
  name: 'MediaSlider',
  propTypes: /** @lends sandstone/MediaPlayer.MediaSlider.prototype */{
    /**
     * When `true`, the knob will expand. Note that Slider is a controlled
     * component. Changing the value would only affect pressed visual and
     * not the state.
     *
     * @type {Boolean}
     * @public
     */
    forcePressed: _propTypes["default"].bool,
    /**
     * Allow moving the knob via pointer or 5-way without emitting `onChange` events
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    preview: _propTypes["default"].bool,
    /**
     * The position of the knob when in `preview` mode
     *
     * @type {Number}
     * @public
     */
    previewProportion: _propTypes["default"].number,
    /**
     * The visibility of the component. When `false`, the component will be hidden.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    visible: _propTypes["default"].bool
  },
  defaultProps: {
    preview: false,
    visible: true
  },
  styles: {
    css: _MediaSliderModule["default"],
    className: 'sliderFrame'
  },
  computed: {
    className: function className(_ref) {
      var styler = _ref.styler,
        visible = _ref.visible;
      return styler.append({
        hidden: !visible
      });
    },
    sliderClassName: function sliderClassName(_ref2) {
      var styler = _ref2.styler,
        forcePressed = _ref2.forcePressed;
      return styler.join({
        pressed: forcePressed,
        mediaSlider: true
      });
    }
  },
  render: function render(_ref3) {
    var className = _ref3.className,
      preview = _ref3.preview,
      previewProportion = _ref3.previewProportion,
      sliderClassName = _ref3.sliderClassName,
      rest = _objectWithoutProperties(_ref3, _excluded);
    delete rest.forcePressed;
    delete rest.visible;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: className,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Slider["default"], _objectSpread(_objectSpread({}, rest), {}, {
        "aria-hidden": "true",
        className: sliderClassName,
        css: _MediaSliderModule["default"],
        knobComponent: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MediaKnob["default"], {
          preview: preview,
          previewProportion: previewProportion
        }),
        max: 1,
        min: 0,
        noWheel: true,
        step: 0.00001
      }))
    });
  }
});

/**
 * A customized slider suitable for use within media player components such as
 * {@link sandstone/VideoPlayer.VideoPlayer|VideoPlayer}.
 *
 * @class MediaSlider
 * @extends sandstone/Slider.Slider
 * @memberof sandstone/MediaPlayer
 * @ui
 * @public
 */
var MediaSlider = exports.MediaSlider = (0, _MediaSliderDecorator["default"])(MediaSliderBase);
var _default = exports["default"] = MediaSlider;