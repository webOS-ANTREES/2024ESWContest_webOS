"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.IconItemDecorator = exports.IconItemBase = exports.IconItem = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _Spottable = _interopRequireDefault(require("@enact/spotlight/Spottable"));
var _Layout = require("@enact/ui/Layout");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Image = _interopRequireDefault(require("../Image"));
var _Marquee = require("../Marquee");
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _IconItemModule = _interopRequireDefault(require("./IconItem.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "disabled"];
/**
 * Provides Sandstone styled icon item components and behaviors.
 *
 * @example
 * <IconItem
 *   background="#1b1b1b"
 *   bordered
 *   icon="usb"
 *   style={{
 *      height: 80,
 *      width: 104
 *   }}
 * />
 *
 * @module sandstone/IconItem
 * @exports IconItem
 * @exports IconItemBase
 * @exports IconItemDecorator
 * @public
 */
/**
 * The shape for image of {@link sandstone/IconItem|IconItem}.
 *
 * @typedef {Object} ImageShape
 * @memberof sandstone/IconItem
 * @property {Object} size Size for the image.
 *  The following properties should be provided:
 *
 * * `height` - The height of the image
 * * `width` - The width of the image
 * @property {String|Object} src Source for the image.
 *  String value or Object of values used to determine which image will appear on
 *  a specific screenSize.
 * @public
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var ImageShape = _propTypes["default"].shape({
  size: _propTypes["default"].shape({
    height: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]).isRequired,
    width: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]).isRequired
  }).isRequired,
  src: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]).isRequired
});

/**
 * A Sandstone styled base component for {@link sandstone/IconItem.IconItem|IconItem}.
 *
 * @class IconItemBase
 * @memberof sandstone/IconItem
 * @ui
 * @public
 */
var IconItemBase = exports.IconItemBase = (0, _kind["default"])({
  name: 'IconItem',
  propTypes: /** @lends sandstone/IconItem.IconItemBase.prototype */{
    /**
     * The background color, gradient, or image of this item.
     * Accepts any format of color, gradient type value, and image url.
     *
     * Example: '#ff0000', 'radial-gradient(crimson, skyblue)', 'url(http://example.com/image.png) center / cover'
     *
     * @type {String}
     * @public
     */
    background: _propTypes["default"].string,
    /**
     * Specifies bordered or borderless.
     *
     * @type {Boolean}
     * @public
     */
    bordered: _propTypes["default"].bool,
    /**
     * The custom component rendred as the content of this IconItem.
     *
     * @type {Component}
     * @public
     */
    children: _propTypes["default"].any,
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `iconItem` - The icon item component class
     * * `content` - The class for the content area except title
     * * `bordered` - The border class
     * * `icon` - The icon component class
     * * `image` - The image component class
     * * `labelContainer` - The label container class
     * * `label` - The label component class
     * * `title` - The title component class
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,
    /**
     * The voice control intent.
     *
     * @type {String}
     * @default 'Select'
     * @public
     */
    'data-webos-voice-intent': _propTypes["default"].string,
    /**
     * Disable IconItem and becomes non-interactive.
     *
     * @type {Boolean}
     * @public
     */
    disabled: _propTypes["default"].bool,
    /**
     * The icon content.
     * If this is specified, {@link sandstone/Icon.Icon|Icon} will be shown as the content.
     *
     * @see {@link ui/Icon.Icon.children}
     * @type {String|Object}
     * @public
     */
    icon: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
    /**
     * Source and size for the image.
     * See the datails in {@link sandstone/IconItem.ImageShape|ImageShape}
     *
     * @type {sandstone/IconItem.ImageShape}
     * @public
     */
    image: ImageShape,
    /**
     * A label displayed in the content.
     *
     * @type {String}
     * @public
     */
    label: _propTypes["default"].string,
    /**
     * The color of label.
     *
     * @type {('dark'|'light')}
     * @default 'light'
     * @public
     */
    labelColor: _propTypes["default"].oneOf(['dark', 'light']),
    /**
     * Determines what triggers the label to show.
     *
     * @type {('focus'|'render')}
     * @default 'render'
     * @public
     */
    labelOn: _propTypes["default"].oneOf(['focus', 'render']),
    /**
     * Title text showing below the icon.
     *
     * @type {String}
     * @public
     */
    title: _propTypes["default"].string,
    /**
     * Determines what triggers the title to show.
     *
     * @type {('focus'|'render')}
     * @default 'render'
     * @public
     */
    titleOn: _propTypes["default"].oneOf(['focus', 'render'])
  },
  defaultProps: {
    'data-webos-voice-intent': 'Select',
    labelColor: 'light',
    labelOn: 'render',
    titleOn: 'render'
  },
  styles: {
    css: _IconItemModule["default"],
    className: 'iconItem',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var bordered = _ref.bordered,
        labelColor = _ref.labelColor,
        labelOn = _ref.labelOn,
        styler = _ref.styler,
        titleOn = _ref.titleOn;
      return styler.append({
        bordered: bordered,
        labelOnFocus: labelOn === 'focus',
        titleOnFocus: titleOn === 'focus',
        darkLabel: labelColor === 'dark'
      });
    },
    children: function children(_ref2) {
      var background = _ref2.background,
        _children = _ref2.children,
        css = _ref2.css,
        icon = _ref2.icon,
        image = _ref2.image,
        label = _ref2.label,
        labelOn = _ref2.labelOn,
        title = _ref2.title;
      if (_children) return _children;
      var imageComponent;
      if (icon) {
        imageComponent = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon["default"], {
          className: css.icon,
          size: "large",
          children: icon
        });
      } else if (image) {
        var _image$size, _image$size2;
        imageComponent = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Image["default"], {
          className: css.image,
          src: image === null || image === void 0 ? void 0 : image.src,
          style: {
            width: image === null || image === void 0 || (_image$size = image.size) === null || _image$size === void 0 ? void 0 : _image$size.width,
            height: image === null || image === void 0 || (_image$size2 = image.size) === null || _image$size2 === void 0 ? void 0 : _image$size2.height
          }
        });
      }
      if (!imageComponent && !_children && !label && !title) return;
      var align = label && labelOn === 'render' ? 'center' : 'center center';
      var iconContent = /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Column, {
        align: align,
        className: css.content,
        style: {
          background: background
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
          shrink: true,
          children: imageComponent ? imageComponent : null
        }), label ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
          shrink: true,
          className: css.labelContainer,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Marquee.Marquee, {
            alignment: "center",
            className: css.label,
            marqueeOn: "hover",
            children: label
          })
        }) : null]
      });
      return title ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Column, {
        children: [iconContent, /*#__PURE__*/(0, _jsxRuntime.jsx)(_Marquee.Marquee, {
          alignment: "center",
          className: css.title,
          marqueeOn: "hover",
          children: title
        })]
      }) : iconContent;
    }
  },
  render: function render(_ref3) {
    var children = _ref3.children,
      disabled = _ref3.disabled,
      rest = _objectWithoutProperties(_ref3, _excluded);
    delete rest.background;
    delete rest.bordered;
    delete rest.icon;
    delete rest.image;
    delete rest.label;
    delete rest.labelColor;
    delete rest.labelOn;
    delete rest.title;
    delete rest.titleOn;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
      "aria-disabled": disabled,
      disabled: disabled,
      children: children
    }));
  }
});

/**
 * Sandstone-specific IconItem behaviors to apply to
 * {@link sandstone/IconItem.IconItem|IconItem}.
 *
 * @hoc
 * @memberof sandstone/IconItem
 * @mixes sandstone/Marquee.MarqueeController
 * @mixes spotlight/Spottable.Spottable
 * @mixes sandstone/Skinnable.Skinnable
 * @public
 */
var IconItemDecorator = exports.IconItemDecorator = (0, _compose["default"])((0, _Marquee.MarqueeController)({
  marqueeOnFocus: true
}), _Spottable["default"], _Skinnable["default"]);

/**
 * A sandstone-styled icon item, Marquee and Spottable applied.
 *
 * Usage:
 * ```
 * <IconItem
 *   background="#1b1b1b"
 *   bordered
 *   icon="usb"
 * />
 * ```
 *
 * @class IconItem
 * @memberof sandstone/IconItem
 * @extends sandstone/IconItem.IconItemBase
 * @mixes sandstone/IconItem.IconItemDecorator
 * @see {@link sandstone/IconItem.IconItemBase}
 * @ui
 * @public
 */
var IconItem = exports.IconItem = IconItemDecorator(IconItemBase);
IconItem.displayName = 'IconItem';
var _default = exports["default"] = IconItem;