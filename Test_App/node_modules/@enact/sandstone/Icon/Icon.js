"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.IconDecorator = exports.IconBase = exports.Icon = void 0;
Object.defineProperty(exports, "icons", {
  enumerable: true,
  get: function get() {
    return _IconList["default"];
  }
});
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _I18nDecorator = require("@enact/i18n/I18nDecorator");
var _Icon = require("@enact/ui/Icon");
var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));
var _resolution = require("@enact/ui/resolution");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _IconList = _interopRequireDefault(require("./IconList.js"));
var _IconModule = _interopRequireDefault(require("./Icon.module.css"));
var _excluded = ["css", "size"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                           * Provides Sandstone styled icon components and behaviors.
                                                                                                                                                                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                                                                                                                                                                           * @example
                                                                                                                                                                                                                                                                                                                                                                                           * <Icon>plus</Icon>
                                                                                                                                                                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                                                                                                                                                                           * @module sandstone/Icon
                                                                                                                                                                                                                                                                                                                                                                                           * @exports Icon
                                                                                                                                                                                                                                                                                                                                                                                           * @exports IconBase
                                                                                                                                                                                                                                                                                                                                                                                           * @exports IconDecorator
                                                                                                                                                                                                                                                                                                                                                                                           * @exports icons
                                                                                                                                                                                                                                                                                                                                                                                           */
/**
 * Renders a sandstone-styled icon without any behavior.
 *
 * @class IconBase
 * @memberof sandstone/Icon
 * @extends ui/Icon.Icon
 * @ui
 * @public
 */
var IconBase = exports.IconBase = (0, _kind["default"])({
  name: 'Icon',
  propTypes: /** @lends sandstone/Icon.IconBase.prototype */{
    /**
     * The icon content.
     *
     * @see {@link ui/Icon.IconBase.children}
     * @type {String|Object}
     * @public
     */
    children: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `icon` - The root component class
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,
    /**
     * Flips the icon
     *
     * When `'auto'` and `rtl`, the icon is flipped horizontally.
     *
     * @type {('auto'|'both'|'horizontal'|'vertical')}
     * @public
     */
    flip: _propTypes["default"].oneOf(['auto', 'both', 'horizontal', 'vertical']),
    /**
     * Indicates the content's text direction is right-to-left.
     *
     * This is set automatically when using {@link ui/Icon.Icon}.
     *
     * @type {Boolean}
     * @public
     */
    rtl: _propTypes["default"].bool,
    /**
     * The size of the icon.
     *
     * A collection of preset sizes is available in addition to a numeric size option.
     * A number represents the design-time pixel dimensions of the icon. The final value will
     * automatically adapt to the screen resolutions, as defined in the `screenTypes` file of
     * this theme.
     *
     * @type {('large'|'medium'|'small'|'tiny'|Number)}
     * @default 'small'
     * @public
     */
    size: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['large', 'medium', 'small', 'tiny']), _propTypes["default"].number])
  },
  defaultProps: {
    size: 'small'
  },
  styles: {
    css: _IconModule["default"],
    publicClassNames: ['icon']
  },
  computed: {
    className: function className(_ref) {
      var size = _ref.size,
        styler = _ref.styler;
      return styler.append(typeof size === 'string' ? size : null);
    },
    flip: function flip(_ref2) {
      var _flip = _ref2.flip,
        rtl = _ref2.rtl;
      if (_flip === 'auto') {
        return rtl ? 'horizontal' : null;
      }
      return _flip;
    },
    style: function style(_ref3) {
      var size = _ref3.size,
        _style = _ref3.style;
      return _objectSpread(_objectSpread({}, _style), {}, {
        '--icon-size': typeof size === 'number' ? (0, _resolution.scaleToRem)(size) : null
      });
    }
  },
  render: function render(_ref4) {
    var css = _ref4.css,
      size = _ref4.size,
      rest = _objectWithoutProperties(_ref4, _excluded);
    delete rest.rtl;
    return _Icon.IconBase.inline(_objectSpread(_objectSpread({}, rest), {}, {
      size: typeof size === 'string' ? size : void 0,
      css: css,
      iconList: _IconList["default"]
    }));
  }
});

// Let's find a way to import this list directly, and bonus feature, render our icons in the docs
// next to their names.
/**
 * An object whose keys can be used as the child of an {@link sandstone/Icon.Icon|Icon} component.
 *
 * List of Icons:
 * ```
 * plus
 * minus
 * arrowhookleft
 * arrowhookright
 * ellipsis
 * check
 * triangleup
 * triangleright
 * triangledown
 * triangleleft
 * arrowupdown
 * arrowup
 * arrowupwhite
 * arrowuphollow
 * backspace
 * space
 * trianglerightwhite
 * triangleleftwhite
 * trianglerighthollow
 * trianglelefthollow
 * heart
 * hearthollow
 * record
 * circle
 * stop
 * square
 * play
 * pause
 * forward
 * backward
 * pauseforward
 * pausebackward
 * pausejumpforward
 * pausejumpbackward
 * jumpforward
 * jumpbackward
 * skip
 * list
 * arrowlargedown
 * arrowlargeup
 * arrowlargeleft
 * arrowlargeright
 * arrowsmallup
 * arrowsmalldown
 * arrowsmallleft
 * arrowsmallright
 * closex
 * search
 * chup
 * chdown
 * exitfullscreen
 * fullscreen
 * trash
 * star
 * starhalf
 * starhollow
 * gear
 * plug
 * lock
 * music
 * view360
 * info
 * verticalellipsis
 * arrowcurveright
 * picture
 * home
 * liverecord
 * liveplay
 * trashlock
 * movecursor
 * repeatone
 * repeatall
 * repeatnone
 * zoomin
 * zoomout
 * download
 * shuffle
 * shuffleon
 * notification
 * voice
 * soundmute
 * stargroup
 * checker
 * transponder
 * selected
 * bgm
 * bgmoff
 * playcircle
 * pausecircle
 * lockcircle
 * unlockcircle
 * powercircle
 * wifi1
 * wifi2
 * wifi3
 * wifi4
 * wifilock1
 * wifilock2
 * wifilock3
 * wifilock4
 * dashboard1
 * dashboard2
 * dashboard3
 * language
 * rotate
 * lyrics
 * screenpower
 * miniplayer
 * nowplaying
 * playspeed
 * folder
 * folderupper
 * support
 * soundout
 * mobile
 * keyboard
 * mouse
 * controller
 * btspeaker
 * headset
 * dns
 * speaker
 * speakersurround
 * speakercenter
 * speakerbass
 * router
 * demosync
 * browser
 * sound
 * wisa
 * demooptions
 * newfeature
 * youtube
 * ostsearch
 * shopping
 * bookmark
 * eject
 * power
 * timer
 * network
 * edit
 * aspectratio
 * link
 * light
 * pointersize
 * pointerspeed
 * soundmode
 * contrast
 * picturemode
 * basketball
 * soccer
 * baseball
 * golf
 * football
 * hockey
 * volleyball
 * cricket
 * heartadd
 * heartlist
 * refresh
 * help
 * share
 * files
 * quickstart
 * scheduler
 * recording
 * guide
 * channel
 * oneminplay
 * oneminrecord
 * fifteenforward
 * fifteenbackward
 * liveplayoff
 * liveplayon
 * popupscale
 * arrowrightskip
 * closedcaption
 * subtitle
 * subtitlekr
 * subtitlecn
 * samples
 * googledrive
 * googlephotos
 * dlna
 * replay
 * usb
 * ftp
 * profile
 * profilecheck
 * mediaserver
 * wallpaper
 * spanner
 * bluetooth
 * moodmode
 * changepassword
 * r2rappcall
 * musicsrc
 * keymouse
 * keymousedis
 * camera
 * cameradis
 * gamepad
 * gamepaddis
 * wowcast
 * exclamation
 * show
 * hide
 * ```
 *
 * @name iconList
 * @memberof sandstone/Icon
 * @constant
 * @type {Object}
 * @public
 */

/**
 * Sandstone-specific behaviors to apply to {@link sandstone/Icon.IconBase|IconBase}.
 *
 * @hoc
 * @memberof sandstone/Icon
 * @mixes sandstone/Skinnable.Skinnable
 * @public
 */
var IconDecorator = exports.IconDecorator = (0, _compose["default"])(_Pure["default"], _Skinnable["default"], (0, _I18nDecorator.I18nContextDecorator)({
  rtlProp: 'rtl'
}));

/**
 * A Sandstone-styled icon.
 *
 * @class Icon
 * @memberof sandstone/Icon
 * @extends sandstone/Icon.IconBase
 * @mixes sandstone/Icon.IconDecorator
 * @ui
 * @public
 */
var Icon = exports.Icon = IconDecorator(IconBase);
var _default = exports["default"] = Icon;