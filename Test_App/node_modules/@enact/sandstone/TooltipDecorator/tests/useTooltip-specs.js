"use strict";

var _FloatingLayer = require("@enact/ui/FloatingLayer");
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _Button = _interopRequireDefault(require("../../Button"));
var _useTooltip2 = require("../useTooltip");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["screenEdgeKeepout", "children"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var FloatingLayerController = (0, _FloatingLayer.FloatingLayerDecorator)('div');
describe('useTooltip', function () {
  var TooltipButton = function TooltipButton(_ref) {
    var _ref$screenEdgeKeepou = _ref.screenEdgeKeepout,
      screenEdgeKeepout = _ref$screenEdgeKeepou === void 0 ? _useTooltip2.defaultScreenEdgeKeepout : _ref$screenEdgeKeepou,
      children = _ref.children,
      rest = _objectWithoutProperties(_ref, _excluded);
    var _useTooltip = (0, _useTooltip2.useTooltip)(_objectSpread({
        screenEdgeKeepout: screenEdgeKeepout
      }, rest)),
      tooltip = _useTooltip.tooltip,
      handlers = _useTooltip.handlers,
      restProps = _useTooltip.restProps;
    if (tooltip) {
      restProps.children = [children, tooltip];
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], _objectSpread(_objectSpread({}, restProps), handlers));
  };
  describe('Tooltip', function () {
    beforeEach(function () {
      global.Element.prototype.getBoundingClientRect = jest.fn(function () {
        return {
          width: 501,
          height: 501,
          top: 99,
          left: 99,
          bottom: 0,
          right: 0
        };
      });
    });
    test('should render a tooltip if hovered', /*#__PURE__*/_asyncToGenerator(function* () {
      var tooltipText = 'Tooltip';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
          tooltipDelay: 0,
          tooltipText: tooltipText,
          children: "Label"
        })
      }));
      var button = _react.screen.getByRole('button');
      (0, _react.act)(function () {
        return button.focus();
      });
      _react.fireEvent.mouseOver(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.getByText('Tooltip')).toBeInTheDocument();
      });
    }));
    test('should hide tooltip if not hovered', /*#__PURE__*/_asyncToGenerator(function* () {
      var tooltipText = 'Tooltip';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
          tooltipDelay: 0,
          tooltipText: tooltipText,
          children: "Label"
        })
      }));
      var button = _react.screen.getByRole('button');
      (0, _react.act)(function () {
        return button.focus();
      });
      _react.fireEvent.mouseOver(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.getByText('Tooltip')).toBeInTheDocument();
      });
      (0, _react.act)(function () {
        return button.blur();
      });
      _react.fireEvent.mouseOut(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.queryByText('Tooltip')).not.toBeInTheDocument();
      });
    }));
    test('should hide tooltip if not hovered (disabled)', /*#__PURE__*/_asyncToGenerator(function* () {
      var tooltipText = 'Tooltip';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
          tooltipDelay: 0,
          tooltipText: tooltipText,
          disabled: true,
          children: "Label"
        })
      }));
      var button = _react.screen.getByRole('button');
      expect(button).toHaveAttribute('disabled');
      (0, _react.act)(function () {
        return button.focus();
      });
      _react.fireEvent.mouseOver(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.getByText('Tooltip')).toBeInTheDocument();
      });
      (0, _react.act)(function () {
        return button.blur();
      });
      _react.fireEvent.mouseOut(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.queryByText('Tooltip')).not.toBeInTheDocument();
      });
    }));
    test('should render a tooltip if keydown', /*#__PURE__*/_asyncToGenerator(function* () {
      var tooltipText = 'Tooltip';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
          tooltipDelay: 0,
          tooltipText: tooltipText,
          children: "Label"
        })
      }));
      var button = _react.screen.getByRole('button');
      (0, _react.act)(function () {
        return button.focus();
      });
      _react.fireEvent.keyDown(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.getByText('Tooltip')).toBeInTheDocument();
      });
    }));
    test('should render a tooltip if hovered for \'tooltipRelative\'', /*#__PURE__*/_asyncToGenerator(function* () {
      console.error = jest.fn(); // eslint-disable-line no-console
      var tooltipText = 'Tooltip';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
          tooltipDelay: 0,
          tooltipRelative: true,
          tooltipText: tooltipText,
          children: "Label"
        })
      }));
      var button = _react.screen.getByRole('button');
      (0, _react.act)(function () {
        return button.focus();
      });
      _react.fireEvent.mouseOver(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.getByText('Tooltip')).toBeInTheDocument();
      });
    }));
    describe('Tooltip position', function () {
      test('should have \'above\' className when tooltipPosition is set to \'above\'', /*#__PURE__*/_asyncToGenerator(function* () {
        var tooltipText = 'Tooltip';
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
            tooltipDelay: 0,
            tooltipPosition: "above",
            tooltipText: tooltipText,
            children: "Label"
          })
        }));
        var button = _react.screen.getByRole('button');
        button.getBoundingClientRect = jest.fn(function () {
          return {
            width: 300,
            height: 300,
            top: 600,
            left: 600,
            bottom: 0,
            right: 0
          };
        });
        (0, _react.act)(function () {
          return button.focus();
        });
        _react.fireEvent.mouseOver(button);
        yield (0, _react.waitFor)(function () {
          var tooltipArrow = _react.screen.getByText('Tooltip').parentElement.parentElement;
          var expected = 'tooltip above';
          expect(tooltipArrow).toHaveClass(expected);
        });
      }));
      test('should have \'below\' className when tooltipPosition is set to \'below\'', /*#__PURE__*/_asyncToGenerator(function* () {
        var tooltipText = 'Tooltip';
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
            tooltipDelay: 0,
            tooltipPosition: "below",
            tooltipText: tooltipText,
            children: "Label"
          })
        }));
        var button = _react.screen.getByRole('button');
        button.getBoundingClientRect = jest.fn(function () {
          return {
            width: 300,
            height: 300,
            top: 600,
            left: 600,
            bottom: 0,
            right: 0
          };
        });
        (0, _react.act)(function () {
          return button.focus();
        });
        _react.fireEvent.mouseOver(button);
        yield (0, _react.waitFor)(function () {
          var tooltipArrow = _react.screen.getByText('Tooltip').parentElement.parentElement;
          var expected = 'tooltip below';
          expect(tooltipArrow).toHaveClass(expected);
        });
      }));
      test('should have \'left middle\' className when tooltipPosition is set to \'left middle\'', /*#__PURE__*/_asyncToGenerator(function* () {
        var tooltipText = 'Tooltip';
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
            tooltipDelay: 0,
            tooltipPosition: "left middle",
            tooltipText: tooltipText,
            children: "Label"
          })
        }));
        var button = _react.screen.getByRole('button');
        (0, _react.act)(function () {
          return button.focus();
        });
        _react.fireEvent.mouseOver(button);
        yield (0, _react.waitFor)(function () {
          var tooltipArrow = _react.screen.getByText('Tooltip').parentElement.parentElement;
          var expected = 'tooltip left middleArrow';
          expect(tooltipArrow).toHaveClass(expected);
        });
      }));
      test('should have \'right middle\' className when tooltipPosition is set to \'right middle\'', /*#__PURE__*/_asyncToGenerator(function* () {
        var tooltipText = 'Tooltip';
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
            tooltipDelay: 0,
            tooltipPosition: "right middle",
            tooltipText: tooltipText,
            children: "Label"
          })
        }));
        var button = _react.screen.getByRole('button');
        (0, _react.act)(function () {
          return button.focus();
        });
        _react.fireEvent.mouseOver(button);
        yield (0, _react.waitFor)(function () {
          var tooltipArrow = _react.screen.getByText('Tooltip').parentElement.parentElement;
          var expected = 'tooltip right middleArrow';
          expect(tooltipArrow).toHaveClass(expected);
        });
      }));
    });
  });
});