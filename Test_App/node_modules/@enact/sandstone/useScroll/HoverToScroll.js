"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.HoverToScroll = void 0;
var _keymap = require("@enact/core/keymap");
var _util = require("@enact/core/util");
var _spotlight = _interopRequireWildcard(require("@enact/spotlight"));
var _pointer = require("@enact/spotlight/src/pointer");
var _useScroll = require("@enact/ui/useScroll");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
var _ThemeDecorator = require("../ThemeDecorator");
var _HoverToScrollModule = _interopRequireDefault(require("./HoverToScroll.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["scrollContainerHandle"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var epsilon = _useScroll.constants.epsilon;
var nop = function nop() {};
var getBoundsPropertyNames = function getBoundsPropertyNames(direction) {
  return direction === 'vertical' ? {
    axis: 'y',
    canScrollFunc: 'canScrollVertically',
    clientSize: 'clientHeight',
    maxPosition: 'maxTop',
    scrollPosition: 'scrollTop'
  } : {
    axis: 'x',
    canScrollFunc: 'canScrollHorizontally',
    clientSize: 'clientWidth',
    maxPosition: 'maxLeft',
    scrollPosition: 'scrollLeft'
  };
};
var hoverToScrollMultiplier = {
  horizontal: 0.015,
  vertical: 0.04
};
var directionToFocus = {
  horizontal: {
    before: 'right',
    after: 'left'
  },
  vertical: {
    before: 'down',
    after: 'up'
  }
};

/**
 * A hover area to scroll for a single direction.
 *
 * @class HoverToScrollBase
 * @memberof sandstone/useScroll.HoverToScroll
 * @ui
 * @private
 */
var HoverToScrollBase = function HoverToScrollBase(props) {
  var direction = props.direction,
    scrollContainer = props.scrollContainerHandle.current,
    _props$scrollObserver = props.scrollObserver,
    addObserverOnScroll = _props$scrollObserver.addObserverOnScroll,
    removeObserverOnScroll = _props$scrollObserver.removeObserverOnScroll;

  // Mutable value

  var mutableRef = (0, _react.useRef)({
    hoveredPosition: null,
    hoverToScrollRafId: null,
    stopScrollByHover: false
  });
  var _useState = (0, _react.useState)(),
    _useState2 = _slicedToArray(_useState, 2),
    after = _useState2[0],
    setAfter = _useState2[1];
  var _useState3 = (0, _react.useState)(),
    _useState4 = _slicedToArray(_useState3, 2),
    before = _useState4[0],
    setBefore = _useState4[1];

  // Functions

  var handleGlobalKeyDown = (0, _react.useCallback)(function (_ref) {
    var keyCode = _ref.keyCode;
    var position = mutableRef.current.hoveredPosition;
    if (scrollContainer.rtl && direction === 'horizontal') {
      position = position === 'after' ? 'before' : 'after';
    }
    if ((0, _spotlight.getDirection)(keyCode) || (0, _keymap.is)('enter', keyCode)) {
      _spotlight["default"].focusNextFromPoint(directionToFocus[direction][position], (0, _pointer.getLastPointerPosition)());
      scrollContainer.stop();
    } else if ((0, _keymap.is)('pointerHide', keyCode)) {
      mutableRef.current.stopScrollByHover = true;
    }
  }, [direction, scrollContainer]);
  var startRaf = (0, _react.useCallback)(function (job) {
    scrollContainer.isHoveringToScroll = true;
    if (typeof window === 'object' && mutableRef.current.hoveredPosition) {
      mutableRef.current.hoverToScrollRafId = window.requestAnimationFrame(job);
      if (typeof document === 'object') {
        document.addEventListener('keydown', handleGlobalKeyDown, {
          capture: true
        });
      }
    }
  }, [handleGlobalKeyDown, scrollContainer]);
  var stopRaf = (0, _react.useCallback)(function () {
    scrollContainer.isHoveringToScroll = false;
    if (typeof window === 'object' && mutableRef.current.hoverToScrollRafId !== null) {
      window.cancelAnimationFrame(mutableRef.current.hoverToScrollRafId);
      mutableRef.current.hoverToScrollRafId = null;
      mutableRef.current.hoveredPosition = null;
      mutableRef.current.stopScrollByHover = false;
      if (typeof document === 'object') {
        document.removeEventListener('keydown', handleGlobalKeyDown, {
          capture: true
        });
      }
    }
  }, [handleGlobalKeyDown, scrollContainer]);
  var getPointerEnterHandler = (0, _react.useCallback)(function (position) {
    if (typeof window === 'object') {
      var _getBoundsPropertyNam = getBoundsPropertyNames(direction),
        axis = _getBoundsPropertyNam.axis,
        clientSize = _getBoundsPropertyNam.clientSize,
        maxPosition = _getBoundsPropertyNam.maxPosition,
        scrollPosition = _getBoundsPropertyNam.scrollPosition;
      var bounds = scrollContainer.getScrollBounds();
      return function (_ref2) {
        var pointerType = _ref2.pointerType;
        if (pointerType === 'mouse') {
          var distance = (position === 'before' ? -1 : 1) *
          // scroll direction
          bounds[clientSize] *
          // scroll page size
          hoverToScrollMultiplier[direction]; // a scrolling speed factor

          mutableRef.current.hoveredPosition = position;
          mutableRef.current.stopScrollByHover = false;
          var scrollByHover = function scrollByHover() {
            if (!mutableRef.current.stopScrollByHover && (0, _ThemeDecorator.getLastInputType)() === 'mouse') {
              scrollContainer.scrollTo({
                position: _defineProperty({}, axis, (0, _util.clamp)(0, bounds[maxPosition], scrollContainer[scrollPosition] + distance)),
                animate: false
              });
              startRaf(scrollByHover);
            } else {
              stopRaf(); // for other type input during hovering
            }
          };

          startRaf(scrollByHover);
        }
      };
    } else {
      return nop;
    }
  }, [direction, scrollContainer, startRaf, stopRaf]);
  var update = (0, _react.useCallback)(function () {
    var _getBoundsPropertyNam2 = getBoundsPropertyNames(direction),
      canScrollFunc = _getBoundsPropertyNam2.canScrollFunc,
      maxPosition = _getBoundsPropertyNam2.maxPosition,
      scrollPosition = _getBoundsPropertyNam2.scrollPosition;
    var canScroll = scrollContainer[canScrollFunc],
      getScrollBounds = scrollContainer.getScrollBounds,
      currentPosition = scrollContainer[scrollPosition];
    var bounds = getScrollBounds();
    var position = mutableRef.current.hoveredPosition;
    var curAfter = false,
      curBefore = false;
    if (canScroll(bounds)) {
      curAfter = currentPosition < bounds[maxPosition] - epsilon;
      curBefore = currentPosition > 0;
    }
    if (after !== curAfter && position === 'after' || before !== curBefore && position === 'before') {
      stopRaf();
    }
    setAfter(curAfter);
    setBefore(curBefore);
  }, [direction, after, before, scrollContainer, stopRaf]);

  // Hooks

  (0, _react.useLayoutEffect)(function () {
    addObserverOnScroll(update);
    return function () {
      removeObserverOnScroll(update);
    };
  }, [update, addObserverOnScroll, removeObserverOnScroll]);
  (0, _react.useLayoutEffect)(function () {
    if (scrollContainer) {
      var canScroll = scrollContainer[getBoundsPropertyNames(direction).canScrollFunc],
        getScrollBounds = scrollContainer.getScrollBounds;
      if (canScroll && getScrollBounds) {
        update();
      } else {
        setAfter(null);
        setBefore(null);
      }
    }
  }, [update, direction, scrollContainer, props]);
  (0, _react.useLayoutEffect)(function () {
    return function () {
      stopRaf(); // for hoverToScroll prop change during hovering
    };
  }, [stopRaf]);

  // Render

  var renderHoverArea = (0, _react.useCallback)(function (position) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: (0, _classnames["default"])(_HoverToScrollModule["default"].hoverToScroll, _HoverToScrollModule["default"][direction], _HoverToScrollModule["default"][position]),
      onPointerEnter: getPointerEnterHandler(position),
      onPointerLeave: stopRaf
    }, 'hover' + direction + position);
  }, [direction, getPointerEnterHandler, stopRaf]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [before ? renderHoverArea('before') : null, after ? renderHoverArea('after') : null]
  });
};
HoverToScrollBase.displayName = 'HoverToScrollBase';
HoverToScrollBase.propTypes = /** @lends sandstone/useScroll.HoverToScroll.HoverToScrollBase.prototype */{
  direction: _propTypes["default"].string,
  scrollContainerHandle: _propTypes["default"].object
};

/**
 * A hover area to scroll.
 *
 * @class HoverToScroll
 * @memberof sandstone/useScroll
 * @ui
 * @private
 */
var HoverToScroll = exports.HoverToScroll = function HoverToScroll(_ref3) {
  var scrollContainerHandle = _ref3.scrollContainerHandle,
    rest = _objectWithoutProperties(_ref3, _excluded);
  return scrollContainerHandle ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(HoverToScrollBase, _objectSpread(_objectSpread({
      scrollContainerHandle: scrollContainerHandle
    }, rest), {}, {
      direction: "horizontal"
    })), /*#__PURE__*/(0, _jsxRuntime.jsx)(HoverToScrollBase, _objectSpread(_objectSpread({
      scrollContainerHandle: scrollContainerHandle
    }, rest), {}, {
      direction: "vertical"
    }))]
  }) : null;
};
HoverToScroll.displayName = 'HoverToScroll';
HoverToScroll.propTypes = /** @lends sandstone/useScroll.HoverToScroll.prototype */{
  scrollContainerHandle: _propTypes["default"].object
};
var _default = exports["default"] = HoverToScroll;