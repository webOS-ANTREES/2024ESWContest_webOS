"use strict";

var _FloatingLayer = require("@enact/ui/FloatingLayer");
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _ColorPicker = _interopRequireDefault(require("../ColorPicker"));
var _utils = require("../utils");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var FloatingLayerController = (0, _FloatingLayer.FloatingLayerDecorator)('div');
var changeSliderValueByKey = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (element, steps, decrease) {
    var keyCode = decrease ? 37 : 39;
    yield _react.fireEvent.mouseOver(element);
    for (var i = 0; i < steps; i++) {
      yield _react.fireEvent.keyDown(element, {
        keyCode: keyCode
      });
    }
  });
  return function changeSliderValueByKey(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var sliderValues = function sliderValues(elements) {
  var values = [];
  elements.forEach(function (element) {
    values.push(element.getAttribute('aria-valuetext'));
  });
  return values;
};
describe('ColorPicker', function () {
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('should open and close ColorPicker popup', /*#__PURE__*/_asyncToGenerator(function* () {
    var closeButtonText = '󯿵';
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ColorPicker["default"], {})
    }));
    var colorPickerButton = _react.screen.getByRole('button');
    yield user.click(colorPickerButton);
    var closeButton = _react.screen.queryByText(closeButtonText);
    expect(closeButton).not.toBeNull();
    yield user.click(closeButton);
    expect(_react.screen.queryByText(closeButtonText)).toBeNull();
  }));
  test('should not open ColorPicker popup if disabled is set to true', /*#__PURE__*/_asyncToGenerator(function* () {
    var closeButtonText = '󯿵';
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ColorPicker["default"], {
        disabled: true
      })
    }));
    var colorPickerButton = _react.screen.getByRole('button');
    yield user.click(colorPickerButton);
    var closeButton = _react.screen.queryByText(closeButtonText);
    expect(closeButton).toBeNull();
  }));
  test('should have the text set', /*#__PURE__*/_asyncToGenerator(function* () {
    var text = 'Color Picker';
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ColorPicker["default"], {
        text: text
      })
    }));
    var colorPickerText = _react.screen.queryByText(text);
    expect(colorPickerText).not.toBeNull();
    yield user.click(colorPickerText);
    var popupText = _react.screen.queryAllByText(text)[1];
    expect(popupText).not.toBeUndefined();
  }));
  test('should have the color set', /*#__PURE__*/_asyncToGenerator(function* () {
    var color = '#00FF00';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ColorPicker["default"], {
        color: color
      })
    }));
    var expected = "background-image: ".concat(color);
    var colorPickerButton = _react.screen.getByRole('button');
    expect(colorPickerButton).toHaveStyle(expected);
  }));
  test('should have the presetColors', /*#__PURE__*/_asyncToGenerator(function* () {
    var presetColors = ['#FF0000', '#00FF00', '#0000FF'];
    var presetColorsRGB = ['rgb(255, 0, 0)', 'rgb(0, 255, 0)', 'rgb(0, 0, 255)'];
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ColorPicker["default"], {
        presetColors: presetColors
      })
    }));
    var colorPickerButton = _react.screen.getByRole('button');
    yield user.click(colorPickerButton);
    var buttons = _react.screen.getAllByRole('button');
    var buttonsWithSpecificStyle = buttons.filter(function (element) {
      var compoundStyle = window.getComputedStyle(element);
      return presetColorsRGB.find(function (color) {
        return color === compoundStyle.getPropertyValue('background-color');
      });
    });
    expect(buttonsWithSpecificStyle.length).toEqual(presetColors.length);
  }));
  test('should emit an colorHandler event when select color from presetColors', /*#__PURE__*/_asyncToGenerator(function* () {
    var color = '#FFFFFF';
    var colorHandler = jest.fn();
    var presetColors = ['#FF0000'];
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ColorPicker["default"], {
        color: color,
        colorHandler: colorHandler,
        presetColors: presetColors
      })
    }));
    var colorPickerButton = _react.screen.getByRole('button');
    yield user.click(colorPickerButton);
    var button = _react.screen.getAllByRole('button')[2];
    Object.defineProperty(button, 'offsetParent', {
      value: {
        id: presetColors[0]
      }
    });
    yield user.click(button);
    expect(colorHandler).toHaveBeenCalled();
  }));
  test('should change color when hue, saturation and lightness sliders values changed', /*#__PURE__*/_asyncToGenerator(function* () {
    var color = '#00FF00';
    var colorHandler = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ColorPicker["default"], {
        color: color,
        colorHandler: colorHandler
      })
    }));
    var colorPickerButton = _react.screen.getByRole('button');
    yield user.click(colorPickerButton);
    var sliders = _react.screen.getAllByRole('slider');
    var _sliderValues = sliderValues(sliders),
      _sliderValues2 = _slicedToArray(_sliderValues, 3),
      hue = _sliderValues2[0],
      saturation = _sliderValues2[1],
      lightness = _sliderValues2[2];
    yield changeSliderValueByKey(sliders[0], 30);
    _react.fireEvent.blur(sliders[0]);
    yield changeSliderValueByKey(sliders[1], 30, true);
    _react.fireEvent.blur(sliders[1]);
    yield changeSliderValueByKey(sliders[2], 30, true);
    _react.fireEvent.blur(sliders[2]);
    var _sliderValues3 = sliderValues(sliders),
      _sliderValues4 = _slicedToArray(_sliderValues3, 3),
      changedHue = _sliderValues4[0],
      changedSaturation = _sliderValues4[1],
      changedLightness = _sliderValues4[2];
    expect(hue).not.toEqual(changedHue);
    expect(saturation).not.toEqual(changedSaturation);
    expect(lightness).not.toEqual(changedLightness);
  }));

  // Utility functions
  test('should return hsl from hex color if length is 4', function () {
    var hexBlueColor = '#00F';
    var hexGreenColor = '#0F0';
    var hexPinkColor = '#F9A';
    var hexRedColor = '#F00';
    var hslBlueColor = (0, _utils.hexToHSL)(hexBlueColor);
    var hslGreenColor = (0, _utils.hexToHSL)(hexGreenColor);
    var hslPinkColor = (0, _utils.hexToHSL)(hexPinkColor);
    var hslRedColor = (0, _utils.hexToHSL)(hexRedColor);
    var expectedBlue = {
      h: 240,
      s: 100,
      l: 50
    };
    var expectedGreen = {
      h: 120,
      s: 100,
      l: 50
    };
    var expectedPink = {
      h: 350,
      s: 100,
      l: 80
    };
    var expectedRed = {
      h: 0,
      s: 100,
      l: 50
    };
    expect(hslBlueColor).toEqual(expectedBlue);
    expect(hslGreenColor).toEqual(expectedGreen);
    expect(hslPinkColor).toEqual(expectedPink);
    expect(hslRedColor).toEqual(expectedRed);
  });
  test('should return hex from hsl color', function () {
    var hslAquaColor = (0, _utils.HSLToHex)(180, 100, 50);
    var hslBlueColor = (0, _utils.HSLToHex)(240, 100, 50);
    var hslFuchsiaColor = (0, _utils.HSLToHex)(300, 100, 50);
    var hslRedColor = (0, _utils.HSLToHex)(0, 100, 50);
    var hslYellowColor = (0, _utils.HSLToHex)(60, 100, 50);
    var hexAquaColor = '#00ffff';
    var hexBlueColor = '#0000ff';
    var hexFuchsiaColor = '#ff00ff';
    var hexRedColor = '#ff0000';
    var hexYellowColor = '#ffff00';
    expect(hslAquaColor).toEqual(hexAquaColor);
    expect(hslBlueColor).toEqual(hexBlueColor);
    expect(hslFuchsiaColor).toEqual(hexFuchsiaColor);
    expect(hslRedColor).toEqual(hexRedColor);
    expect(hslYellowColor).toEqual(hexYellowColor);
  });
});