"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearResBundle = clearResBundle;
exports.createResBundle = createResBundle;
exports.getIStringFromBundle = getIStringFromBundle;
exports.getResBundle = getResBundle;
exports.setResBundle = setResBundle;
var _IString = _interopRequireDefault(require("ilib/lib/IString"));
var _ResBundle = _interopRequireDefault(require("ilib/lib/ResBundle"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// The ilib.ResBundle for the active locale used by $L
var resBundle;

/**
 * Returns the current ilib.ResBundle
 *
 * @returns {ilib.ResBundle} Current ResBundle
 */
function getResBundle() {
  return resBundle;
}

/**
 * Creates a new ilib.ResBundle for string translation
 *
 * @param  {ilib.Locale} locale Locale for ResBundle
 *
 * @returns {Promise|ResBundle} Resolves with a new ilib.ResBundle
 */
function createResBundle(options) {
  var opts = _objectSpread({
    type: 'html',
    name: 'strings',
    lengthen: true
  }, options);
  if (!opts.onLoad) return;

  // eslint-disable-next-line no-new
  new _ResBundle["default"](_objectSpread(_objectSpread({}, opts), {}, {
    onLoad: function onLoad(bundle) {
      opts.onLoad(bundle || null);
    }
  }));
}

/**
 * Set the locale for the strings that $L loads. This may reload the
 * string resources if necessary.
 *
 * @param {string} spec the locale specifier
 * @returns {ilib.ResBundle} Current ResBundle
 */
function setResBundle(bundle) {
  return resBundle = bundle;
}

/**
 * Deletes the current bundle object of strings and clears the cache.
 * @returns {undefined}
 */
function clearResBundle() {
  delete _ResBundle["default"].strings;
  delete _ResBundle["default"].sysres;
  resBundle = null;
}

/**
 * Retrieves an IString from a resource bundle by key.
 *
 * If the bundle doesn't exist, the key is returned wrapped by IString.
 *
 * @param {String|Object} str Key for localized string
 * @param {ResBundl} rb ilib resource bundle
 * @returns	{IString} The string value wrapped by an IString
 */
function getIStringFromBundle(str, rb) {
  var isObject = typeof str === 'object';
  if (rb) {
    return isObject ? rb.getString(str.value, str.key) : rb.getString(str);
  }
  return new _IString["default"](isObject ? str.value : str);
}