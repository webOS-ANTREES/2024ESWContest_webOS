"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.LabeledIconDecorator = exports.LabeledIconBase = exports.LabeledIcon = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _LabeledIcon = require("@enact/ui/LabeledIcon");
var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _Icon = require("../Icon");
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _LabeledIconModule = _interopRequireDefault(require("./LabeledIcon.module.css"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * An {@link moonstone/Icon.Icon|Icon} ecorated with a label.
 *
 * You may specify an image or a font-based icon by setting the `icon` to either the path
 * to the image or a string from an {@link moonstone/Icon.IconBase.iconList|iconList}.
 *
 * @example
 * <LabeledIcon icon="star" labelPosition="after">
 *   Favorite
 * </LabeledIcon>
 *
 * @module moonstone/LabeledIcon
 * @exports LabeledIcon
 * @exports LabeledIconBase
 * @exports LabeledIconDecorator
 */
// Make a basic Icon. This cuts `Pure` out of icon for a small gain.
var Icon = (0, _Skinnable["default"])(_Icon.IconBase);

/**
 * A basic LabeledIcon component structure without any behaviors applied to it.
 *
 * @class LabeledIconBase
 * @memberof moonstone/LabeledIcon
 * @extends ui/LabeledIcon.LabeledIconBase
 * @ui
 * @public
 */
var LabeledIconBase = exports.LabeledIconBase = (0, _kind["default"])({
  name: 'LabeledIcon',
  propTypes: /** @lends moonstone/LabeledIcon.LabeledIconBase.prototype */{
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `labeledIcon` - The root component class
     * * `label` - The label component class
     * * `icon` - The icon component class
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object
  },
  styles: {
    css: _LabeledIconModule["default"],
    className: 'labeledIcon',
    publicClassNames: ['labeledIcon', 'icon', 'label']
  },
  render: function render(props) {
    return _LabeledIcon.LabeledIconBase.inline(_objectSpread(_objectSpread({}, props), {}, {
      iconComponent: Icon,
      css: props.css
    }));
  }
});

/**
 * Adds Moonstone specific behaviors to {@link moonstone/LabeledIcon.LabeledIconBase|LabeledIconBase}.
 *
 * @hoc
 * @memberof moonstone/LabeledIcon
 * @mixes ui/LabeledIcon.LabeledIconDecorator
 * @mixes moonstone/Skinnable.Skinnable
 * @public
 */
var LabeledIconDecorator = exports.LabeledIconDecorator = (0, _compose["default"])(_LabeledIcon.LabeledIconDecorator, _Pure["default"], _Skinnable["default"]);

/**
 * A Moonstone-styled icon component with a label.
 *
 * Usage:
 * ```
 * <LabeledIcon icon="star" labelPosition="after">
 *   Favorite
 * </LabeledIcon>
 * ```
 *
 * @class LabeledIcon
 * @memberof moonstone/LabeledIcon
 * @extends moonstone/LabeledIcon.LabeledIconBase
 * @mixes moonstone/LabeledIcon.LabeledIconDecorator
 * @ui
 * @public
 */
var LabeledIcon = exports.LabeledIcon = LabeledIconDecorator(LabeledIconBase);
var _default = exports["default"] = LabeledIcon;