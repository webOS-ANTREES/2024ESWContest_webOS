"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ScrollbarBase = exports.Scrollbar = void 0;
var _ApiDecorator = _interopRequireDefault(require("@enact/core/internal/ApiDecorator"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _UiScrollbar = require("../UiScrollable/UiScrollbar");
var _ScrollButtons = _interopRequireDefault(require("./ScrollButtons"));
var _ScrollThumb = _interopRequireDefault(require("./ScrollThumb"));
var _ScrollbarModule = _interopRequireDefault(require("./Scrollbar.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["cbAlertThumb", "clientSize", "corner", "vertical"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); } /**
 * A Moonstone-styled scroller base component.
 *
 * @class ScrollbarBase
 * @memberof moonstone/Scrollable
 * @extends moonstone/UiScrollbarBase
 * @ui
 * @private
 */
var ScrollbarBase = /*#__PURE__*/function (_Component) {
  _inherits(ScrollbarBase, _Component);
  var _super = _createSuper(ScrollbarBase);
  function ScrollbarBase(props) {
    var _this;
    _classCallCheck(this, ScrollbarBase);
    _this = _super.call(this, props);
    if (props.setApiProvider) {
      props.setApiProvider(_assertThisInitialized(_this));
    }
    _this.scrollbarRef = /*#__PURE__*/(0, _react.createRef)();
    _this.scrollButtonsRef = /*#__PURE__*/(0, _react.createRef)();
    return _this;
  }
  _createClass(ScrollbarBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      var _this$scrollbarRef$cu = this.scrollbarRef.current,
        getContainerRef = _this$scrollbarRef$cu.getContainerRef,
        showThumb = _this$scrollbarRef$cu.showThumb,
        startHidingThumb = _this$scrollbarRef$cu.startHidingThumb,
        uiUpdate = _this$scrollbarRef$cu.update;
      this.getContainerRef = getContainerRef;
      this.showThumb = showThumb;
      this.startHidingThumb = startHidingThumb;
      this.uiUpdate = uiUpdate;
      var _this$scrollButtonsRe = this.scrollButtonsRef.current,
        isOneOfScrollButtonsFocused = _this$scrollButtonsRe.isOneOfScrollButtonsFocused,
        updateButtons = _this$scrollButtonsRe.updateButtons,
        focusOnButton = _this$scrollButtonsRe.focusOnButton;
      this.isOneOfScrollButtonsFocused = isOneOfScrollButtonsFocused;
      this.update = function (bounds) {
        updateButtons(bounds);
        _this2.uiUpdate(bounds);
      };
      this.focusOnButton = focusOnButton;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$props = this.props,
        cbAlertThumb = _this$props.cbAlertThumb,
        clientSize = _this$props.clientSize,
        corner = _this$props.corner,
        vertical = _this$props.vertical,
        rest = _objectWithoutProperties(_this$props, _excluded);
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_UiScrollbar.ScrollbarBase, {
        corner: corner,
        clientSize: clientSize,
        css: _ScrollbarModule["default"],
        ref: this.scrollbarRef,
        vertical: vertical,
        childRenderer: function childRenderer(_ref) {
          var thumbRef = _ref.thumbRef;
          return (
            /*#__PURE__*/
            // eslint-disable-line react/jsx-no-bind
            (0, _jsxRuntime.jsx)(_ScrollButtons["default"], _objectSpread(_objectSpread({}, rest), {}, {
              ref: _this3.scrollButtonsRef,
              vertical: vertical,
              thumbRenderer: function thumbRenderer() {
                return (
                  /*#__PURE__*/
                  // eslint-disable-line react/jsx-no-bind
                  (0, _jsxRuntime.jsx)(_ScrollThumb["default"], {
                    cbAlertThumb: cbAlertThumb,
                    ref: thumbRef,
                    vertical: vertical
                  }, "thumb")
                );
              }
            }))
          );
        }
      });
    }
  }]);
  return ScrollbarBase;
}(_react.Component);
/**
 * A Moonstone-styled scroll bar. It is used in {@link moonstone/Scrollable.Scrollable|Scrollable}.
 *
 * @class Scrollbar
 * @memberof moonstone/Scrollable
 * @ui
 * @private
 */
ScrollbarBase.displayName = 'ScrollbarBase';
ScrollbarBase.propTypes = /** @lends moonstone/Scrollable.Scrollbar.prototype */{
  /**
   * Called when {@link moonstone/Scrollable.ScrollThumb|ScrollThumb} is updated.
   *
   * @type {Function}
   * @private
   */
  cbAlertThumb: _propTypes["default"].func,
  /**
   * Client size of the container; valid values are an object that has `clientWidth` and `clientHeight`.
   *
   * @type {Object}
   * @property {Number}    clientHeight    The client height of the list.
   * @property {Number}    clientWidth    The client width of the list.
   * @public
   */
  clientSize: _propTypes["default"].shape({
    clientHeight: _propTypes["default"].number.isRequired,
    clientWidth: _propTypes["default"].number.isRequired
  }),
  /**
   * Adds the corner between vertical and horizontal scrollbars.
   *
   * @type {Booelan}
   * @default false
   * @public
   */
  corner: _propTypes["default"].bool,
  /**
   * `true` if rtl, `false` if ltr.
   * Normally, {@link moonstone/UiScrollable.Scrollable|Scrollable} should set this value.
   *
   * @type {Boolean}
   * @private
   */
  rtl: _propTypes["default"].bool,
  /**
   * Registers the ScrollButtons component with an
   * {@link core/internal/ApiDecorator.ApiDecorator}.
   *
   * @type {Function}
   * @private
   */
  setApiProvider: _propTypes["default"].func,
  /**
   * The scrollbar will be oriented vertically.
   *
   * @type {Boolean}
   * @default true
   * @public
   */
  vertical: _propTypes["default"].bool
};
ScrollbarBase.defaultProps = {
  corner: false,
  vertical: true
};
var Scrollbar = exports.ScrollbarBase = exports.Scrollbar = (0, _ApiDecorator["default"])({
  api: ['focusOnButton', 'getContainerRef', 'isOneOfScrollButtonsFocused', 'showThumb', 'startHidingThumb', 'update']
}, (0, _Skinnable["default"])(ScrollbarBase));
Scrollbar.displayName = 'Scrollbar';
var _default = exports["default"] = Scrollbar;