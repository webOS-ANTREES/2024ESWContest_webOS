"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ScrollButtons = void 0;
var _handle = require("@enact/core/handle");
var _target = require("@enact/spotlight/src/target");
var _keymap = require("@enact/core/keymap");
var _AnnounceDecorator = require("@enact/ui/AnnounceDecorator");
var _spotlight = _interopRequireWildcard(require("@enact/spotlight"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
var _reactDom = _interopRequireDefault(require("react-dom"));
var _$L = _interopRequireDefault(require("../internal/$L"));
var _ScrollButton = _interopRequireDefault(require("./ScrollButton"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var nop = function nop() {},
  prepareButton = function prepareButton(isPrev) {
    return function (isVertical) {
      var direction;
      if (isVertical) {
        direction = isPrev ? 'up' : 'down';
      } else {
        direction = isPrev ? 'left' : 'right';
      }
      return 'arrowsmall' + direction;
    };
  },
  preparePrevButton = prepareButton(true),
  prepareNextButton = prepareButton(false),
  isPageUp = (0, _keymap.is)('pageUp'),
  isPageDown = (0, _keymap.is)('pageDown'),
  consumeEvent = function consumeEvent(ev) {
    ev.preventDefault();
    ev.stopPropagation();
  };

/**
 * A Moonstone-styled scroll buttons. It is used in {@link moonstone/Scrollable.Scrollbar|Scrollbar}.
 *
 * @class ScrollButtons
 * @memberof moonstone/Scrollable
 * @ui
 * @private
 */
var ScrollButtons = exports.ScrollButtons = /*#__PURE__*/function (_Component) {
  _inherits(ScrollButtons, _Component);
  var _super = _createSuper(ScrollButtons);
  function ScrollButtons(props) {
    var _this;
    _classCallCheck(this, ScrollButtons);
    _this = _super.call(this, props);
    _this.updateButtons = function (bounds) {
      var vertical = _this.props.vertical,
        currentPos = vertical ? bounds.scrollTop : bounds.scrollLeft,
        maxPos = vertical ? bounds.maxTop : bounds.maxLeft,
        shouldDisablePrevButton = currentPos <= 0,
        shouldDisableNextButton = maxPos - currentPos <= 1;
      var updatePrevButton = _this.state.prevButtonDisabled !== shouldDisablePrevButton,
        updateNextButton = _this.state.nextButtonDisabled !== shouldDisableNextButton;
      if (updatePrevButton || updateNextButton) {
        _this.setState(function () {
          if (updatePrevButton && updateNextButton) {
            return {
              prevButtonDisabled: shouldDisablePrevButton,
              nextButtonDisabled: shouldDisableNextButton
            };
          } else if (updatePrevButton) {
            return {
              prevButtonDisabled: shouldDisablePrevButton
            };
          } else if (updateNextButton) {
            return {
              nextButtonDisabled: shouldDisableNextButton
            };
          }
        });
      }
    };
    _this.isOneOfScrollButtonsFocused = function () {
      var current = _spotlight["default"].getCurrent();
      return current === _this.prevButtonRef.current || current === _this.nextButtonRef.current;
    };
    _this.onDownPrev = function () {
      if (_this.announceRef.current.announce) {
        var _this$props = _this.props,
          rtl = _this$props.rtl,
          vertical = _this$props.vertical;
        _this.announceRef.current.announce(vertical && (0, _$L["default"])('UP') || rtl && (0, _$L["default"])('RIGHT') || (0, _$L["default"])('LEFT'));
      }
    };
    _this.onDownNext = function () {
      if (_this.announceRef.current.announce) {
        var _this$props2 = _this.props,
          rtl = _this$props2.rtl,
          vertical = _this$props2.vertical;
        _this.announceRef.current.announce(vertical && (0, _$L["default"])('DOWN') || rtl && (0, _$L["default"])('LEFT') || (0, _$L["default"])('RIGHT'));
      }
    };
    _this.onClickPrev = function (ev) {
      var _this$props3 = _this.props,
        onPrevScroll = _this$props3.onPrevScroll,
        vertical = _this$props3.vertical;
      onPrevScroll(_objectSpread(_objectSpread({}, ev), {}, {
        isPreviousScrollButton: true,
        isVerticalScrollBar: vertical
      }));
    };
    _this.onClickNext = function (ev) {
      var _this$props4 = _this.props,
        onNextScroll = _this$props4.onNextScroll,
        vertical = _this$props4.vertical;
      onNextScroll(_objectSpread(_objectSpread({}, ev), {}, {
        isPreviousScrollButton: false,
        isVerticalScrollBar: vertical
      }));
    };
    _this.focusOnButton = function (isPrev) {
      _spotlight["default"].focus(isPrev ? _this.prevButtonRef.current : _this.nextButtonRef.current);
    };
    _this.focusOnOppositeScrollButton = function (ev, direction) {
      var buttonNode = ev.target === _this.nextButtonRef.current ? _this.prevButtonRef.current : _this.nextButtonRef.current;
      if (!_spotlight["default"].focus(buttonNode)) {
        _spotlight["default"].move(direction);
      }
    };
    _this.onKeyDownButton = function (ev, position) {
      var _this$props5 = _this.props,
        focusableScrollButtons = _this$props5.focusableScrollButtons,
        vertical = _this$props5.vertical,
        preventBubblingOnKeyDown = _this$props5.preventBubblingOnKeyDown,
        keyCode = ev.keyCode,
        direction = (0, _spotlight.getDirection)(ev.keyCode),
        preventBubbling = preventBubblingOnKeyDown === 'programmatic',
        isNextButton = position === 'next',
        isPrevButton = position === 'prev',
        nextButton = {
          disabled: _this.state.nextButtonDisabled,
          ref: _this.nextButtonRef.current,
          click: _this.onClickNext
        },
        prevButton = {
          disabled: _this.state.prevButtonDisabled,
          ref: _this.prevButtonRef.current,
          click: _this.onClickPrev
        },
        currentButton = isPrevButton ? prevButton : nextButton,
        oppositeButton = isPrevButton ? nextButton : prevButton;
      if (isPageDown(keyCode) || isPageUp(keyCode)) {
        if (!vertical) {
          // should not call stopPropagation() here
          ev.preventDefault();
          return;
        }
        if (isPrevButton && isPageDown(keyCode) || isNextButton && isPageUp(keyCode)) {
          if (focusableScrollButtons && !_spotlight["default"].getPointerMode()) {
            consumeEvent(ev);
            _spotlight["default"].setPointerMode(false);
            _spotlight["default"].focus(_reactDom["default"].findDOMNode(oppositeButton.ref)); // eslint-disable-line react/no-find-dom-node
          } else if (!oppositeButton.disabled) {
            consumeEvent(ev);
            oppositeButton.click(ev);
          }
        } else if (!currentButton.disabled) {
          consumeEvent(ev);
          currentButton.click(ev);
        }
      } else if (direction) {
        var rtl = _this.props.rtl,
          isDown = direction === 'down',
          isLeftMovement = direction === (rtl ? 'right' : 'left'),
          isRightMovement = direction === (rtl ? 'left' : 'right'),
          isUp = direction === 'up',
          fromNextToPrev = vertical ? isUp : isLeftMovement,
          fromPrevToNext = vertical ? isDown : isRightMovement;
        _spotlight["default"].setPointerMode(false);
        if (isNextButton && fromNextToPrev || isPrevButton && fromPrevToNext) {
          if (focusableScrollButtons) {
            consumeEvent(ev);
            _this.focusOnOppositeScrollButton(ev, direction);
            if (!preventBubbling) {
              (0, _handle.forward)('onKeyDownButton', ev, _this.props);
            }
          }
        } else {
          var
            // If it is vertical `Scrollable`, move focus to the left for ltr or to the right for rtl
            // If is is horizontal `Scrollable`, move focus to the up
            directionToContent = !vertical && 'up' || rtl && 'right' || 'left',
            isLeavingDown = vertical && isNextButton && isDown,
            isLeavingUp = vertical && isPrevButton && isUp,
            isLeavingLeft = !vertical && isPrevButton && isLeftMovement,
            isLeavingRight = !vertical && isNextButton && isRightMovement,
            isDirectionToLeave = vertical && isRightMovement || isLeavingUp || isLeavingDown || !vertical && isDown || isLeavingLeft || isLeavingRight;
          if (isDirectionToLeave) {
            if (!focusableScrollButtons && !(0, _target.getTargetByDirectionFromElement)(direction, ev.target)) {
              if (preventBubbling && isLeavingDown || isLeavingUp || isLeavingLeft || isLeavingRight) {
                consumeEvent(ev);
              }
              // move focus into contents and allow bubbling
              _spotlight["default"].move(directionToContent);
            }
          } else if (preventBubbling) {
            // move focus directly to stop bubbling
            consumeEvent(ev);
            _spotlight["default"].move(direction);
          }
        }
      }
    };
    _this.onKeyDownPrev = function (ev) {
      _this.onKeyDownButton(ev, 'prev');
    };
    _this.onKeyDownNext = function (ev) {
      _this.onKeyDownButton(ev, 'next');
    };
    _this.state = {
      prevButtonDisabled: true,
      nextButtonDisabled: true
    };
    _this.announceRef = /*#__PURE__*/(0, _react.createRef)();
    _this.nextButtonRef = /*#__PURE__*/(0, _react.createRef)();
    _this.prevButtonRef = /*#__PURE__*/(0, _react.createRef)();
    return _this;
  }
  _createClass(ScrollButtons, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.nextButtonRef.current.addEventListener('keydown', this.onKeyDownNext);
      this.prevButtonRef.current.addEventListener('keydown', this.onKeyDownPrev);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.nextButtonRef.current.removeEventListener('keydown', this.onKeyDownNext);
      this.prevButtonRef.current.removeEventListener('keydown', this.onKeyDownPrev);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
        disabled = _this$props6.disabled,
        nextButtonAriaLabel = _this$props6.nextButtonAriaLabel,
        previousButtonAriaLabel = _this$props6.previousButtonAriaLabel,
        rtl = _this$props6.rtl,
        thumbRenderer = _this$props6.thumbRenderer,
        vertical = _this$props6.vertical,
        _this$state = this.state,
        prevButtonDisabled = _this$state.prevButtonDisabled,
        nextButtonDisabled = _this$state.nextButtonDisabled,
        prevIcon = preparePrevButton(vertical),
        nextIcon = prepareNextButton(vertical);
      return [/*#__PURE__*/(0, _jsxRuntime.jsx)(_ScrollButton["default"], {
        "aria-label": rtl && !vertical ? nextButtonAriaLabel : previousButtonAriaLabel,
        "data-spotlight-overflow": "ignore",
        disabled: disabled || prevButtonDisabled,
        onClick: this.onClickPrev,
        onDown: this.onDownPrev,
        onHold: this.onClickPrev,
        ref: this.prevButtonRef,
        children: prevIcon
      }, "prevButton"), thumbRenderer(), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ScrollButton["default"], {
        "aria-label": rtl && !vertical ? previousButtonAriaLabel : nextButtonAriaLabel,
        "data-spotlight-overflow": "ignore",
        disabled: disabled || nextButtonDisabled,
        onClick: this.onClickNext,
        onDown: this.onDownNext,
        onHold: this.onClickNext,
        ref: this.nextButtonRef,
        children: nextIcon
      }, "nextButton"), /*#__PURE__*/(0, _jsxRuntime.jsx)(_AnnounceDecorator.Announce, {
        ref: this.announceRef
      }, "announce")];
    }
  }]);
  return ScrollButtons;
}(_react.Component);
ScrollButtons.displayName = 'ScrollButtons';
ScrollButtons.propTypes = /** @lends moonstone/Scrollable.ScrollButtons.prototype */{
  /**
   * The render function for thumb.
   *
   * @type {Function}
   * @required
   * @private
   */
  thumbRenderer: _propTypes["default"].func.isRequired,
  /**
   * Called to alert the user for accessibility notifications.
   *
   * @type {Function}
   * @public
   */
  announce: _propTypes["default"].func,
  /**
   * Specifies to reflect scrollbar's disabled property to the paging controls.
   * When it is `true`, both prev/next buttons are going to be disabled.
   *
   * @type {Boolean}
   * @public
   */
  disabled: _propTypes["default"].bool,
  /**
   * When it is `true`, it allows 5 way navigation to the ScrollButtons.
   * This value is set by `Scrollable`.
   *
   * @type {Boolean}
   * @default false
   * @private
   */
  focusableScrollButtons: _propTypes["default"].bool,
  /**
  * Sets the hint string read when focusing the next button in the scroll bar.
  *
  * @type {String}
  * @public
  */
  nextButtonAriaLabel: _propTypes["default"].string,
  /**
   * Called when the scrollbar's button is pressed and needs to be bubbled.
   *
   * @type {Function}
   * @private
   */
  onKeyDownButton: _propTypes["default"].func,
  /**
   * Called when the scrollbar's down/right button is pressed.
   *
   * @type {Function}
   * @public
   */
  onNextScroll: _propTypes["default"].func,
  /**
   * Called when the scrollbar's up/left button is pressed.
   *
   * @type {Function}
   * @public
   */
  onPrevScroll: _propTypes["default"].func,
  /**
   * Specifies preventing keydown events from bubbling up to applications.
   * Valid values are `'none'`, and `'programmatic'`.
   *
   * When it is `'none'`, every keydown event is bubbled.
   * When it is `'programmatic'`, an event bubbling is not allowed for a keydown input
   * which invokes programmatic spotlight moving.
   *
   * @type {String}
   * @private
   */
  preventBubblingOnKeyDown: _propTypes["default"].oneOf(['none', 'programmatic']),
  /**
   * Sets the hint string read when focusing the previous button in the scroll bar.
   *
   * @type {String}
   * @public
   */
  previousButtonAriaLabel: _propTypes["default"].string,
  /**
   * `true` if rtl, `false` if ltr.
   *
   * @type {Boolean}
   * @private
   */
  rtl: _propTypes["default"].bool,
  /**
   * The scrollbar will be oriented vertically.
   *
   * @type {Boolean}
   * @default true
   * @public
   */
  vertical: _propTypes["default"].bool
};
ScrollButtons.defaultProps = {
  focusableScrollButtons: false,
  onKeyDownButton: nop,
  onNextScroll: nop,
  onPrevScroll: nop
};
var _default = exports["default"] = ScrollButtons;