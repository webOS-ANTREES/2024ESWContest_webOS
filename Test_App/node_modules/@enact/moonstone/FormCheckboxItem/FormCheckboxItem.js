"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FormCheckboxItemBase = exports.FormCheckboxItem = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _FormCheckbox = _interopRequireDefault(require("../FormCheckbox"));
var _ToggleItem = require("../ToggleItem");
var _FormCheckboxItemModule = _interopRequireDefault(require("./FormCheckboxItem.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "css"];
/**
 * Provides Moonstone styled form item component and interactive toggleable checkbox.
 *
 * @example
 * <FormCheckboxItem>A Checkbox for a form</FormCheckboxItem>
 *
 * @module moonstone/FormCheckboxItem
 * @exports FormCheckboxItem
 * @exports FormCheckboxItemBase
 */
/**
 * Renders a form item with a checkbox component. Useful to show a selected state on an item inside a form.
 *
 * @class FormCheckboxItem
 * @memberof moonstone/FormCheckboxItem
 * @extends moonstone/ToggleItem.ToggleItem
 * @omit iconComponent
 * @ui
 * @public
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var FormCheckboxItemBase = exports.FormCheckboxItemBase = (0, _kind["default"])({
  name: 'FormCheckboxItem',
  propTypes: /** @lends moonstone/FormCheckboxItem.FormCheckboxItem.prototype */{
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `formCheckboxItem` - The root class name
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object
  },
  styles: {
    css: _FormCheckboxItemModule["default"],
    className: 'formCheckboxItem',
    publicClassNames: ['formCheckboxItem']
  },
  render: function render(_ref) {
    var children = _ref.children,
      css = _ref.css,
      props = _objectWithoutProperties(_ref, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem.ToggleItemBase, _objectSpread(_objectSpread({
      "data-webos-voice-intent": "SelectCheckItem"
    }, props), {}, {
      css: css,
      iconComponent: /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormCheckbox["default"], {
        className: _FormCheckboxItemModule["default"].toggleIcon
      }),
      children: children
    }));
  }
});
var FormCheckboxItem = exports.FormCheckboxItem = (0, _ToggleItem.ToggleItemDecorator)(FormCheckboxItemBase);
var _default = exports["default"] = FormCheckboxItem;