"use strict";

var _ilib = _interopRequireDefault(require("ilib"));
var _DateFmt = _interopRequireDefault(require("ilib/lib/DateFmt"));
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _TimePicker = _interopRequireDefault(require("../TimePicker"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var timeToLocaleString = function timeToLocaleString(date) {
  return new _DateFmt["default"]({
    date: 'dmwy',
    length: 'full',
    timezone: 'local',
    type: 'time',
    useNative: false
  }).format(date);
};
describe('TimePicker', function () {
  test('should not generate a label when value is undefined', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      "data-testid": "timePicker",
      title: "Time"
    }));
    var expected = 1;
    var actual = _react.screen.getByTestId('timePicker').children.item(0).children;
    expect(actual).toHaveLength(expected);
  });
  test('should emit an onChange event when changing a component picker', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleChange = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      locale: "en-US",
      onChange: handleChange,
      open: true,
      title: "Time",
      value: new Date(2000, 6, 15, 3, 30)
    }));
    var hourPickerUp = _react.screen.getByLabelText('3 hour change a value with up down button').children.item(0);
    yield user.click(hourPickerUp);
    var expected = 1;
    expect(handleChange).toBeCalledTimes(expected);
  }));
  test('should omit labels when noLabels is true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      hour: 1,
      meridiem: 0,
      meridiems: ['am', 'pm'],
      minute: 1,
      noLabels: true,
      open: true,
      order: ['h', 'm', 'a'],
      title: "Time"
    }));
    var hourLabel = _react.screen.queryByText('hour');
    var minuteLabel = _react.screen.queryByText('minute');
    var meridiemLabel = _react.screen.queryByText('AM / PM');
    expect(hourLabel).toBeNull();
    expect(minuteLabel).toBeNull();
    expect(meridiemLabel).toBeNull();
  });
  test('should create pickers arranged by order', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      hour: 1,
      meridiem: 0,
      meridiems: ['am', 'pm'],
      minute: 1,
      open: true,
      order: ['h', 'm', 'a'],
      title: "Time"
    }));
    var dateComponent = _react.screen.getByText('minute').parentElement.parentElement;
    var expectedFirst = 'hourComponents';
    var actualFirst = dateComponent.children.item(0);
    var expectedSecond = 'minutesComponents';
    var actualSecond = dateComponent.children.item(1);
    var expectedThird = 'meridiemComponent';
    var actualThird = dateComponent.children.item(2);
    expect(actualFirst).toHaveClass(expectedFirst);
    expect(actualSecond).toHaveClass(expectedSecond);
    expect(actualThird).toHaveClass(expectedThird);
  });
  test('should accept a JavaScript Date for its value prop', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var minutes = _react.screen.getByText('30');
    var actual = minutes.parentElement.parentElement;
    var expectedAttribute = 'aria-valuetext';
    var expectedValue = '30 minute';
    expect(minutes).toBeInTheDocument();
    expect(actual).toHaveAttribute(expectedAttribute, expectedValue);
  });
  test('should set `hourAriaLabel` to hour picker', function () {
    var label = 'custom hour aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      hourAriaLabel: label,
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var hourPicker = _react.screen.getByLabelText(label).parentElement;
    var expected = 'hourComponents';
    expect(hourPicker).toBeInTheDocument();
    expect(hourPicker).toHaveClass(expected);
  });
  test('should set `meridiemAriaLabel` to meridiem picker', function () {
    var label = 'custom meridiem aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      meridiemAriaLabel: label,
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var meridiemPicker = _react.screen.getByLabelText(label).parentElement;
    var expected = 'meridiemComponent';
    expect(meridiemPicker).toBeInTheDocument();
    expect(meridiemPicker).toHaveClass(expected);
  });
  test('should set `minuteAriaLabel` to minute picker', function () {
    var label = 'custom minute aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      minuteAriaLabel: label,
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var minutePicker = _react.screen.getByLabelText(label).parentElement;
    var expected = 'minutesComponents';
    expect(minutePicker).toBeInTheDocument();
    expect(minutePicker).toHaveClass(expected);
  });
  test('should set `hourLabel` to hour picker', function () {
    var label = 'custom hour label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      hourLabel: label,
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var hourPicker = _react.screen.getByText(label).parentElement;
    var expected = 'hourComponents';
    expect(hourPicker).toHaveClass(expected);
  });
  test('should set `meridiemLabel` to meridiem picker', function () {
    var label = 'custom meridiem label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      meridiemLabel: label,
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var meridiemPicker = _react.screen.getByText(label).parentElement;
    var expected = 'meridiemComponent';
    expect(meridiemPicker).toHaveClass(expected);
  });
  test('should set `minuteLabel` to minute picker', function () {
    var label = 'custom minute label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      minuteLabel: label,
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var minutePicker = _react.screen.getByText(label).parentElement;
    var expected = 'minutesComponents';
    expect(minutePicker).toHaveClass(expected);
  });
  test('should set `data-webos-voice-disabled` to hour picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      "data-webos-voice-disabled": true,
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var hourPicker = _react.screen.getByLabelText('12 hour change a value with up down button');
    var expected = 'data-webos-voice-disabled';
    expect(hourPicker).toHaveAttribute(expected);
  });
  test('should set "data-webos-voice-disabled" to meridiem picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      "data-webos-voice-disabled": true,
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var meridiemPicker = _react.screen.getByLabelText('PM change a value with up down button');
    var expected = 'data-webos-voice-disabled';
    expect(meridiemPicker).toHaveAttribute(expected);
  });
  test('should set "data-webos-voice-disabled" to minute picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      "data-webos-voice-disabled": true,
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var minutePicker = _react.screen.getByLabelText('30 minute change a value with up down button');
    var expected = 'data-webos-voice-disabled';
    expect(minutePicker).toHaveAttribute(expected);
  });
  test('should format the time label to locale `en-US`', function () {
    var date = new Date(2000, 0, 1, 12, 30);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      locale: "en-US",
      open: true,
      title: "Date",
      value: date
    }));
    var header = _react.screen.getByText(timeToLocaleString(date), {
      collapseWhitespace: false
    }).parentElement.parentElement;
    var expected = 'label';
    expect(header).toHaveClass(expected);
  });
  test('should format the time label to locale `ar-SA`', function () {
    _ilib["default"].setLocale('ar-SA');
    var date = new Date(2000, 0, 1, 12, 30);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      locale: "ar-SA",
      open: true,
      title: "Date",
      value: date
    }));
    var header = _react.screen.getByText(timeToLocaleString(date), {
      collapseWhitespace: false
    }).parentElement.parentElement;
    var expected = 'label';
    expect(header).toHaveClass(expected);
  });
});