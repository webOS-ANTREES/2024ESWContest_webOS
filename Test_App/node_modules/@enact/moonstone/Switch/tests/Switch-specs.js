"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _Switch = _interopRequireWildcard(require("../Switch"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
describe('Switch Specs', function () {
  test('should not have `selected` className by default', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Switch.SwitchBase, {
      children: "Toggle me"
    }));
    var expected = 'selected';
    var actual = _react.screen.getByText('Toggle me').parentElement;
    expect(actual).not.toHaveClass(expected);
  });
  test('should have `selected` className when selected is true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Switch.SwitchBase, {
      selected: true,
      children: "Toggle me"
    }));
    var expected = 'selected';
    var actual = _react.screen.getByText('Toggle me').parentElement;
    expect(actual).toHaveClass(expected);
  });
  test('should have `animated` className by default', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Switch.SwitchBase, {
      children: "Toggle me"
    }));
    var expected = 'animated';
    var actual = _react.screen.getByText('Toggle me').parentElement;
    expect(actual).toHaveClass(expected);
  });
  test('should not have `animated` className when noAnimation is true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Switch.SwitchBase, {
      noAnimation: true,
      children: "Toggle me"
    }));
    var unexpected = 'animated';
    var actual = _react.screen.getByText('Toggle me').parentElement;
    expect(actual).not.toHaveClass(unexpected);
  });
  test('toggle Switch', function () {
    var handleToggle = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Switch["default"], {
      onToggle: handleToggle,
      children: "Toggle me"
    }));
    var actual = _react.screen.getByText('Toggle me').parentElement;
    _react.fireEvent.mouseDown(actual);
    _react.fireEvent.mouseUp(actual);
    var expectedTimes = 1;
    expect(handleToggle).toBeCalledTimes(expectedTimes);
  });
});