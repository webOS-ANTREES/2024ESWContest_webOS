"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VirtualList = exports.VirtualGridListNative = exports.VirtualGridList = void 0;
Object.defineProperty(exports, "VirtualListBase", {
  enumerable: true,
  get: function get() {
    return _VirtualListBase.VirtualListBase;
  }
});
Object.defineProperty(exports, "VirtualListBaseNative", {
  enumerable: true,
  get: function get() {
    return _VirtualListBase.VirtualListBaseNative;
  }
});
exports["default"] = exports.VirtualListNative = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _VirtualList = require("@enact/ui/VirtualList");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _VirtualListBase = require("./VirtualListBase");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["itemSize"],
  _excluded2 = ["itemSize"];
/**
 * Provides Moonstone-themed virtual list components and behaviors.
 *
 * @module moonstone/VirtualList
 * @exports VirtualGridList
 * @exports VirtualGridListNative
 * @exports VirtualList
 * @exports VirtualListBase
 * @exports VirtualListBaseNative
 * @exports VirtualListNative
 */
/**
 * A Moonstone-styled scrollable and spottable virtual list component.
 *
 * @class VirtualList
 * @memberof moonstone/VirtualList
 * @extends moonstone/VirtualList.VirtualListBase
 * @ui
 * @public
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var VirtualList = exports.VirtualList = (0, _kind["default"])({
  name: 'VirtualList',
  propTypes: /** @lends moonstone/VirtualList.VirtualList.prototype */{
    /**
     * Size of an item for the VirtualList; valid value is a number generally.
     * For different item size, value is an object that has `minSize`
     * and `size` as properties.
     * If the direction for the list is vertical, itemSize means the height of an item.
     * For horizontal, it means the width of an item.
     *
     * Usage:
     * ```
     * <VirtualList itemSize={ri.scale(72)} />
     * ```
     *
     * @type {Number|ui/VirtualList.itemSizesShape}
     * @required
     * @public
     */
    itemSize: _propTypes["default"].oneOfType([_propTypes["default"].number, _VirtualList.itemSizesShape]).isRequired
  },
  render: function render(_ref) {
    var itemSize = _ref.itemSize,
      rest = _objectWithoutProperties(_ref, _excluded);
    var props = itemSize && itemSize.minSize ? {
      itemSize: itemSize.minSize,
      itemSizes: itemSize.size
    } : {
      itemSize: itemSize
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualListBase.ScrollableVirtualList, _objectSpread(_objectSpread({}, rest), props));
  }
});

/**
 * A Moonstone-styled scrollable and spottable virtual grid list component.
 *
 * @class VirtualGridList
 * @memberof moonstone/VirtualList
 * @extends moonstone/VirtualList.VirtualListBase
 * @ui
 * @public
 */
var VirtualGridList = exports.VirtualGridList = (0, _kind["default"])({
  name: 'VirtualGridList',
  propTypes: /** @lends moonstone/VirtualList.VirtualGridList.prototype */{
    /**
     * Size of an item for the VirtualGridList; valid value is an object that has `minWidth`
     * and `minHeight` as properties.
     *
     * Usage:
     * ```
     * <VirtualGridList
     * 	itemSize={{
     * 		minWidth: ri.scale(180),
     * 		minHeight: ri.scale(270)
     * 	}}
     * />
     * ```
     *
     * @type {ui/VirtualList.gridListItemSizeShape}
     * @required
     * @public
     */
    itemSize: _VirtualList.gridListItemSizeShape.isRequired
  },
  render: function render(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualListBase.ScrollableVirtualList, _objectSpread({}, props));
  }
});

/**
 * A Moonstone-styled scrollable and spottable virtual native list component.
 * For smooth native scrolling, web engine with below Chromium 61, should be launched
 * with the flag '--enable-blink-features=CSSOMSmoothScroll' to support it.
 * The one with Chromium 61 or above, is launched to support it by default.
 *
 * @class VirtualListNative
 * @memberof moonstone/VirtualList
 * @extends moonstone/VirtualList.VirtualListBaseNative
 * @ui
 * @private
 */
var VirtualListNative = exports.VirtualListNative = (0, _kind["default"])({
  name: 'VirtualListNative',
  propTypes: /** @lends moonstone/VirtualList.VirtualListNative.prototype */{
    /**
     * Size of an item for the VirtualList; valid value is a number.
     * For different item size, value is an object that has `minSize`
     * and `size` as properties.
     * If the direction for the list is vertical, itemSize means the height of an item.
     * For horizontal, it means the width of an item.
     *
     * Usage:
     * ```
     * <VirtualListNative itemSize={ri.scale(72)} />
     * ```
     *
     * @type {Number|ui/VirtualList.itemSizesShape}
     * @required
     * @public
     */
    itemSize: _propTypes["default"].oneOfType([_propTypes["default"].number, _VirtualList.itemSizesShape]).isRequired
  },
  render: function render(_ref2) {
    var itemSize = _ref2.itemSize,
      rest = _objectWithoutProperties(_ref2, _excluded2);
    var props = itemSize && itemSize.minSize ? {
      itemSize: itemSize.minSize,
      itemSizes: itemSize.size
    } : {
      itemSize: itemSize
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualListBase.ScrollableVirtualListNative, _objectSpread(_objectSpread({}, rest), props));
  }
});

/**
 * A Moonstone-styled scrollable and spottable virtual grid native list component.
 * For smooth native scrolling, web engine with below Chromium 61, should be launched
 * with the flag '--enable-blink-features=CSSOMSmoothScroll' to support it.
 * The one with Chromium 61 or above, is launched to support it by default.
 *
 * @class VirtualGridListNative
 * @memberof moonstone/VirtualList
 * @extends moonstone/VirtualList.VirtualListBaseNative
 * @ui
 * @private
 */
var VirtualGridListNative = exports.VirtualGridListNative = (0, _kind["default"])({
  name: 'VirtualGridListNative',
  propTypes: /** @lends moonstone/VirtualList.VirtualGridListNative.prototype */{
    /**
     * Size of an item for the VirtualGridList; valid value is an object that has `minWidth`
     * and `minHeight` as properties.
     *
     * Usage:
     * ```
     * <VirtualGridListNative
     * 	itemSize={{
     * 		minWidth: ri.scale(180),
     * 		minHeight: ri.scale(270)
     * 	}}
     * />
     * ```
     *
     * @type {ui/VirtualList.gridListItemSizeShape}
     * @required
     * @public
     */
    itemSize: _VirtualList.gridListItemSizeShape.isRequired
  },
  render: function render(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualListBase.ScrollableVirtualListNative, _objectSpread({}, props));
  }
});
var _default = exports["default"] = VirtualList;