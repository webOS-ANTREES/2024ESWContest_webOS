"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _Item = _interopRequireDefault(require("../../Item"));
var _VirtualList = _interopRequireDefault(require("../VirtualList"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["index"],
  _excluded2 = ["index"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
describe('VirtualList', function () {
  var clientSize, dataSize, getScrollTo, handlerOnScroll, handlerOnScrollStart, handlerOnScrollStop, items, myScrollTo, onScrollCount, onScrollStartCount, onScrollStopCount, renderItem, resultScrollLeft, resultScrollTop;
  beforeEach(function () {
    clientSize = {
      clientWidth: 1280,
      clientHeight: 720
    };
    dataSize = 100;
    items = [];
    onScrollCount = 0;
    onScrollStartCount = 0;
    onScrollStopCount = 0;
    resultScrollLeft = 0;
    resultScrollTop = 0;
    getScrollTo = function getScrollTo(scrollTo) {
      myScrollTo = scrollTo;
    };
    handlerOnScroll = function handlerOnScroll() {
      onScrollCount++;
    };
    handlerOnScrollStart = function handlerOnScrollStart() {
      onScrollStartCount++;
    };
    handlerOnScrollStop = function handlerOnScrollStop(done, testCase) {
      return function (e) {
        onScrollStopCount++;
        resultScrollLeft = e.scrollLeft;
        resultScrollTop = e.scrollTop;
        testCase();
        done();
      };
    };
    renderItem = function renderItem(_ref) {
      var index = _ref.index,
        rest = _objectWithoutProperties(_ref, _excluded);
      // eslint-disable-line enact/display-name
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item["default"], _objectSpread(_objectSpread({}, rest), {}, {
        children: items[index].name
      }));
    };
    for (var i = 0; i < dataSize; i++) {
      items.push({
        name: 'Account ' + i
      });
    }
  });
  afterEach(function () {
    clientSize = null;
    dataSize = null;
    getScrollTo = null;
    handlerOnScroll = null;
    handlerOnScrollStart = null;
    handlerOnScrollStop = null;
    items = null;
    myScrollTo = null;
    onScrollCount = null;
    onScrollStartCount = null;
    onScrollStopCount = null;
    renderItem = null;
    resultScrollLeft = null;
    resultScrollTop = null;
  });
  test('should render a list of `items`', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
      clientSize: clientSize,
      dataSize: dataSize,
      itemRenderer: renderItem,
      itemSize: 30
    }));
    var expected = 'Account 0';
    var actual = _react.screen.getByRole('list').children.item(0);
    expect(actual).toHaveTextContent(expected);
  });
  test('should render (clientHeight / itemHeight + overhang) items', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
      clientSize: clientSize,
      dataSize: dataSize,
      itemRenderer: renderItem,
      itemSize: 30
    }));
    var expected = 27; // 720 / 30 + 3
    var actual = _react.screen.getByRole('list').children;
    expect(actual).toHaveLength(expected);
  });
  test('should render only one scrollbar', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
      clientSize: clientSize,
      dataSize: dataSize,
      "data-testid": "list",
      direction: "horizontal",
      itemRenderer: renderItem,
      itemSize: 30
    }));
    var expected = 2; // One for the list and another for the horizontal scrollbar
    var actual = _react.screen.getByTestId('list').parentElement.parentElement.parentElement.parentElement.children.length;
    expect(actual).toBe(expected);
  });
  describe('ScrollTo', function () {
    test('should scroll to the specific item of a given index with scrollTo', function (done) {
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = 300;
        expect(resultScrollTop).toBe(expected);
      });
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: 30,
        onScrollStop: onScrollStop
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          index: 10,
          animate: false
        });
      });
    });
    test('should scroll to the given `x` position with scrollTo', function (done) {
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = 100;
        expect(resultScrollLeft).toBe(expected);
      });
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        direction: "horizontal",
        itemRenderer: renderItem,
        itemSize: 30,
        onScrollStop: onScrollStop
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          position: {
            x: 100
          },
          animate: false
        });
      });
    });
    test('should scroll to the given `y` position with scrollTo', function (done) {
      var onScrollStop = handlerOnScrollStop(done, function () {
        var expected = 100;
        expect(resultScrollTop).toBe(expected);
      });
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
        cbScrollTo: getScrollTo,
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: 30,
        onScrollStop: onScrollStop
      }));
      (0, _react.act)(function () {
        return myScrollTo({
          position: {
            y: 100
          },
          animate: false
        });
      });
    });
    describe('scroll events', function () {
      test('should call onScrollStart once', function () {
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
          cbScrollTo: getScrollTo,
          clientSize: clientSize,
          dataSize: dataSize,
          itemRenderer: renderItem,
          itemSize: 30,
          onScrollStart: handlerOnScrollStart
        }));
        (0, _react.act)(function () {
          return myScrollTo({
            position: {
              y: 100
            },
            animate: false
          });
        });
        var expected = 1;
        expect(onScrollStartCount).toBe(expected);
      });
      test('should call onScroll once', function () {
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
          cbScrollTo: getScrollTo,
          clientSize: clientSize,
          dataSize: dataSize,
          itemRenderer: renderItem,
          itemSize: 30,
          onScroll: handlerOnScroll
        }));
        (0, _react.act)(function () {
          return myScrollTo({
            position: {
              y: 100
            },
            animate: false
          });
        });
        var expected = 1;
        expect(onScrollCount).toBe(expected);
      });
      test('should call onScrollStop once', function (done) {
        var onScrollStop = handlerOnScrollStop(done, function () {
          var expected = 1;
          expect(onScrollStopCount).toBe(expected);
        });
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
          cbScrollTo: getScrollTo,
          clientSize: clientSize,
          dataSize: dataSize,
          itemRenderer: renderItem,
          itemSize: 30,
          onScrollStop: onScrollStop
        }));
        (0, _react.act)(function () {
          return myScrollTo({
            position: {
              y: 100
            },
            animate: false
          });
        });
      });
    });
  });
  describe('Adding an item', function () {
    test('should render an added item named `Password 0` as the first item', function (done) {
      var itemArray = [{
        name: 'A'
      }, {
        name: 'B'
      }, {
        name: 'C'
      }];
      var renderItemArray = function renderItemArray(_ref2) {
        var index = _ref2.index,
          rest = _objectWithoutProperties(_ref2, _excluded2);
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
          id: 'item' + index,
          children: itemArray[index].name
        }));
      };
      var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
          clientSize: clientSize,
          dataSize: itemArray.length,
          itemRenderer: renderItemArray,
          itemSize: 30
        })),
        rerender = _render.rerender;
      itemArray.unshift({
        name: 'Password 0'
      });
      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
        clientSize: clientSize,
        dataSize: itemArray.length,
        itemRenderer: renderItemArray,
        itemSize: 30
      }));
      setTimeout(function () {
        var expected = itemArray[0].name;
        var actual = _react.screen.getByRole('list').firstElementChild;
        expect(actual).toHaveTextContent(expected);
        done();
      }, 0);
    });
  });
  describe('Scrollbar accessibility', function () {
    test('should set `aria-label` to previous scroll button in the horizontal scrollbar', function () {
      var label = 'custom button aria label';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
        clientSize: clientSize,
        dataSize: dataSize,
        direction: "horizontal",
        itemRenderer: renderItem,
        itemSize: 30,
        scrollLeftAriaLabel: label
      }));
      var expectedAttribute = 'aria-label';
      var expectedValue = label;
      var actual = _react.screen.getAllByRole('button')[0];
      expect(actual).toHaveAttribute(expectedAttribute, expectedValue);
    });
    test('should set `aria-label` to next scroll button in the horizontal scrollbar', function () {
      var label = 'custom button aria label';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
        clientSize: clientSize,
        dataSize: dataSize,
        direction: "horizontal",
        itemRenderer: renderItem,
        itemSize: 30,
        scrollRightAriaLabel: label
      }));
      var expectedAttribute = 'aria-label';
      var expectedValue = label;
      var actual = _react.screen.getAllByRole('button')[1];
      expect(actual).toHaveAttribute(expectedAttribute, expectedValue);
    });
    test('should set `aria-label` to previous scroll button in the vertical scrollbar', function () {
      var label = 'custom button aria label';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
        clientSize: clientSize,
        dataSize: dataSize,
        direction: "vertical",
        itemRenderer: renderItem,
        itemSize: 30,
        scrollUpAriaLabel: label
      }));
      var expectedAttribute = 'aria-label';
      var expectedValue = label;
      var actual = _react.screen.getAllByRole('button')[0];
      expect(actual).toHaveAttribute(expectedAttribute, expectedValue);
    });
    test('should set `aria-label` to next scroll button in the vertical scrollbar', function () {
      var label = 'custom button aria label';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
        clientSize: clientSize,
        dataSize: dataSize,
        direction: "vertical",
        itemRenderer: renderItem,
        itemSize: 30,
        scrollDownAriaLabel: label
      }));
      var expectedAttribute = 'aria-label';
      var expectedValue = label;
      var actual = _react.screen.getAllByRole('button')[1];
      expect(actual).toHaveAttribute(expectedAttribute, expectedValue);
    });
  });
});