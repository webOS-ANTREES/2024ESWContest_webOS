"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DaySelectorItem = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ToggleItem = _interopRequireDefault(require("../ToggleItem"));
var _DaySelectorCheckbox = _interopRequireDefault(require("./DaySelectorCheckbox"));
var _DaySelectorItemModule = _interopRequireDefault(require("./DaySelectorItem.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * An extension of {@link moonstone/Item.Item|Item} that can be toggled between two states via its
 * `selected` prop.
 *
 * By default, `DaySelectorItem` maintains the state of its `selected` property. Supply the
 * `defaultSelected` property to control its initial value. If you wish to directly control updates
 * to the component, supply a value to `selected` at creation time and update it in response to
 * `onToggle` events.
 *
 * @class DaySelectorItem
 * @memberof moonstone/DaySelector
 * @ui
 * @private
 */
var DaySelectorItem = exports.DaySelectorItem = (0, _kind["default"])({
  name: 'DaySelectorItem',
  propTypes: /** @lends moonstone/DaySelector.DaySelectorItem.prototype */{
    /**
     * The string to be displayed as the main content of the checkbox item.
     *
     * @type {String}
     * @required
     * @public
     */
    children: _propTypes["default"].string.isRequired,
    /**
     * When `true`, applies a disabled style and the control becomes non-interactive.
     *
     * @type {Boolean}
     * @public
     */
    disabled: _propTypes["default"].bool,
    /**
     * Specifies on which side (`before` or `after`) of the text the icon appears.
     *
     * @type {String}
     * @default 'before'
     * @public
     */
    iconPosition: _propTypes["default"].oneOf(['before', 'after']),
    /**
     * When `true`, an inline visual effect is applied to the button.
     *
     * @type {Boolean}
     * @public
     */
    inline: _propTypes["default"].bool,
    /**
     * The handler to run when the checkbox item is toggled.
     *
     * @type {Function}
     * @param {Object} event
     * @param {String} event.selected - Selected value of item.
     * @param {*} event.value - Value passed from `value` prop.
     * @public
     */
    onToggle: _propTypes["default"].func,
    /**
     * When `true`, a check mark icon is applied to the button.
     *
     * @type {Boolean}
     * @public
     */
    selected: _propTypes["default"].bool,
    /**
     * The value that will be sent to the `onToggle` handler.
     *
     * @type {String|Number}
     * @default ''
     * @public
     */
    value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])
  },
  defaultProps: {
    iconPosition: 'before',
    value: ''
  },
  styles: {
    css: _DaySelectorItemModule["default"],
    className: 'daySelectorItem'
  },
  computed: {
    className: function className(_ref) {
      var selected = _ref.selected,
        styler = _ref.styler;
      return styler.append({
        selected: selected
      });
    }
  },
  render: function render(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], _objectSpread(_objectSpread({}, props), {}, {
      iconComponent: _DaySelectorCheckbox["default"]
    }));
  }
});
var _default = exports["default"] = DaySelectorItem;