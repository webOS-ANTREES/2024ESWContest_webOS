"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _DaySelector = _interopRequireDefault(require("../DaySelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
describe('DaySelector', function () {
  test('should set selected prop to true for the item that is selected by default', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DaySelector["default"], {
      defaultSelected: 0
    }));
    var daySelector = _react.screen.getAllByRole('checkbox')[0];
    var expectedAttribute = 'selected';
    expect(daySelector).toHaveClass(expectedAttribute);
  });
  test('should fire onSelect when a day is selected', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleSelect = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DaySelector["default"], {
      onSelect: handleSelect
    }));
    var item = _react.screen.getAllByRole('checkbox')[0];
    _react.fireEvent.mouseDown(item);
    _react.fireEvent.mouseUp(item);
    yield user.click(item);
    expect(handleSelect).toHaveBeenCalled();
  }));
  test('should fire onSelect with the correct content when a day is selected', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleSelect = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DaySelector["default"], {
      onSelect: handleSelect
    }));
    var item = _react.screen.getAllByRole('checkbox')[6];
    _react.fireEvent.mouseDown(item);
    _react.fireEvent.mouseUp(item);
    yield user.click(item);
    var expected = 'Sat';
    var actual = handleSelect.mock.calls[0][0].content;
    expect(actual).toBe(expected);
  }));
  test('should use the full string format when dayNameLength is `full`', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleSelect = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DaySelector["default"], {
      dayNameLength: "full",
      onSelect: handleSelect
    }));
    var item = _react.screen.getAllByRole('checkbox')[6];
    _react.fireEvent.mouseDown(item);
    _react.fireEvent.mouseUp(item);
    yield user.click(item);
    var expected = 'Saturday';
    var actual = handleSelect.mock.calls[0][0].content;
    expect(actual).toBe(expected);
  }));
  test('should set selected content as Every Day when every day is selected', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleSelect = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DaySelector["default"], {
      defaultSelected: [0, 1, 2, 3, 4, 5],
      onSelect: handleSelect
    }));
    var item = _react.screen.getAllByRole('checkbox')[6];
    _react.fireEvent.mouseDown(item);
    _react.fireEvent.mouseUp(item);
    yield user.click(item);
    var expected = 'Every Day';
    var actual = handleSelect.mock.calls[0][0].content;
    expect(actual).toBe(expected);
  }));
  test('should set selected content as Every Weekday when every weekday is selected', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleSelect = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DaySelector["default"], {
      defaultSelected: [1, 2, 3, 4],
      onSelect: handleSelect
    }));
    var item = _react.screen.getAllByRole('checkbox')[5];
    _react.fireEvent.mouseDown(item);
    _react.fireEvent.mouseUp(item);
    yield user.click(item);
    var expected = 'Every Weekday';
    var actual = handleSelect.mock.calls[0][0].content;
    expect(actual).toBe(expected);
  }));
  test('should set selected content as Every Weekend when every weekend is selected', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleSelect = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DaySelector["default"], {
      defaultSelected: [0],
      onSelect: handleSelect
    }));
    var item = _react.screen.getAllByRole('checkbox')[6];
    _react.fireEvent.mouseDown(item);
    _react.fireEvent.mouseUp(item);
    yield user.click(item);
    var expected = 'Every Weekend';
    var actual = handleSelect.mock.calls[0][0].content;
    expect(actual).toBe(expected);
  }));
  test('should render updated day name length', function () {
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DaySelector["default"], {
        dayNameLength: 'full'
      })),
      rerender = _render.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DaySelector["default"], {
      dayNameLength: 'short'
    }));
    var expected = '✓S✓M✓T✓W✓T✓F✓S';
    var actual = _react.screen.getByRole('group').textContent;
    expect(actual).toBe(expected);
  });
  test('should have prop disabled when `disable` is true.', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DaySelector["default"], {
      disabled: true
    }));
    var daySelector = _react.screen.getByRole('group');
    var expectedAttribute = 'disabled';
    expect(daySelector).toHaveAttribute(expectedAttribute);
  });
});