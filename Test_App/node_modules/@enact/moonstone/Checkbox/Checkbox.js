"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.CheckboxBase = exports.Checkbox = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ToggleIcon = _interopRequireDefault(require("../ToggleIcon"));
var _Icon = _interopRequireDefault(require("@enact/ui/Icon"));
var _CheckboxModule = _interopRequireDefault(require("./Checkbox.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
/**
 * Moonstone styled checkbox components.
 *
 * @example
 * <Checkbox onToggle={console.log} />
 *
 * @module moonstone/Checkbox
 * @exports Checkbox
 * @exports CheckboxBase
 */
/**
 * A checkbox component, ready to use in Moonstone applications.
 *
 * `Checkbox` may be used independently to represent a toggleable state but is more commonly used as
 * part of {@link moonstone/CheckboxItem|CheckboxItem}.
 *
 * Usage:
 * ```
 * <Checkbox selected />
 * ```
 *
 * @class Checkbox
 * @memberof moonstone/Checkbox
 * @extends moonstone/ToggleIcon.ToggleIcon
 * @ui
 * @public
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var CheckboxBase = exports.CheckboxBase = exports.Checkbox = (0, _kind["default"])({
  name: 'Checkbox',
  propTypes: /** @lends moonstone/Checkbox.Checkbox.prototype */{
    /**
     * The icon displayed when `selected`.
     *
     * @see {@link moonstone/Icon.Icon.children}
     * @type {String|Object}
     * @default	'check'
     * @public
     */
    children: _propTypes["default"].string
  },
  defaultProps: {
    children: 'check'
  },
  render: function render(_ref) {
    var children = _ref.children,
      rest = _objectWithoutProperties(_ref, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], _objectSpread(_objectSpread({}, rest), {}, {
      css: _CheckboxModule["default"],
      iconComponent: _Icon["default"],
      children: children
    }));
  }
});
var _default = exports["default"] = CheckboxBase;