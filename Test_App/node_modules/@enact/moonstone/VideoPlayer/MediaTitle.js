"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.MediaTitleBase = exports.MediaTitle = void 0;
var _ForwardRef = _interopRequireDefault(require("@enact/ui/ForwardRef"));
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _util = require("../internal/util");
var _Marquee = _interopRequireDefault(require("../Marquee"));
var _VideoPlayerModule = _interopRequireDefault(require("./VideoPlayer.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "childrenClassName", "id", "forwardRef", "title", "titleClassName"];
/**
 * MediaTitle {@link moonstone/VideoPlayer}.
 *
 * @class MediaTitle
 * @memberof moonstone/VideoPlayer
 * @ui
 * @private
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var MediaTitleBase = exports.MediaTitleBase = (0, _kind["default"])({
  name: 'MediaTitle',
  propTypes: /** @lends moonstone/VideoPlayer.MediaTitle.prototype */{
    /**
     * DOM id for the component. Also define ids for the title and node wrapping the `children`
     * in the forms `${id}_title` and `${id}_info`, respectively.
     *
     * @type {String}
     * @required
     * @public
     */
    id: _propTypes["default"].string.isRequired,
    /**
     * Anything supplied to `children` will be rendered. Typically this will be informational
     * badges indicating aspect ratio, audio channels, etc., but it could also be a description.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes["default"].node,
    /**
     * Forwards a reference to the MediaTitle component.
     *
     * @type {Function}
     * @private
     */
    forwardRef: _propTypes["default"].func,
    /**
     * Control whether the children (infoComponents) are displayed.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    infoVisible: _propTypes["default"].bool,
    /**
     * A title string to identify the media's title.
     *
     * @type {Node}
     * @public
     */
    title: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
    /**
     * Setting this to false effectively hides the entire component. Setting it to `false` after
     * the control has rendered causes a fade-out transition. Setting to `true` after or during
     * the transition makes the component immediately visible again, without delay or transition.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    // This property uniquely defaults to true, because it doesn't make sense to have it false
    // and have the control be initially invisible, and is named "visible" to match the other
    // props (current and possible future). Having an `infoVisible` and a `hidden` prop seems weird.
    visible: _propTypes["default"].bool
  },
  defaultProps: {
    infoVisible: false,
    visible: true
  },
  styles: {
    css: _VideoPlayerModule["default"],
    className: 'titleFrame'
  },
  computed: {
    childrenClassName: function childrenClassName(_ref) {
      var infoVisible = _ref.infoVisible,
        styler = _ref.styler;
      return styler.join('infoComponents', infoVisible ? 'visible' : 'hidden');
    },
    className: function className(_ref2) {
      var visible = _ref2.visible,
        styler = _ref2.styler;
      return styler.append(visible ? 'visible' : 'hidden');
    },
    titleClassName: function titleClassName(_ref3) {
      var infoVisible = _ref3.infoVisible,
        styler = _ref3.styler;
      return styler.join({
        title: true,
        infoVisible: infoVisible
      });
    }
  },
  render: function render(_ref4) {
    var children = _ref4.children,
      childrenClassName = _ref4.childrenClassName,
      id = _ref4.id,
      forwardRef = _ref4.forwardRef,
      title = _ref4.title,
      titleClassName = _ref4.titleClassName,
      rest = _objectWithoutProperties(_ref4, _excluded);
    delete rest.infoVisible;
    delete rest.visible;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
      id: id,
      ref: forwardRef,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Marquee["default"], {
        id: id + '_title',
        className: titleClassName,
        marqueeOn: "render",
        children: title
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        id: id + '_info',
        className: childrenClassName,
        children: ["  ", children]
      })]
    }));
  }
});
var MediaTitle = exports.MediaTitle = (0, _ForwardRef["default"])((0, _util.onlyUpdateForProps)(MediaTitleBase, ['children', 'title', 'infoVisible', 'visible']));
var _default = exports["default"] = MediaTitle;