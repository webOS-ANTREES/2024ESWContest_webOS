"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.OverlayBase = exports.Overlay = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _Touchable = _interopRequireDefault(require("@enact/ui/Touchable"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _util = require("../internal/util");
var _VideoPlayerModule = _interopRequireDefault(require("./VideoPlayer.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Overlay {@link moonstone/VideoPlayer}. This covers the Video piece of the
 * {@link moonstone/VideoPlayer} to prevent unnecessary VideoPlayer repaints due to mouse-moves.
 * It also acts as a container for overlaid elements, like the {@link moonstone/Spinner}.
 *
 * @class Overlay
 * @memberof moonstone/VideoPlayer
 * @ui
 * @private
 */
var OverlayBase = exports.OverlayBase = (0, _kind["default"])({
  name: 'Overlay',
  propTypes: /** @lends moonstone/VideoPlayer.Overlay.prototype */{
    bottomControlsVisible: _propTypes["default"].bool,
    children: _propTypes["default"].node
  },
  styles: {
    css: _VideoPlayerModule["default"],
    className: 'overlay'
  },
  computed: {
    className: function className(_ref) {
      var bottomControlsVisible = _ref.bottomControlsVisible,
        styler = _ref.styler;
      return styler.append(_defineProperty({}, 'high-contrast-scrim', bottomControlsVisible));
    }
  },
  render: function render(props) {
    delete props.bottomControlsVisible;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
  }
});
var Overlay = exports.Overlay = (0, _util.onlyUpdateForProps)((0, _Touchable["default"])(OverlayBase), ['bottomControlsVisible', 'children']);
var _default = exports["default"] = Overlay;