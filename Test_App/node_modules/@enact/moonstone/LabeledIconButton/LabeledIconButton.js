"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.LabeledIconButtonDecorator = exports.LabeledIconButtonBase = exports.LabeledIconButton = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _Spottable = _interopRequireDefault(require("@enact/spotlight/Spottable"));
var _LabeledIcon = require("@enact/ui/LabeledIcon");
var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _IconButton = require("../IconButton");
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _UiIconButton = require("../UiIconButton");
var _LabeledIconButtonModule = _interopRequireDefault(require("./LabeledIconButton.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["css", "flip", "icon", "selected", "data-webos-voice-disabled", "data-webos-voice-group-label", "data-webos-voice-intent", "data-webos-voice-label"];
/**
 * An {@link moonstone/Icon.Icon|Icon} that acts like a {@link moonstone/Button.Button|Button}
 * decorated with a label.
 *
 * You may specify an image or a font-based icon by setting the `icon` to either the path
 * to the image or a string from an {@link moonstone/Icon.IconBase.iconList|iconList}.
 *
 * @example
 * <LabeledIconButton icon="star" labelPosition="after">
 *   Favorite
 * </LabeledIconButton>
 *
 * @module moonstone/LabeledIconButton
 * @exports LabeledIconButton
 * @exports LabeledIconButtonBase
 * @exports LabeledIconButtonDecorator
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var IconButton = (0, _compose["default"])(_UiIconButton.IconButtonDecorator, _Spottable["default"], _Skinnable["default"])(_IconButton.IconButtonBase);

/**
 * An icon button component with a label.
 *
 * @class LabeledIconButtonBase
 * @memberof moonstone/LabeledIconButton
 * @extends ui/LabeledIcon.LabeledIconBase
 * @ui
 * @public
 */
var LabeledIconButtonBase = exports.LabeledIconButtonBase = (0, _kind["default"])({
  name: 'LabeledIconButton',
  propTypes: /** @lends moonstone/LabeledIconButton.LabeledIconButtonBase.prototype */{
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `labeledIconButton` - The root component class
     * * `icon` - The icon component class
     * * `label` - The label component class
     * * `large` - Applied to a `size='large'` button
     * * `selected` - Applied to a `selected` button
     * * `small` - Applied to a `size='small'` button
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,
    /**
     * Disables voice control.
     *
     * @type {Boolean}
     * @public
     */
    'data-webos-voice-disabled': _propTypes["default"].bool,
    /**
     * The voice control group label.
     *
     * @type {String}
     * @public
     */
    'data-webos-voice-group-label': _propTypes["default"].string,
    /**
     * The voice control intent.
     *
     * @type {String}
     * @public
     */
    'data-webos-voice-intent': _propTypes["default"].string,
    /**
     * The voice control label.
     *
     * @type {String}
     * @public
     */
    'data-webos-voice-label': _propTypes["default"].string,
    /**
     * Flip the icon horizontally, vertically or both.
     *
     * @type {('both'|'horizontal'|'vertical')}
     * @public
     */
    flip: _propTypes["default"].string,
    /**
     * The icon displayed within the button.
     *
     * @type {String}
     * @public
     */
    icon: _propTypes["default"].string,
    /**
     * Selects the component.
     *
     * Setting `selected` may be useful when the component represents a toggleable option. The
     * visual effect may be customized using the
     * {@link moonstone/LabeledIconButton.LabeledIconButtonBase.css|css} prop.
     *
     * @type {Boolean}
     * @public
     */
    selected: _propTypes["default"].bool
  },
  styles: {
    css: _LabeledIconButtonModule["default"],
    className: 'labeledIconButton',
    publicClassNames: ['labeledIconButton', 'icon', 'label', 'large', 'selected', 'small']
  },
  render: function render(_ref) {
    var css = _ref.css,
      flip = _ref.flip,
      icon = _ref.icon,
      selected = _ref.selected,
      voiceDisabled = _ref['data-webos-voice-disabled'],
      voiceGroupLabel = _ref['data-webos-voice-group-label'],
      voiceIntent = _ref['data-webos-voice-intent'],
      voiceLabel = _ref['data-webos-voice-label'],
      rest = _objectWithoutProperties(_ref, _excluded);
    return _LabeledIcon.LabeledIconBase.inline(_objectSpread(_objectSpread({}, rest), {}, {
      icon: /*#__PURE__*/(0, _jsxRuntime.jsx)(IconButton, {
        flip: flip,
        selected: selected,
        "data-webos-voice-disabled": voiceDisabled,
        "data-webos-voice-group-label": voiceGroupLabel,
        "data-webos-voice-intent": voiceIntent,
        "data-webos-voice-label": voiceLabel,
        children: icon
      }),
      css: css
    }));
  }
});

/**
 * Adds Moonstone specific behaviors to {@link moonstone/LabeledIconButton.LabeledIconButtonBase|LabeledIconButtonBase}.
 *
 * @hoc
 * @memberof moonstone/LabeledIconButton
 * @mixes ui/LabeledIcon.LabeledIconDecorator
 * @mixes moonstone/Skinnable.Skinnable
 * @public
 */
var LabeledIconButtonDecorator = exports.LabeledIconButtonDecorator = (0, _compose["default"])(_LabeledIcon.LabeledIconDecorator, _Pure["default"], _Skinnable["default"]);

/**
 * A Moonstone-styled icon button component with a label.
 *
 * Usage:
 * ```
 * <LabeledIconButton icon="star" labelPosition="after">
 *   Favorite
 * </LabeledIconButton>
 * ```
 *
 * @class LabeledIconButton
 * @memberof moonstone/LabeledIconButton
 * @extends moonstone/LabeledIconButton.LabeledIconButtonBase
 * @mixes moonstone/LabeledIconButton.LabeledIconButtonDecorator
 * @ui
 * @public
 */
var LabeledIconButton = exports.LabeledIconButton = LabeledIconButtonDecorator(LabeledIconButtonBase);
var _default = exports["default"] = LabeledIconButton;