"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SlotItemDecorator = exports.SlotItemBase = exports.SlotItem = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _Spottable = _interopRequireDefault(require("@enact/spotlight/Spottable"));
var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));
var _Item = require("@enact/ui/Item");
var _Toggleable = _interopRequireDefault(require("@enact/ui/Toggleable"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _Item2 = require("../Item");
var _Marquee = require("../Marquee");
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _UiSlotItem = require("../UiSlotItem");
var _SlotItemModule = _interopRequireDefault(require("./SlotItem.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Provides a Moonstone-themed item component that accepts multiple positions for children.
 *
 * Using the usual `children` prop, as well as two additional props: `slotBefore`, and `slotAfter`.
 * It is customizable by a theme or application.
 *
 * @example
 * <SlotItem autoHide="both">
 * 	<slotBefore>
 * 		<Icon>flag</Icon>
 * 		<Icon>star</Icon>
 * 	</slotBefore>
 * 	An Item that will show some icons before and after this text when spotted
 * 	<Icon slot="slotAfter">trash</Icon>
 * </SlotItem>
 *
 * @module moonstone/SlotItem
 * @exports SlotItem
 * @exports SlotItemBase
 * @exports SlotItemDecorator
 */ /**
 * A moonstone-styled SlotItem without any behavior.
 *
 * @class SlotItemBase
 * @memberof moonstone/SlotItem
 * @extends moonstone/UiSlotItem.SlotItemBase
 * @omit component
 * @mixes moonstone/Item.ItemBase
 * @ui
 * @public
 */
var SlotItemBase = exports.SlotItemBase = (0, _kind["default"])({
  name: 'SlotItem',
  propTypes: /** @lends moonstone/SlotItem.SlotItemBase.prototype */{
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `slotItem` - The root class name
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object
  },
  styles: {
    css: _SlotItemModule["default"],
    publicClassNames: ['slotItem', 'slot']
  },
  render: function render(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_UiSlotItem.SlotItemBase, _objectSpread(_objectSpread({}, props), {}, {
      component: _Item2.ItemBase,
      css: props.css
    }));
  }
});

/**
 * Moonstone-specific item with overlay behaviors to apply to SlotItem.
 *
 * @class SlotItemDecorator
 * @memberof moonstone/SlotItem
 * @mixes moonstone/UiSlotItem.SlotItemDecorator
 * @mixes ui/Toggleable.Toggleable
 * @mixes spotlight/Spottable.Spottable
 * @mixes moonstone/Marquee.MarqueeDecorator
 * @mixes moonstone/Skinnable.Skinnable
 * @hoc
 * @public
 */
var SlotItemDecorator = exports.SlotItemDecorator = (0, _compose["default"])(_UiSlotItem.SlotItemDecorator, _Pure["default"], (0, _Toggleable["default"])({
  prop: 'remeasure',
  activate: 'onFocus',
  deactivate: 'onBlur',
  toggle: null
}), _Item.ItemDecorator,
// (Touchable)
_Spottable["default"], (0, _Marquee.MarqueeDecorator)({
  css: _SlotItemModule["default"],
  invalidateProps: ['inline', 'autoHide', 'remeasure']
}), _Skinnable["default"]);

/**
 * A Moonstone-styled item with built-in support for overlays.
 *
 * ```
 *	<SlotItem autoHide="both">
 *		<slotBefore>
 *			<Icon>flag</Icon>
 *			<Icon>star</Icon>
 *		</slotBefore>
 *		An Item that will show some icons before and after this text when spotted
 *		<Icon slot="slotAfter">trash</Icon>
 *	</SlotItem>
 * ```
 *
 * @class SlotItem
 * @memberof moonstone/SlotItem
 * @extends moonstone/SlotItem.SlotItemBase
 * @mixes moonstone/SlotItem.SlotItemDecorator
 * @ui
 * @public
 */
var SlotItem = exports.SlotItem = SlotItemDecorator(SlotItemBase);
var _default = exports["default"] = SlotItem;