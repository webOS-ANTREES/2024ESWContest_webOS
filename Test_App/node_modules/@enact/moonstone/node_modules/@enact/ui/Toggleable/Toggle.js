"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Toggle = void 0;
var _handle = require("@enact/core/handle");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var isEnabled = (0, _handle.not)((0, _handle.forProp)('disabled', true));
var makeEvent = function makeEvent(config, value) {
  return _defineProperty({}, config.prop || 'selected', value);
};
var Toggle = exports.Toggle = /*#__PURE__*/function () {
  function Toggle(config) {
    _classCallCheck(this, Toggle);
    this.handleActivate = (0, _handle.handle)(isEnabled, (0, _handle.forwardCustom)('onToggle', function (ev, props) {
      return makeEvent(props, true);
    }), (0, _handle.returnsTrue)(function (ev, props, context) {
      return context.onToggle(true);
    })).bindAs(this, 'handleActivate');
    this.handleDeactivate = (0, _handle.handle)(isEnabled, (0, _handle.forwardCustom)('onToggle', function (ev, props) {
      return makeEvent(props, false);
    }), (0, _handle.returnsTrue)(function (ev, props, context) {
      return context.onToggle(false);
    })).bindAs(this, 'handleDeactivate');
    this.handleToggle = (0, _handle.handle)(isEnabled, (0, _handle.forwardCustom)('onToggle', function (ev, props, _ref2) {
      var value = _ref2.value;
      return makeEvent(props, !value);
    }), (0, _handle.returnsTrue)(function (ev, props, _ref3) {
      var onToggle = _ref3.onToggle,
        value = _ref3.value;
      return onToggle(!value);
    })).bindAs(this, 'handleToggle');
    // remapping to props for better compatibility with core/handle and binding
    this.props = config;
    this.context = {};
  }
  _createClass(Toggle, [{
    key: "setContext",
    value: function setContext(props, value, onToggle) {
      this.props = _objectSpread(_objectSpread({}, this.props), props);
      this.context.value = value;
      this.context.onToggle = onToggle;
    }
  }, {
    key: "value",
    get: function get() {
      return Boolean(this.context.value);
    }
  }]);
  return Toggle;
}();
var _default = exports["default"] = Toggle;