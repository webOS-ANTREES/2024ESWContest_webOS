"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _react2 = require("react");
var _Icon = _interopRequireDefault(require("../../Icon"));
var _Item = _interopRequireDefault(require("../../Item"));
var _SlotItem = _interopRequireDefault(require("../../SlotItem"));
var _ToggleItem = _interopRequireWildcard(require("../ToggleItem"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var SlottedItem = /*#__PURE__*/(0, _react2.forwardRef)(function (props, ref) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SlotItem["default"], _objectSpread(_objectSpread({}, props), {}, {
    component: _Item["default"],
    ref: ref
  }));
});
var tap = function tap(node) {
  _react.fireEvent.mouseDown(node);
  _react.fireEvent.mouseUp(node);
};
var CustomIcon = function CustomIcon(props) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon["default"], _objectSpread(_objectSpread({}, props), {}, {
    children: "star"
  }));
};
describe('ToggleItem Specs', function () {
  test('should call onToggle, onClick, or both when clicked', function () {
    var handleToggle = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], {
      component: SlottedItem,
      iconComponent: CustomIcon,
      onToggle: handleToggle,
      children: "ToggleItem"
    }));
    var toggleItem = _react.screen.getByText('star');
    tap(toggleItem);
    var expected = 1;
    expect(handleToggle).toHaveBeenCalledTimes(expected);
  });
  test('should call onClick when clicked', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleClick = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem.ToggleItemBase, {
      component: SlottedItem,
      iconComponent: CustomIcon,
      onClick: handleClick,
      children: "Toggle Item"
    }));
    var toggleItem = _react.screen.getByText('star');
    yield user.click(toggleItem);
    var expected = 1;
    expect(handleClick).toHaveBeenCalledTimes(expected);
  }));
  test('should call onTap when tapped', function () {
    var handleTap = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], {
      component: SlottedItem,
      iconComponent: CustomIcon,
      onTap: handleTap,
      children: "Toggle Item"
    }));
    var toggleItem = _react.screen.getByText('star');
    tap(toggleItem);
    var expected = 1;
    expect(handleTap).toHaveBeenCalledTimes(expected);
  });
  test('should call both onToggle and onTap when tapped', function () {
    var handleBoth = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], {
      component: SlottedItem,
      iconComponent: CustomIcon,
      onTap: handleBoth,
      onToggle: handleBoth,
      children: "Toggle Item"
    }));
    var toggleItem = _react.screen.getByText('star');
    tap(toggleItem);
    var expected = 2;
    expect(handleBoth).toHaveBeenCalledTimes(expected);
  });
  test('should receive its value prop in the onToggle handler', function () {
    var handleToggle = jest.fn();
    var value = 100;
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], {
      component: SlottedItem,
      iconComponent: CustomIcon,
      onToggle: handleToggle,
      value: value,
      children: "Toggle Item"
    }));
    var toggleItem = _react.screen.getByText('star');
    tap(toggleItem);
    var expected = value;
    var actual = handleToggle.mock.calls[0][0].value;
    expect(expected).toBe(actual);
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], {
      component: SlottedItem,
      iconComponent: CustomIcon,
      ref: ref,
      children: "Toggle Item"
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});