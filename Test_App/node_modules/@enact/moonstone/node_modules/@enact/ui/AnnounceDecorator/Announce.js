"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Announce = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var _class;
/**
 * An unstyled component with an imperative API to alert the user.
 *
 * The `announce()` method should be used to alert the user of behavior for accessibility.
 *
 * Example:
 * ```
 * import {Announce} from '@enact/ui/AnnounceDecorator';
 * import {Component} from 'react';
 *
 * class Example extends Component {
 *   notify = () => {
 *     if (this.announce) {
 *       this.announce.announce('this text will be alerted to user by TTS');
 *     }
 *   }
 *
 *   setAnnounceRef = (announce) => {
 *     this.announce = announce;
 *   }
 *
 *   render () {
 *     <div>
 *       <button onClick={this.notify}>Notify on Click</button>
 *       <Announce ref={this.setAnnounceRef} />
 *     </div>
 *   }
 * }
 * ```
 *
 * @class Announce
 * @ui
 * @memberof ui/AnnounceDecorator
 * @public
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var Announce = exports.Announce = (_class = /*#__PURE__*/function (_Component) {
  _inherits(Announce, _Component);
  var _super = _createSuper(Announce);
  function Announce() {
    var _this;
    _classCallCheck(this, Announce);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.resetAlert = function () {
      _this.alertTimeout = null;
      _this.alert.removeAttribute('aria-label');
    };
    /**
     * Call to update the message for the alert.
     *
     * @method
     * @param   {String}     message  Message to notify the user
     * @param   {Boolean}    clear    Clears a previous message before setting the new message
     * @returns {undefined}
     * @public
     */
    _this.announce = function (message) {
      var clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (clear) {
        _this.clearTimeout();
        _this.resetAlert();
      }
      if (_this.alert && !_this.alertTimeout && message) {
        _this.alert.setAttribute('aria-label', message);
        _this.alertTimeout = setTimeout(_this.resetAlert, _this.props.timeout);
      }
    };
    _this.setAlertRef = function (node) {
      _this.alert = node;
    };
    return _this;
  }
  _createClass(Announce, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearTimeout();
    }
  }, {
    key: "clearTimeout",
    value: function (_clearTimeout) {
      function clearTimeout() {
        return _clearTimeout.apply(this, arguments);
      }
      clearTimeout.toString = function () {
        return _clearTimeout.toString();
      };
      return clearTimeout;
    }(function () {
      if (this.alertTimeout) {
        clearTimeout(this.alertTimeout);
      }
    })
  }, {
    key: "render",
    value: function render() {
      var props = Object.assign({}, this.props);
      delete props.timeout;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("span", _objectSpread({
        ref: this.setAlertRef,
        role: "alert"
      }, props));
    }
  }]);
  return Announce;
}(_react.Component), _class.displayName = 'Announce', _class.propTypes = /** @lends ui/AnnounceDecorator.Announce.prototype */{
  /**
   * Time, in milliseconds, to wait to remove the alert message.
  	 * Subsequent updates to the
   * message before the timeout are ignored.
   *
   * @type {Number}
   * @default 500
   * @public
   */
  timeout: _propTypes["default"].number
}, _class.defaultProps = {
  // 500ms is somewhat arbitrary. Would like to do some further usability testing to determine
  // how frequently we should allow alerting. Should also consider if this timeout should be
  // "global" such that multiple instances of Announce respect each other.
  timeout: 500
}, _class);
var _default = exports["default"] = Announce;