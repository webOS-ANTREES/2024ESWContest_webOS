"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.BodyTextDecorator = exports.BodyTextBase = exports.BodyText = void 0;
var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes2 = _interopRequireDefault(require("prop-types"));
var _ForwardRef = _interopRequireDefault(require("../ForwardRef"));
var _BodyTextModule = _interopRequireDefault(require("./BodyText.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["component", "componentRef"];
/**
 * Text block component to be customized by a theme or application.
 *
 * @module ui/BodyText
 * @exports BodyText
 */
/**
 * A simple, unstyled text block component, without
 * {@link ui/BodyText.BodyTextDecorator|BodyTextDecorator} applied.
 *
 * @class BodyTextBase
 * @memberof ui/BodyText
 * @ui
 * @public
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var BodyTextBase = exports.BodyTextBase = (0, _kind["default"])({
  name: 'ui:BodyText',
  propTypes: /** @lends ui/BodyText.BodyTextBase.prototype */{
    /**
     * Centers the contents.
     *
     * Applies the `centered` CSS class which can be customized by
     * {@link /docs/developer-guide/theming/|theming}.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    centered: _propTypes2["default"].bool,
    /**
     * The type of component to use to render the item. May be a DOM node name (e.g 'div',
     * 'p', etc.) or a custom component.
     *
     * @type {Component}
     * @default 'p'
     * @public
     */
    component: _propTypes["default"].renderable,
    /**
     * Called with a reference to the root component.
     *
     * When using {@link ui/BodyText.BodyText}, the `ref` prop is forwarded to this component
     * as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `bodyText` - The root class name
     * * `centered` - Applied when `centered` prop is `true`
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object
  },
  defaultProps: {
    centered: false,
    component: 'p'
  },
  styles: {
    css: _BodyTextModule["default"],
    className: 'bodyText',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var centered = _ref.centered,
        styler = _ref.styler;
      return styler.append({
        centered: centered
      });
    }
  },
  render: function render(_ref2) {
    var Component = _ref2.component,
      componentRef = _ref2.componentRef,
      rest = _objectWithoutProperties(_ref2, _excluded);
    delete rest.centered;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _objectSpread({
      ref: componentRef
    }, rest));
  }
});

/**
 * Applies BodyText behaviors.
 *
 * @hoc
 * @memberof ui/BodyText
 * @mixes ui/ForwardRef.ForwardRef
 * @public
 */
var BodyTextDecorator = exports.BodyTextDecorator = (0, _ForwardRef["default"])({
  prop: 'componentRef'
});

/**
 * A simple, unstyled text block component.
 *
 * @class BodyText
 * @memberof ui/BodyText
 * @extends ui/BodyText.BodyTextBase
 * @mixes ui/BodyText.BodyTextDecorator
 * @omit componentRef
 * @ui
 * @public
 */
var BodyText = exports.BodyText = BodyTextDecorator(BodyTextBase);
var _default = exports["default"] = BodyText;