"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ToggleIconDecorator = exports.ToggleIconBase = exports.ToggleIcon = void 0;
var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes2 = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _ForwardRef = _interopRequireDefault(require("../ForwardRef"));
var _Toggleable = _interopRequireDefault(require("../Toggleable"));
var _Touchable = _interopRequireDefault(require("../Touchable"));
var _ToggleIconModule = _interopRequireDefault(require("./ToggleIcon.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "componentRef", "iconComponent", "iconClassName"];
/**
 * An unstyled icon component that handles interaction and toggles state between activated
 * and deactivated.
 *
 * Visually, it may be to be customized by a theme or application to represent any
 * state.
 *
 * @module ui/ToggleIcon
 * @exports ToggleIcon
 * @exports ToggleIconBase
 * @exports ToggleIconDecorator
 */
/**
 * Represents a Boolean state, and can accept any icon to toggle.
 *
 * @class ToggleIconBase
 * @memberof ui/ToggleIcon
 * @ui
 * @public
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var ToggleIconBase = exports.ToggleIconBase = (0, _kind["default"])({
  name: 'ui:ToggleIcon',
  propTypes: /** @lends ui/ToggleIcon.ToggleIconBase.prototype */{
    /**
     * The icon to use for this component.
     *
     * @see {@link ui/Icon.IconBase.children}
     * @type {String|Object}
     * @public
     */
    children: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
    /**
     * Called with a reference to the root component.
     *
     * When using {@link ui/ToggleIcon.ToggleIcon}, the `ref` prop is forwarded to this component
     * as `componentRef`.
     *
     * @type {Object|Function}
     * @public
     */
    componentRef: _propTypes["default"].ref,
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `toggleIcon` - The root class name
     * * `icon` - The background node of the button
     * * `selected` - Applied to a `selected` button
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,
    /**
     * Disables `ToggleIcon`.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes2["default"].bool,
    /**
    * CSS classes to be used on the Icon component
    *
    * @type {String}
    * @public
    */
    iconClasses: _propTypes2["default"].string,
    /**
     * The component used to render the icon.
     *
     * @type {String|Component}
     * @default 'div'
     * @public
     */
    iconComponent: _propTypes["default"].renderable,
    /**
     * Sets whether this control is in the 'on' or 'off' state. `true` for 'on', `false` for 'off'.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    selected: _propTypes2["default"].bool
  },
  defaultProps: {
    disabled: false,
    iconComponent: 'div',
    selected: false
  },
  styles: {
    css: _ToggleIconModule["default"],
    className: 'toggleIcon',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var selected = _ref.selected,
        styler = _ref.styler;
      return styler.append({
        selected: selected
      });
    },
    iconClassName: function iconClassName(_ref2) {
      var iconClasses = _ref2.iconClasses,
        css = _ref2.css;
      return iconClasses ? "".concat(css.icon, " ").concat(iconClasses) : css.icon;
    }
  },
  render: function render(_ref3) {
    var children = _ref3.children,
      componentRef = _ref3.componentRef,
      IconComponent = _ref3.iconComponent,
      iconClassName = _ref3.iconClassName,
      rest = _objectWithoutProperties(_ref3, _excluded);
    delete rest.selected;
    delete rest.iconClasses;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
      ref: componentRef,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(IconComponent, {
        className: iconClassName,
        children: children
      })
    }));
  }
});

/**
 * Adds support for the `onToggle` prop callback to be fired when the `onTap` (touch-safe `onClick`)
 * event executes.
 *
 * @class ToggleIconDecorator
 * @memberof ui/ToggleIcon
 * @mixes ui/ForwardRef.ForwardRef
 * @mixes ui/Toggleable.Toggleable
 * @mixes ui/Touchable.Touchable
 * @ui
 * @public
 */
var ToggleIconDecorator = exports.ToggleIconDecorator = (0, _compose["default"])((0, _ForwardRef["default"])({
  prop: 'componentRef'
}), (0, _Toggleable["default"])({
  toggleProp: 'onTap'
}), _Touchable["default"]);

/**
 * Represents a Boolean state, and can accept any icon to toggle.
 *
 * @class ToggleIcon
 * @memberof ui/ToggleIcon
 * @extends ui/ToggleIcon.ToggleIconBase
 * @mixes ui/ToggleIcon.ToggleIconDecorator
 * @omit componentRef
 * @ui
 * @public
 */
var ToggleIcon = exports.ToggleIcon = ToggleIconDecorator(ToggleIconBase);

/**
 * The handler to run when the component is toggled.
 *
 * @name onToggle
 * @memberof ui/ToggleIcon.ToggleIcon.prototype
 * @type {Function}
 * @param {Object} event
 * @param {String} event.selected - Selected value of item.
 * @public
 */
var _default = exports["default"] = ToggleIcon;