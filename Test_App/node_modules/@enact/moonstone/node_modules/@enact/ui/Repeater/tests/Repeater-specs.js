"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _Repeater = _interopRequireWildcard(require("../Repeater"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
describe('Repeater Specs', function () {
  var stringItems = ['One', 'Two', 'Three'];
  var objItems = stringItems.map(function (content, key) {
    return {
      key: key,
      content: content
    };
  });
  var CustomRootType = function CustomRootType(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
  };
  var CustomType = function CustomType(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: props.content
    });
  };
  test('should have a root span element', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 'SPAN';
    var rootElementName = _react.screen.getByTestId('repeater').nodeName;
    expect(rootElementName).toBe(expected);
  });
  test('should accept a nodeName as root element', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      component: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 'DIV';
    var rootElementName = _react.screen.getByTestId('repeater').nodeName;
    expect(rootElementName).toBe(expected);
  });
  test('should accept a function as root element', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      component: CustomRootType,
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 'DIV';
    var rootElementName = _react.screen.getByTestId('repeater').nodeName;
    expect(rootElementName).toBe(expected);
  });
  test('should accept a nodeName as childComponent', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 3;
    var actual = _react.screen.getByTestId('repeater').children.length;
    expect(actual).toBe(expected);
  });
  test('should accept a function as childComponent', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: CustomType,
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 3;
    var actual = _react.screen.getByTestId('repeater').children.length;
    expect(actual).toBe(expected);
  });
  test('should create a number of children matching the length of items', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = stringItems.length;
    var actual = _react.screen.getByTestId('repeater').children.length;
    expect(actual).toBe(expected);
  });
  test('should support an array of objects as items', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: CustomType,
      "data-testid": "repeater",
      children: objItems
    }));
    var expected = objItems.length;
    var actual = _react.screen.getByTestId('repeater').children.length;
    expect(actual).toBe(expected);
  });
  test('should support passing itemProps to children', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      itemProps: {
        title: 'test'
      },
      children: stringItems
    }));
    var expected = 'test';
    var actual = _react.screen.getByTestId('repeater').children.item(0);
    expect(actual).toHaveAttribute('title', expected);
  });
  test('should pass index to each child', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = '0';
    var actual = _react.screen.getByTestId('repeater').children.item(0);
    expect(actual).toHaveAttribute('data-index', expected);
  });
  test('should pass data to each child', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      childProp: "data-str",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = stringItems[0];
    var actual = _react.screen.getByTestId('repeater').children.item(0);
    expect(actual).toHaveAttribute('data-str', expected);
  });
  test('should pass item as children to each child', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = stringItems[0];
    var actual = _react.screen.getByTestId('repeater').children.item(0);
    expect(actual).toHaveTextContent(expected);
  });
  test('should set role to list by default', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      children: stringItems
    }));
    var expected = 'list';
    var listElement = _react.screen.getByTestId('repeater');
    expect(listElement).toHaveAttribute('role', expected);
  });
  test('should allow role to be overridden', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater.RepeaterBase, {
      childComponent: "div",
      "data-testid": "repeater",
      role: "listbox",
      children: stringItems
    }));
    var expected = 'listbox';
    var listElement = _react.screen.getByTestId('repeater');
    expect(listElement).toHaveAttribute('role', expected);
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Repeater["default"], {
      childComponent: "div",
      component: "div",
      ref: ref,
      children: stringItems
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});