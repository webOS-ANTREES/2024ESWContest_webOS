"use strict";

var _container4 = require("../container");
var _spotlight = _interopRequireDefault(require("../spotlight"));
var _utils = require("./utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var nonSpottable = function nonSpottable() {
  return (0, _utils.node)({
    className: 'other'
  });
};
var scenarios = {
  complexTree: (0, _utils.join)((0, _utils.spottable)({
    'data-spotlight-id': 's1'
  }), (0, _utils.spottable)(nonSpottable()), (0, _utils.container)(_defineProperty(_defineProperty({}, _container4.containerAttribute, 'first-container'), "children", (0, _utils.join)((0, _utils.someSpottables)(2), (0, _utils.container)(_defineProperty(_defineProperty({}, _container4.containerAttribute, 'second-container'), "children", (0, _utils.join)((0, _utils.spottable)({
    id: 'secondContainerFirstSpottable'
  }), (0, _utils.someSpottables)(2), (0, _utils.container)(_defineProperty(_defineProperty(_defineProperty({}, _container4.containerAttribute, 'third-container'), 'data-spotlight-container-disabled', true), "children", (0, _utils.join)((0, _utils.someSpottables)(4), (0, _utils.node)({
    id: 'child-of-third'
  })))))))))))
};
var setupContainers = function setupContainers() {
  _spotlight["default"].setPointerMode(false);
  (0, _container4.configureDefaults)({
    selector: '.spottable'
  });
  (0, _container4.configureContainer)(_container4.rootContainerId);
  (0, _container4.setLastContainer)(_container4.rootContainerId);
};
var teardownContainers = function teardownContainers() {
  // clean up any containers we create for safe tests
  (0, _container4.removeAllContainers)();
};
var mockFocus = function mockFocus(n) {
  var fn = jest.fn().mockImplementation(function () {
    return true;
  });
  Object.defineProperty(n, 'focus', {
    get: function get() {
      return fn;
    }
  });
  return fn;
};
describe('Spotlight', function () {
  describe('#focus', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should focus spottable by id', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var fn = mockFocus(root.querySelector('[data-spotlight-id="s1"]'));
      _spotlight["default"].focus('s1');
      expect(fn).toBeCalled();
    }));
    test('should focus container by id', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container4.configureContainer)('first-container');
      var fn = mockFocus(root.querySelector('[data-spotlight-id="first-container"] > .spottable'));
      _spotlight["default"].focus('first-container');
      expect(fn).toBeCalled();
    }));
    test('should focus spottable by node', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var n = root.querySelector('[data-spotlight-id="s1"]');
      var fn = mockFocus(n);
      _spotlight["default"].focus(n);
      expect(fn).toBeCalled();
    }));
    test('should focus container by node', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container4.configureContainer)('first-container');
      var n = root.querySelector('[data-spotlight-id="first-container"]');
      var fn = mockFocus(n.querySelector('.spottable'));
      _spotlight["default"].focus(n);
      expect(fn).toBeCalled();
    }));
    test('should focus spottable by selector', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      var n = root.querySelector('[data-spotlight-id="s1"]');
      var fn = mockFocus(n);
      _spotlight["default"].focus('[data-spotlight-id="s1"]');
      expect(fn).toBeCalled();
    }));
    test('should focus container by selector', (0, _utils.testScenario)(scenarios.complexTree, function (root) {
      (0, _container4.configureContainer)('first-container');
      var n = root.querySelector('[data-spotlight-id="first-container"]');
      var fn = mockFocus(n.querySelector('.spottable'));
      _spotlight["default"].focus('[data-spotlight-id="first-container"]');
      expect(fn).toBeCalled();
    }));
  });
  describe('#move', function () {
    beforeEach(setupContainers);
    afterEach(teardownContainers);
    test('should return false when the direction is not one of \'left\', \'right\', \'up\' or \'down\'', (0, _utils.testScenario)(scenarios.complexTree, function () {
      var actual = _spotlight["default"].move('leeeft');
      expect(actual).toBe(false);
    }));
  });
  describe('#initialize', function () {
    beforeEach(function () {
      jest.spyOn(window, 'addEventListener').mockImplementationOnce(function () {});
    });
    afterEach(function () {
      window.addEventListener.mockRestore();
    });
    test('should register event listener of several event types', function () {
      _spotlight["default"].initialize();
      expect(window.addEventListener).toBeCalledWith('blur', expect.any(Function));
      expect(window.addEventListener).toBeCalledWith('focus', expect.any(Function));
      expect(window.addEventListener).toBeCalledWith('keydown', expect.any(Function));
      expect(window.addEventListener).toBeCalledWith('keyup', expect.any(Function));
      expect(window.addEventListener).toBeCalledWith('mouseover', expect.any(Function));
      expect(window.addEventListener).toBeCalledWith('mousemove', expect.any(Function));
    });
  });
  describe('#terminate', function () {
    beforeEach(function () {
      jest.spyOn(window, 'removeEventListener').mockImplementationOnce(function () {});
    });
    afterEach(function () {
      window.removeEventListener.mockRestore();
    });
    test('should remove event listener of several event types', function () {
      _spotlight["default"].terminate();
      expect(window.removeEventListener).toBeCalledWith('blur', expect.any(Function));
      expect(window.removeEventListener).toBeCalledWith('focus', expect.any(Function));
      expect(window.removeEventListener).toBeCalledWith('keydown', expect.any(Function));
      expect(window.removeEventListener).toBeCalledWith('keyup', expect.any(Function));
      expect(window.removeEventListener).toBeCalledWith('mouseover', expect.any(Function));
      expect(window.removeEventListener).toBeCalledWith('mousemove', expect.any(Function));
    });
  });
});