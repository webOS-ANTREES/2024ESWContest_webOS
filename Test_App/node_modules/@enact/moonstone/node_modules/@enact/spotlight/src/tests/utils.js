"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testScenario = exports.spottable = exports.someSpottablesAndContainers = exports.someSpottables = exports.someNodes = exports.someContainers = exports.node = exports.join = exports.generateContainerId = exports.container = void 0;
var _ramda = _interopRequireDefault(require("ramda"));
var _container = require("../container");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var join = exports.join = _ramda["default"].unapply(_ramda["default"].join('\n'));
var testScenario = exports.testScenario = function testScenario(scenario, callback) {
  return function () {
    var rootId = 'test-root';
    var html = join("<div id=\"".concat(rootId, "\">"), scenario, '</div>');
    document.body.innerHTML = html;
    var root = document.getElementById(rootId);
    try {
      callback(root);
    } catch (e) {
      console.log(html); // eslint-disable-line no-console
      throw e;
    }
  };
};
var _id = 1;
var generateContainerId = exports.generateContainerId = function generateContainerId() {
  return "".concat(_container.containerAttribute, "=").concat(_id++);
};
var coerceProps = function coerceProps(v) {
  if (typeof v === 'object') {
    return v;
  } else if (typeof v !== 'undefined') {
    return {
      children: v
    };
  }
};
var node = exports.node = function node(props) {
  var children = '';
  var attributes = '';
  var tag = 'div';
  Object.keys(props).forEach(function (key) {
    if (key === 'children') {
      children = props.children;
    } else if (key === 'tag') {
      tag = props[key];
    } else if (key === 'valueOnlyAttribute') {
      attributes += "".concat(props[key], " ");
    } else {
      var value = props[key];
      if (key === 'className') key = 'class';
      attributes += "".concat(key, "=\"").concat(value, "\" ");
    }
  });
  return "<".concat(tag, " ").concat(attributes, ">").concat(children, "</").concat(tag, ">");
};
var spottable = exports.spottable = function spottable(props) {
  return node(_objectSpread({
    className: 'spottable'
  }, coerceProps(props)));
};
var container = exports.container = function container(props) {
  return node(_objectSpread(_defineProperty(_defineProperty({}, _container.containerAttribute, _id++), 'data-spotlight-container', true), coerceProps(props)));
};

// eslint-disable-next-line react-hooks/rules-of-hooks
var someNodes = exports.someNodes = _ramda["default"].useWith(_ramda["default"].compose(_ramda["default"].join('\n'), _ramda["default"].map), [_ramda["default"].identity, _ramda["default"].range(0)]);
var someSpottables = exports.someSpottables = someNodes(spottable);
var someContainers = exports.someContainers = someNodes(container);
var someSpottablesAndContainers = exports.someSpottablesAndContainers = _ramda["default"].converge(_ramda["default"].concat, [someSpottables, someContainers]);