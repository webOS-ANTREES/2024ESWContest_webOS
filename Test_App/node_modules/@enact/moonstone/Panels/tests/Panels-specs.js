"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _Panels = require("../Panels");
var _jsxRuntime = require("react/jsx-runtime");
describe('Panels Specs', function () {
  test('should render application close button when \'noCloseButton\' is not specified', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels.Panels, {}));
    var applicationCloseButton = _react.screen.getByRole('button');
    var applicationCloseIcon = _react.screen.getByRole('button').lastElementChild.children.item(0);
    expect(applicationCloseButton).toBeInTheDocument();
    expect(applicationCloseIcon).toHaveClass('icon');
  });
  test('should not render application close button when \'noCloseButton\' is set to true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels.Panels, {
      noCloseButton: true
    }));
    var applicationCloseButton = _react.screen.queryByRole('button');
    expect(applicationCloseButton).not.toBeInTheDocument();
  });
  test('should call onApplicationClose when application close button is clicked', function () {
    var handleAppClose = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels.Panels, {
      onApplicationClose: handleAppClose
    }));
    var applicationCloseButton = _react.screen.getByRole('button');
    _react.fireEvent.click(applicationCloseButton);
    expect(handleAppClose).toHaveBeenCalled();
  });
  test('should set application close button "aria-label" to closeButtonAriaLabel', function () {
    var label = 'custom close button label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels.Panels, {
      closeButtonAriaLabel: label
    }));
    var applicationCloseButton = _react.screen.getByRole('button');
    expect(applicationCloseButton).toHaveAttribute('aria-label', label);
  });
  test('should set {autoFocus} on child to "default-element" on first render', function () {
    var DivPanel = function DivPanel(_ref) {
      var autoFocus = _ref.autoFocus,
        id = _ref.id;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "data-testid": "panel",
        id: id,
        children: autoFocus
      });
    };
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels.Panels, {
      index: 0,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {})
    }));
    var expected = 'default-element';
    var actual = _react.screen.getByTestId('panel').textContent;
    expect(actual).toBe(expected);
  });
  test('should set {autoFocus} on child to "default-element" when navigating to a higher index', function () {
    var DivPanel = function DivPanel(_ref2) {
      var autoFocus = _ref2.autoFocus,
        id = _ref2.id;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "data-testid": "panel",
        id: id,
        children: autoFocus
      });
    };
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels.Panels, {
        index: 0,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {
          id: "p2"
        })]
      })),
      rerender = _render.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels.Panels, {
      index: 1,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {
        id: "p2"
      })]
    }));
    var expected = 'default-element';
    var actual = _react.screen.getAllByTestId('panel')[0].textContent;
    expect(actual).toBe(expected);
  });
  test('should not set {autoFocus} on child when navigating to a higher index when it has an autoFocus prop set', function () {
    var DivPanel = function DivPanel(_ref3) {
      var autoFocus = _ref3.autoFocus,
        id = _ref3.id;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "data-testid": "panel",
        id: id,
        children: autoFocus
      });
    };
    var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels.Panels, {
        index: 0,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {
          autoFocus: "last-focused",
          id: "p2"
        })]
      })),
      rerender = _render2.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels.Panels, {
      index: 1,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {
        autoFocus: "last-focused",
        id: "p2"
      })]
    }));
    var expected = 'last-focused';
    var panel = _react.screen.getAllByTestId('panel')[0];
    expect(panel.textContent).toBe(expected);
    expect(panel.id).toBe('p2');
  });
  describe('computed', function () {
    describe('childProps', function () {
      test('should not add aria-owns when noCloseButton is true and no controls', function () {
        var id = 'id';
        var childProps = {};
        var props = {
          childProps: childProps,
          noCloseButton: true,
          id: id
        };
        var expected = childProps;
        var actual = _Panels.PanelsBase.computed.childProps(props);
        expect(actual).toBe(expected);
      });
      test('should not add aria-owns when id is not set', function () {
        var childProps = {};
        var props = {
          childProps: childProps,
          noCloseButton: false
        };
        var expected = childProps;
        var actual = _Panels.PanelsBase.computed.childProps(props);
        expect(actual).toBe(expected);
      });
      test('should add aria-owns', function () {
        var id = 'id';
        var childProps = {};
        var props = {
          childProps: childProps,
          noCloseButton: false,
          id: id
        };
        var expected = "".concat(id, "-controls");
        var actual = _Panels.PanelsBase.computed.childProps(props)['aria-owns'];
        expect(actual).toBe(expected);
      });
      test('should append aria-owns', function () {
        var id = 'id';
        var ariaOwns = ':allthethings:';
        var childProps = {
          'aria-owns': ariaOwns
        };
        var props = {
          childProps: childProps,
          noCloseButton: false,
          id: id
        };
        var expected = "".concat(ariaOwns, " ").concat(id, "-controls");
        var actual = _Panels.PanelsBase.computed.childProps(props)['aria-owns'];
        expect(actual).toBe(expected);
      });
      test('should append aria-owns with noCloseButton and controls', function () {
        var id = 'id';
        var ariaOwns = ':allthethings:';
        var childProps = {
          'aria-owns': ariaOwns
        };
        var props = {
          childProps: childProps,
          controls: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            children: "Hello"
          }),
          noCloseButton: true,
          id: id
        };
        var expected = "".concat(ariaOwns, " ").concat(id, "-controls");
        var actual = _Panels.PanelsBase.computed.childProps(props)['aria-owns'];
        expect(actual).toBe(expected);
      });
    });
  });
});