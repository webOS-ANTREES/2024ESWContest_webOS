"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _$L = _interopRequireDefault(require("../internal/$L"));
var _IconButton = _interopRequireDefault(require("../IconButton"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["backgroundOpacity", "onApplicationClose"];
/**
 * An {@link moonstone/ApplicationCloseButton.ApplicationCloseButton} with `closex` icon. It is used in
 * {@link moonstone/Panels.Panels} positioned at the top right corner.
 * `onApplicationClose` callback function should be specified to close your app. The recommended
 * action to take with the event is `window.close()`, but you may also want to also do operations
 * like save user work or close database connections.
 *
 * @class ApplicationCloseButton
 * @memberof moonstone/Panels
 * @private
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var ApplicationCloseButton = (0, _kind["default"])({
  name: 'ApplicationCloseButton',
  propTypes: /** @lends moonstone/Panels.ApplicationCloseButton.prototype */{
    /**
    * Sets the hint string read when focusing the application close button.
    *
    * @type {String}
    * @default 'Exit app'
    * @memberof moonstone/Panels.ApplicationCloseButton.prototype
    * @public
    */
    'aria-label': _propTypes["default"].string,
    /**
     * The background-color opacity of this button; valid values are 'translucent'`,
     * `'lightTranslucent'` and `'transparent'`.
     *
     * @type {String}
     * @default 'transparent'
     * @public
     */
    backgroundOpacity: _propTypes["default"].oneOf(['translucent', 'lightTranslucent', 'transparent']),
    /**
     * A function to run when app close button is clicked
     *
     * @type {Function}
     */
    onApplicationClose: _propTypes["default"].func
  },
  defaultProps: {
    backgroundOpacity: 'transparent'
  },
  computed: {
    'aria-label': function ariaLabel(_ref) {
      var _ariaLabel = _ref['aria-label'];
      return _ariaLabel == null ? (0, _$L["default"])('Exit app') : _ariaLabel;
    }
  },
  render: function render(_ref2) {
    var backgroundOpacity = _ref2.backgroundOpacity,
      onApplicationClose = _ref2.onApplicationClose,
      rest = _objectWithoutProperties(_ref2, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton["default"], _objectSpread(_objectSpread({}, rest), {}, {
      backgroundOpacity: backgroundOpacity,
      onTap: onApplicationClose,
      size: "small",
      children: "closex"
    }));
  }
});
var _default = exports["default"] = ApplicationCloseButton;