"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ControlsBase = exports.Controls = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _SpotlightContainerDecorator = _interopRequireDefault(require("@enact/spotlight/SpotlightContainerDecorator"));
var _ForwardRef = _interopRequireDefault(require("@enact/ui/ForwardRef"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ApplicationCloseButton = _interopRequireDefault(require("./ApplicationCloseButton"));
var _PanelsModule = _interopRequireDefault(require("./Panels.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "closeButtonAriaLabel", "closeButtonBackgroundOpacity", "forwardRef", "noCloseButton", "onApplicationClose"];
/**
 * Group of controls shared across Panel instances
 *
 * @class ControlsBase
 * @memberof moonstone/Panels
 * @ui
 * @private
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var ControlsBase = exports.ControlsBase = (0, _kind["default"])({
  name: 'Controls',
  propTypes: /** @lends moonstone/Panels.ControlsBase.prototype */{
    /**
     * Additional controls displayed before the close button.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes["default"].node,
    /**
     * Sets the hint string read when focusing the application close button.
     *
     * @type {String}
     * @public
     */
    closeButtonAriaLabel: _propTypes["default"].string,
    /**
     * The background opacity of the application close button.
     *
     * * Values: `'translucent'`, `'lightTranslucent'`, `'transparent'`
     *
     * @type {String}
     * @public
     */
    closeButtonBackgroundOpacity: _propTypes["default"].oneOf(['translucent', 'lightTranslucent', 'transparent']),
    /**
     * Called with a reference to the root DOM node of this component.
     *
     * @type {Function|Object}
     * @public
     */
    forwardRef: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].shape({
      current: _propTypes["default"].any
    })]),
    /**
     * Indicates the close button will not be rendered on the top right corner.
     *
     * @type {Boolean}
     * @public
     */
    noCloseButton: _propTypes["default"].bool,
    /**
     * Called when the app close button is clicked.
     *
     * @type {Function}
     * @public
     */
    onApplicationClose: _propTypes["default"].func
  },
  styles: {
    css: _PanelsModule["default"],
    className: 'controls'
  },
  render: function render(_ref) {
    var children = _ref.children,
      closeButtonAriaLabel = _ref.closeButtonAriaLabel,
      closeButtonBackgroundOpacity = _ref.closeButtonBackgroundOpacity,
      forwardRef = _ref.forwardRef,
      noCloseButton = _ref.noCloseButton,
      onApplicationClose = _ref.onApplicationClose,
      rest = _objectWithoutProperties(_ref, _excluded);
    if (!children && noCloseButton) return null;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
      ref: forwardRef,
      children: [children, noCloseButton ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(_ApplicationCloseButton["default"], {
        "aria-label": closeButtonAriaLabel,
        backgroundOpacity: closeButtonBackgroundOpacity,
        className: _PanelsModule["default"].close,
        onApplicationClose: onApplicationClose
      })]
    }));
  }
});

/**
 * Group of controls shared across Panel instances.
 *
 * ```
 * // remove the close button and use a star icon button
 * <Controls noCloseButton>
 *   <IconButton>star</IconButton>
 * </Controls>
 * ```
 *
 * @class Controls
 * @mixes spotlight/SpotlightContainerDecorator
 * @memberof moonstone/Panels
 * @ui
 * @private
 */
var Controls = exports.Controls = (0, _ForwardRef["default"])((0, _SpotlightContainerDecorator["default"])(ControlsBase));
var _default = exports["default"] = Controls;