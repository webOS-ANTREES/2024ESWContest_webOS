"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _ExpandableItem = require("../ExpandableItem");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
describe('ExpandableItem', function () {
  var children = ['option1', 'option2', 'option3'];
  describe('computed', function () {
    describe('label', function () {
      test('should use noneText when label is not set', function () {
        var expected = 'noneText';
        var actual = _ExpandableItem.ExpandableItemBase.computed.label({
          noneText: 'noneText'
        });
        expect(actual).toBe(expected);
      });
      test('should use label when set', function () {
        var expected = 'label';
        var actual = _ExpandableItem.ExpandableItemBase.computed.label({
          label: 'label',
          noneText: 'noneText'
        });
        expect(actual).toBe(expected);
      });
    });
    describe('open', function () {
      test('should be false when disabled', function () {
        var expected = false;
        var actual = _ExpandableItem.ExpandableItemBase.computed.open({
          disabled: true,
          open: true
        });
        expect(actual).toBe(expected);
      });
    });
    describe('handlers', function () {
      test('should call onClose when there is a prop onClose', /*#__PURE__*/_asyncToGenerator(function* () {
        var handleClose = jest.fn();
        var user = _userEvent["default"].setup();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableItem.ExpandableItemBase, {
          noneText: "hello",
          onClose: handleClose,
          open: true,
          title: "Item",
          children: children
        }));
        var item = _react.screen.getByText('Item');
        yield user.click(item);
        var expected = 1;
        expect(handleClose).toHaveBeenCalledTimes(expected);
      }));
      test('should call onOpen when there is a prop onOpen', /*#__PURE__*/_asyncToGenerator(function* () {
        var handleOpen = jest.fn();
        var user = _userEvent["default"].setup();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableItem.ExpandableItemBase, {
          noneText: "hello",
          onOpen: handleOpen,
          title: "Item",
          children: children
        }));
        var item = _react.screen.getByText('Item');
        yield user.click(item);
        var expected = 1;
        expect(handleOpen).toHaveBeenCalledTimes(expected);
      }));
    });
  });
  describe('Voice Control', function () {
    test('should set "data-webos-voice-disabled" to LabeledItem when voice control is disabled', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableItem.ExpandableItemBase, {
        "data-testid": "Item",
        "data-webos-voice-disabled": true,
        title: "Item",
        children: children
      }));
      var item = _react.screen.getByTestId('Item').firstElementChild;
      var expectedAttribute = 'data-webos-voice-disabled';
      var expectedValue = 'true';
      expect(item).toHaveAttribute(expectedAttribute, expectedValue);
    });
  });
});