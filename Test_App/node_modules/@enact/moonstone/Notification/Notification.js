"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.NotificationBase = exports.Notification = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Slottable = _interopRequireDefault(require("@enact/ui/Slottable"));
var _Popup = _interopRequireDefault(require("../Popup"));
var _NotificationModule = _interopRequireDefault(require("./Notification.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["buttons", "children", "css"];
/**
 * Moonstone-styled Notification components.
 *
 * @module moonstone/Notification
 * @exports Notification
 * @exports NotificationBase
 */
// ENYO-5691: Workaround to fix a text rendering issue by aligning the content to the pixel grid
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var fixTransform = function fixTransform(node) {
  if (!node) return;
  var parent = node.parentNode;
  var _parent$getBoundingCl = parent.getBoundingClientRect(),
    left = _parent$getBoundingCl.left,
    top = _parent$getBoundingCl.top;
  var deltaY = Math.round(top) - top;
  var deltaX = Math.round(left) - left;
  if (deltaY !== 0 || deltaX !== 0) {
    // on webOS, the layer promotion is necessary to resolve the text rendering issue
    parent.style.transform = "translate3d(".concat(deltaX, "px, ").concat(deltaY, "px, 0)");
    parent.style.willChange = 'transform';
  }
};

/**
 * A Moonstone styled notification component.
 *
 * It provides a notification modal which can be opened and closed, overlaying an app. Apps will
 * want to use {@link moonstone/Notification.Notification|Notification}.
 *
 * @class NotificationBase
 * @memberof moonstone/Notification
 * @ui
 * @public
 */
var NotificationBase = exports.NotificationBase = (0, _kind["default"])({
  name: 'Notification',
  propTypes: /** @lends moonstone/Notification.NotificationBase.prototype */{
    /**
     * Buttons for the Notification.
     *
     * These typically close or take action in the Notification. Buttons must have their
     * `size` property set to `'small'` and will be coerced to `'small'` if not specified.
     *
     * @type {Element|Element[]}
     * @public
     */
    buttons: _propTypes["default"].oneOfType([_propTypes["default"].element, _propTypes["default"].arrayOf(_propTypes["default"].element)]),
    /**
     * The contents for the body of the Notification.
     *
     * @type {Node}
     * @public
     */
    children: _propTypes["default"].node,
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `notification` - The root class name
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,
    /**
     * Indicates that the notification will not trigger `onClose` when the user presses the cancel/back (e.g. `ESC`) key or
     * taps outside the notification.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    noAutoDismiss: _propTypes["default"].bool,
    /**
     * Called when a closing action is invoked by the user.
     *
     * These actions include pressing *ESC* key or clicking on the close button. It is the
     * responsibility of the callback to set the `open` state to `false`.
     *
     * @type {Function}
     * @public
     */
    onClose: _propTypes["default"].func,
    /**
     * Controls the visibility of the Notification.
     *
     * By default, the Notification and its contents are not rendered until `open`.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    open: _propTypes["default"].bool,
    /**
     * Determines the technique used to cover the screen when the notification is present.
     *
     * * Values: `'transparent'`, `'translucent'`, or `'none'`.
     *
     * @type {String}
     * @default 'transparent'
     * @public
     */
    scrimType: _propTypes["default"].oneOf(['transparent', 'translucent', 'none'])
  },
  defaultProps: {
    open: false,
    scrimType: 'transparent'
  },
  styles: {
    css: _NotificationModule["default"],
    className: 'notification',
    publicClassNames: ['notification']
  },
  computed: {
    className: function className(_ref) {
      var buttons = _ref.buttons,
        styler = _ref.styler;
      return styler.append({
        wide: buttons && _react.Children.toArray(buttons).filter(Boolean).length > 2
      });
    },
    buttons: function buttons(_ref2) {
      var _buttons = _ref2.buttons;
      return _react.Children.map(_buttons, function (button) {
        if (button && button.props && !button.props.small) {
          return /*#__PURE__*/(0, _react.cloneElement)(button, {
            size: 'small'
          });
        } else {
          return button;
        }
      });
    }
  },
  render: function render(_ref3) {
    var buttons = _ref3.buttons,
      children = _ref3.children,
      css = _ref3.css,
      rest = _objectWithoutProperties(_ref3, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Popup["default"], _objectSpread(_objectSpread({
      noAnimation: true
    }, rest), {}, {
      css: css,
      shrinkBody: true,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: css.notificationBody,
        ref: fixTransform,
        children: children
      }), buttons ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: css.buttons,
        children: buttons
      }) : null]
    }));
  }
});

/**
 * A Moonstone styled modal component with a message, and an area for additional controls.
 *
 * @class Notification
 * @memberof moonstone/Notification
 * @mixes ui/Slottable.Slottable
 * @ui
 * @public
 */
var Notification = exports.Notification = (0, _Slottable["default"])({
  slots: ['buttons']
}, NotificationBase);
var _default = exports["default"] = Notification;