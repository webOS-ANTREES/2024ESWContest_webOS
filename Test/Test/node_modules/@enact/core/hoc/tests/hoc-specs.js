"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _hoc = _interopRequireDefault(require("../hoc"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /* eslint-disable enact/display-name */
describe('hoc', function () {
  var data;
  var testID = 'test-HoC';
  var defaultConfig = {
    color: 'blue'
  };
  var HoC = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
    data = Wrapped;
    return function (props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread(_objectSpread({}, props), config), {}, {
        "data-testid": testID
      }));
    };
  });
  var NullHoC = (0, _hoc["default"])(null, function (config, Wrapped) {
    return function () {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, config), {}, {
        "data-testid": testID
      }));
    };
  });
  test('should support HoC factory function as first argument to hoc()', function () {
    var ImplicitNullHoC = (0, _hoc["default"])(function (config, Wrapped) {
      return function () {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, config), {}, {
          "data-testid": testID
        }));
      };
    });
    var Component = ImplicitNullHoC('span');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var component = _react.screen.getByTestId(testID);
    var expected = 'SPAN';
    var actual = component.nodeName;
    expect(actual).toBe(expected);
  });
  test('should support DOM node name as first argument to HoC', function () {
    var Component = HoC('span');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var component = _react.screen.getByTestId(testID);
    var expected = 'SPAN';
    var actual = component.nodeName;
    expect(actual).toBe(expected);
  });
  test('should support React component as first argument to HoC', function () {
    function Thing() {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "data-testid": testID
      });
    }
    var Component = HoC(Thing);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var component = _react.screen.getByTestId(testID);
    var expected = 'DIV';
    var actual = component.nodeName;
    var actualWrapped = data;
    expect(actual).toBe(expected);
    expect(actualWrapped).toBe(Thing);
  });
  test('should use default config when instance config is omitted', function () {
    var Component = HoC('span');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var component = _react.screen.getByTestId(testID);
    var expectedAttribute = 'color';
    var expectedValue = defaultConfig.color;
    expect(component).toHaveAttribute(expectedAttribute, expectedValue);
  });
  test('should overwrite default config with instance config', function () {
    var instanceConfig = {
      color: 'green'
    };
    var Component = HoC(instanceConfig, 'div');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var component = _react.screen.getByTestId(testID);
    var expectedAttribute = 'color';
    var expectedValue = instanceConfig.color;
    expect(component).toHaveAttribute(expectedAttribute, expectedValue);
  });
  test('should allow construction without default or instance configs', function () {
    var Component = NullHoC('input');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var component = _react.screen.getByTestId(testID);
    var expected = 'INPUT';
    var actual = component.nodeName;
    expect(actual).toBe(expected);
    expect(component).toBeInTheDocument();
  });
  test('should allow construction without default config', function () {
    var instanceConfig = {
      color: 'green'
    };
    var Component = NullHoC(instanceConfig, 'div');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var component = _react.screen.getByTestId(testID);
    var expectedAttribute = 'color';
    var expectedValue = instanceConfig.color;
    expect(component).toHaveAttribute(expectedAttribute, expectedValue);
  });
});