"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.platform = exports.parseUserAgent = exports.detect = exports["default"] = void 0;
var _deprecate = _interopRequireDefault(require("../internal/deprecate"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /* global globalThis */ /**
 * Utilities for detecting basic platform capabilities.
 *
 * @module core/platform
 * @exports detect
 * @exports platform
 * @public
 */
// Refer the following for more details: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
var browserEnvironment = function browserEnvironment() {
  return !!globalThis.window;
};

// Note: Always true for Chrome v70 or higher: https://chromestatus.com/feature/4764225348042752
var featureTouchEvent = function featureTouchEvent() {
  return browserEnvironment() && 'TouchEvent' in globalThis;
};

// Refer https://patrickhlauke.github.io/touch/touchscreen-detection/
var deviceTouchScreen = function deviceTouchScreen() {
  var _globalThis$navigator, _globalThis$matchMedi;
  return browserEnvironment() && (
  // check if maxTouchPoints is greater than 0 first
  ((_globalThis$navigator = globalThis.navigator) === null || _globalThis$navigator === void 0 ? void 0 : _globalThis$navigator.maxTouchPoints) > 0 || ( // check for any-pointer: coarse which mostly means touchscreen
  (_globalThis$matchMedi = globalThis.matchMedia) === null || _globalThis$matchMedi === void 0 || (_globalThis$matchMedi = _globalThis$matchMedi.call(globalThis, "(any-pointer: coarse)")) === null || _globalThis$matchMedi === void 0 ? void 0 : _globalThis$matchMedi.matches));
};

/*
 * Legacy Code to be removed in the next major release
 */
var hasGesture = function hasGesture() {
  return Boolean('ongesturestart' in window ||
  // non-standard and no major browser supports gesture events
  'onmsgesturestart' in window && (
  // Internet Explorer 10 only
  window.navigator.msMaxTouchPoints > 1 ||
  // Internet Explorer 10 only
  window.navigator.maxTouchPoints > 1));
};
var hasTouch = function hasTouch() {
  return Boolean(featureTouchEvent() || 'ontouchstart' in window ||
  // featureTouchEvent covers recent Firefox and Safari also, so no need when we deprecate old browsers
  window.navigator.msMaxTouchPoints ||
  // Internet Explorer 10 only
  window.navigator.msManipulationViewsEnabled && window.navigator.maxTouchPoints // Internet Explorer only
  );
};
var webOSVersion = {
  38: 3,
  53: 4,
  68: 5,
  79: 6
};
var platforms = [
// Windows Phone 7 - 10
{
  platform: 'windowsPhone',
  regex: /Windows Phone (?:OS )?(\d+)[.\d]+/
},
// Edge
{
  platform: 'edge',
  regex: /Chrome\/(\d+)[.\d]+.*Edg(?:e|A|iOS)?\/(\d+)[.\d]+/
}, {
  platform: 'edge',
  regex: /Edg(?:e|A|iOS)?\/(\d+)[.\d]+/
},
// Android 4+ using Chrome
{
  platform: 'androidChrome',
  regex: /Android .* Chrome\/(\d+)[.\d]+/
},
// Android 2 - 4
{
  platform: 'android',
  regex: /Android(?:\s|\/)(\d+)/
},
// Kindle Fire
// Force version to 2, (desktop mode does not list android version)
{
  platform: 'android',
  regex: /Silk\/1./,
  forceVersion: 2,
  extra: {
    silk: 1
  }
},
// Kindle Fire HD (Silk versions 2 or 3)
// Force version to 4
{
  platform: 'android',
  regex: /Silk\/2./,
  forceVersion: 4,
  extra: {
    silk: 2
  }
}, {
  platform: 'android',
  regex: /Silk\/3./,
  forceVersion: 4,
  extra: {
    silk: 3
  }
},
// IE 8 - 10
{
  platform: 'ie',
  regex: /MSIE (\d+)/
},
// IE 11
{
  platform: 'ie',
  regex: /Trident\/.*; rv:(\d+)/
},
// iOS 3 - 5
// Apple likes to make this complicated
{
  platform: 'ios',
  regex: /iP(?:hone|ad;(?: U;)? CPU) OS (\d+)/
},
// LG webOS
{
  platform: 'webos',
  regex: /Web0S;.*Safari\/537.41/,
  forceVersion: 1
}, {
  platform: 'webos',
  regex: /Web0S;.*Safari\/538.2/,
  forceVersion: 2
}, {
  platform: 'webos',
  regex: /Web0S;.*Chrome\/(\d+)/
},
// LG webOS indeterminate versions
{
  platform: 'webos',
  regex: /Web0S;/,
  forceVersion: -1
},
// LuneOS
{
  platform: 'webos',
  regex: /LuneOS/,
  forceVersion: -1,
  extra: {
    luneos: 1
  }
},
// Palm/HP/Open webOS
{
  platform: 'webos',
  regex: /WebAppManager|Isis|webOS\./,
  forceVersion: -1,
  extra: {
    legacy: 4
  }
}, {
  platform: 'webos',
  regex: /(?:web|hpw)OS\/1/,
  forceVersion: -1,
  extra: {
    legacy: 1
  }
}, {
  platform: 'webos',
  regex: /(?:web|hpw)OS\/2/,
  forceVersion: -1,
  extra: {
    legacy: 2
  }
}, {
  platform: 'webos',
  regex: /(?:web|hpw)OS\/3/,
  forceVersion: -1,
  extra: {
    legacy: 3
  }
},
// desktop Safari
{
  platform: 'safari',
  regex: /Version\/(\d+)[.\d]+\s+Safari/
},
// desktop Chrome
{
  platform: 'chrome',
  regex: /Chrome\/(\d+)[.\d]+/
},
// Firefox on Android
{
  platform: 'androidFirefox',
  regex: /Android;.*Firefox\/(\d+)/
},
// FirefoxOS
{
  platform: 'firefoxOS',
  regex: /Mobile;.*Firefox\/(\d+)/
},
// desktop Firefox
{
  platform: 'firefox',
  regex: /Firefox\/(\d+)/
},
// Blackberry Playbook
{
  platform: 'blackberry',
  regex: /PlayBook/i,
  forceVersion: 2
},
// Blackberry 10+
{
  platform: 'blackberry',
  regex: /BB1\d;.*Version\/(\d+\.\d+)/
},
// Tizen
{
  platform: 'tizen',
  regex: /Tizen (\d+)/
}];
var parseUserAgentLegacy = function parseUserAgentLegacy(userAgent) {
  var plat = {
    gesture: hasGesture(),
    node: false,
    touch: hasTouch(),
    touchscreen: deviceTouchScreen(),
    unknown: true
  };
  for (var i = 0, p, m, v; p = platforms[i]; i++) {
    m = p.regex.exec(userAgent);
    if (m) {
      plat.unknown = false;
      if ('forceVersion' in p) {
        v = p.forceVersion;
      } else if (p.platform === 'webos') {
        v = webOSVersion[m[1]] || -1;
        if (v >= 7 || v === -1) {
          plat.chrome = Number(m[1]);
        }
      } else if (p.platform === 'edge' && m[2]) {
        plat.chrome = Number(m[1]);
        v = Number(m[2]);
      } else {
        v = Number(m[1]);
      }
      plat[p.platform] = v;
      if (p.extra) {
        plat = _objectSpread(_objectSpread({}, plat), p.extra);
      }
      plat.platformName = p.platform;
      break;
    }
  }
  if ('webos' === plat.platformName) {
    (0, _deprecate["default"])({
      name: plat.platformName,
      message: 'Refer `@enact/webos`\'s `platform` for webOS specific information.',
      until: '5.0.0'
    });
  } else if (!['chrome', 'safari', 'firefox'].includes(plat.platformName)) {
    (0, _deprecate["default"])({
      name: plat.platformName,
      until: '5.0.0'
    });
  }
  return plat;
};

/*
 * The end of Legacy Code to be removed in the next major release
 */

// Refer https://www.whatismybrowser.com/guides/the-latest-user-agent/ for latest user agents of major browsers
var userAgentPatterns = [
// Normal cases except iOS
{
  browserName: 'safari',
  regex: /\s+Version\/(\d+)(?:\.(\d+))?\s+Safari/
}, {
  browserName: 'chrome',
  regex: /\s+Chrome\/(\d+)[.\d]+/
}, {
  browserName: 'firefox',
  regex: /\s+Firefox\/(\d+)[.\d]+/
},
// iOS
{
  browserName: 'safari',
  regex: /\((?:iPhone|iPad);.+\sOS\s(\d+)_(\d+)/
}];

// The base supported versions: Used in DEPRECATED warning
var supportedVersions = {
  safari: 15.6,
  chrome: 94,
  firefox: 115
};
var parseUserAgent = exports.parseUserAgent = function parseUserAgent(userAgent) {
  var detectedInfo = {
    type: 'unknown',
    browserName: 'unknown',
    browserVersion: 0
  };
  var index;
  for (index = 0; index < userAgentPatterns.length; index++) {
    var testPlatform = userAgentPatterns[index];
    var match = testPlatform.regex.exec(userAgent);
    if (match) {
      detectedInfo.browserName = testPlatform.browserName;
      detectedInfo.browserVersion = Number("".concat(match[1], ".").concat(match[2] || 0));
      break;
    }
  }
  if (index < userAgentPatterns.length) {
    if (userAgent.includes('Web0S;')) {
      detectedInfo.type = 'webos';
    } else if (userAgent.includes(' Mobile')) {
      // Note that we don't catch 'Tablet' of Firefox as it can't be normalized with other browsers
      detectedInfo.type = 'mobile';
    } else {
      detectedInfo.type = 'desktop';
    }
    detectedInfo[detectedInfo.browserName] = detectedInfo.browserVersion;
  }

  // deprecation warning for browser versions older than our support policy
  if (supportedVersions[detectedInfo.browserName] > detectedInfo.browserVersion) {
    (0, _deprecate["default"])({
      name: "supporting ".concat(detectedInfo.browserName, " version before ").concat(supportedVersions[detectedInfo.browserName]),
      until: '5.0.0'
    });
  }

  // Merge legacy platform info
  return _objectSpread(_objectSpread({}, parseUserAgentLegacy(userAgent)), detectedInfo);
};

/**
 * @typedef {Object} PlatformDescription
 * @property {String} browserName - The name of the detected browser
 * @property {Number} browserVersion - The version of the detected browser
 * @property {Number} chrome - The version of the detected browser, if chrome browser is detected
 * @property {Object} [extra] - Additional information about the detected platform. Deprecated: will be removed in 5.0.0.
 * @property {Number} firefox - The version of the detected browser, if firefox browser is detected
 * @property {Boolean} gesture - `true` if the platform has native double-finger events. Deprecated: will be removed in 5.0.0.
 * @property {Boolean} node - `true` only if `window` is `undefined`. Deprecated: will be removed in 5.0.0. Use `type` instead.
 * @property {String} [platformName] - The name of the platform, if detected. Deprecated: will be removed in 5.0.0. Use `browserName` instead for browser names.
 * @property {Number} safari - The version of the detected browser, if safari browser is detected
 * @property {Boolean} touch - `true` if the platform has native single-finger events. Deprecated: will be removed in 5.0.0. Use `touchEvent` instead.
 * @property {Boolean} touchEvent - `true` if the browser has native touch events
 * @property {Boolean} touchscreen - `true` if the platform has a touch screen. Deprecated: will be removed in 5.0.0. Use `touchScreen` instead.
 * @property {Boolean} touchScreen - `true` if the platform has a touch screen
 * @property {String} type - The type of the detected platform. One of 'desktop', 'mobile', 'webos', 'node', or 'unknown'
 * @property {Boolean} unknown - `true` for any unknown system. Deprecated: will be removed in 5.0.0. Use `type` instead.
 *
 * @memberof core/platform
 * @public
 */
var detectedPlatform = null;

/**
 * Returns the {@link core/platform.platform} object.
 *
 * @function detect
 * @returns {PlatformDescription}     The {@link core/platform.platform} object
 * @memberof core/platform
 * @public
 */
var detect = exports.detect = function detect() {
  if (detectedPlatform !== null) {
    // once detected, don't bother detecting again
    return detectedPlatform;
  }

  // Parse User Agent string first
  if (browserEnvironment()) {
    var _globalThis$navigator2;
    detectedPlatform = parseUserAgent(((_globalThis$navigator2 = globalThis.navigator) === null || _globalThis$navigator2 === void 0 ? void 0 : _globalThis$navigator2.userAgent) || '');
  } else {
    // node or compatible environment (e.g. prerendering or snapshot runs)
    detectedPlatform = {
      // the following properties are deprecated and will be removed in the next major release
      gesture: false,
      node: true,
      touch: false,
      unknown: true,
      // the following properties are new and will be available in the next major release
      type: 'node',
      browserName: 'unknown',
      browserVersion: 0 /* magic number for unknown */
    };
  }

  // Detect features
  detectedPlatform.touchEvent = featureTouchEvent();

  // Detect devices
  detectedPlatform.touchScreen = deviceTouchScreen();
  return detectedPlatform;
};

/**
 * Provides basic information about the running platform.
 *
 * @type {PlatformDescription}
 * @memberof core/platform
 * @public
 */
var platform = exports.platform = {};
[
// the following properties are deprecated and will be removed in the next major release
'gesture', 'node', 'platformName', 'touch', 'touchscreen', 'unknown',
// the following properties are new and will be available in the next major release
'browserName', 'browserVersion', 'touchEvent', 'touchScreen', 'type'].concat(_toConsumableArray(new Set(platforms.map(function (p) {
  return p.platform;
})))).forEach(function (name) {
  Object.defineProperty(platform, name, {
    enumerable: true,
    get: function get() {
      if (name === 'gesture' || name === 'unknown') {
        (0, _deprecate["default"])({
          name: name,
          until: '5.0.0'
        });
      }
      if (name === 'node') {
        (0, _deprecate["default"])({
          name: name,
          until: '5.0.0',
          replacedBy: 'type'
        });
      }
      if (name === 'platformName') {
        (0, _deprecate["default"])({
          name: name,
          until: '5.0.0',
          replacedBy: 'browserName'
        });
      }
      if (name === 'touch') {
        (0, _deprecate["default"])({
          name: name,
          until: '5.0.0',
          replacedBy: 'touchEvent'
        });
      }
      if (name === 'touchscreen') {
        (0, _deprecate["default"])({
          name: name,
          until: '5.0.0',
          replacedBy: 'touchScreen'
        });
      }
      var p = detect();
      return p[name];
    }
  });
});
var _default = exports["default"] = platform;