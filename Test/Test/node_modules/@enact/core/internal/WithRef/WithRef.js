"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.WithRef = void 0;
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["data-withref-id", "outermostRef", "referrerName"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var WithRef = exports.WithRef = function WithRef(WrappedComponent) {
  var HoC = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
    var givenId = props['data-withref-id'],
      outermostRef = props.outermostRef,
      referrerName = props.referrerName,
      rest = _objectWithoutProperties(props, _excluded);
    var divRef = (0, _react.useRef)();
    var generatedId = (0, _react.useId)();
    var id = givenId || generatedId;
    (0, _react.useImperativeHandle)(outermostRef, function () {
      var _refNode$parentElemen;
      var refNode = divRef.current;
      var attributeSelector = "[data-withref-id=\"".concat(refNode.getAttribute('data-withref-target'), "\"]");
      /* The intended code is to search for the referrer element via a single querySelector call. But unit tests cannot handle :has() properly.
      const selector = `:scope ${attributeSelector}, :scope :has(${attributeSelector})`;
      return refNode?.parentElement?.querySelector(selector) || null;
      */
      var targetNode = (refNode === null || refNode === void 0 || (_refNode$parentElemen = refNode.parentElement) === null || _refNode$parentElemen === void 0 ? void 0 : _refNode$parentElemen.querySelector(attributeSelector)) || null;
      for (var current = targetNode; current; current = current.parentElement) {
        var _current;
        if (((_current = current) === null || _current === void 0 ? void 0 : _current.parentElement) === (refNode === null || refNode === void 0 ? void 0 : refNode.parentElement)) {
          return current;
        }
      }
      return null;
    }, []);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(WrappedComponent, _objectSpread(_objectSpread({}, rest), {}, {
        "data-withref-id": id,
        ref: ref
      })), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        "data-withref-target": id,
        "data-withref-referrer": referrerName,
        ref: divRef,
        style: {
          display: 'none'
        }
      })]
    });
  });
  HoC.displayName = 'WithRef';
  return HoC;
};
var _default = exports["default"] = WithRef;