"use strict";

var _react = require("react");
require("@testing-library/jest-dom");
var _react2 = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _Registry = _interopRequireDefault(require("../Registry"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var SomeContext = /*#__PURE__*/(0, _react.createContext)();
describe('Registry', function () {
  var NotifiesTree = /*#__PURE__*/function (_Component) {
    _inherits(NotifiesTree, _Component);
    var _super = _createSuper(NotifiesTree);
    function NotifiesTree() {
      var _this;
      _classCallCheck(this, NotifiesTree);
      _this = _super.call(this);
      _this.handleNotify = function (_ref) {
        var action = _ref.action;
        if (action === 'update') {
          _this.registry.parent = _this.context;
        }
      };
      _this.handleClick = function () {
        _this.registry.notify({
          action: 'notify'
        });
      };
      _this.registry = _Registry["default"].create(_this.handleNotify);
      return _this;
    }
    _createClass(NotifiesTree, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.registry.parent = this.context;
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(SomeContext.Provider, {
          value: this.registry.register,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", _objectSpread(_objectSpread({}, this.props), {}, {
            onClick: this.handleClick,
            children: "Notify!"
          })), this.props.children]
        });
      }
    }]);
    return NotifiesTree;
  }(_react.Component);
  NotifiesTree.contextType = SomeContext;
  var HandlesNotification = /*#__PURE__*/function (_Component2) {
    _inherits(HandlesNotification, _Component2);
    var _super2 = _createSuper(HandlesNotification);
    function HandlesNotification() {
      var _this2;
      _classCallCheck(this, HandlesNotification);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this2 = _super2.call.apply(_super2, [this].concat(args));
      _this2.state = {
        number: 0
      };
      _this2.handleResize = function () {
        _this2.setState(function (prevState) {
          var number = prevState.number + 1;
          _this2.registry.notify({
            action: 'update'
          });
          return {
            number: number
          };
        });
      };
      return _this2;
    }
    _createClass(HandlesNotification, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.context && typeof this.context === 'function') {
          this.registry = this.context(this.handleResize);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.registry) {
          this.registry.unregister();
        }
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, this.props), {}, {
          children: this.state.number
        }));
      }
    }]);
    return HandlesNotification;
  }(_react.Component);
  HandlesNotification.contextType = SomeContext;
  test('should increment child on click', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(NotifiesTree, {
      "data-testid": "a-btn",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
        "data-testid": "a"
      })
    }));
    yield user.click(_react2.screen.getByTestId('a-btn'));
    var expected = '1';
    var child = _react2.screen.getByTestId('a');
    expect(child).toHaveTextContent(expected);
  }));
  test('should increment both children on top click', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(NotifiesTree, {
      "data-testid": "a-btn",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
        "data-testid": "a"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(NotifiesTree, {
        "data-testid": "b-btn",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
          "data-testid": "b"
        })
      })]
    }));
    yield user.click(_react2.screen.getByTestId('a-btn'));
    var expected = '1';
    var childA = _react2.screen.getByTestId('a');
    var childB = _react2.screen.getByTestId('b');
    expect(childA).toHaveTextContent(expected);
    expect(childB).toHaveTextContent(expected);
  }));
  test('should increment the deepest child when we click child button', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(NotifiesTree, {
      "data-testid": "a-btn",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
        "data-testid": "a"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(NotifiesTree, {
        "data-testid": "b-btn",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
          "data-testid": "b"
        })
      })]
    }));
    yield user.click(_react2.screen.getByTestId('b-btn'));
    var expectedA = '0';
    var expectedB = '1';
    var childA = _react2.screen.getByTestId('a');
    var childB = _react2.screen.getByTestId('b');
    expect(childA).toHaveTextContent(expectedA);
    expect(childB).toHaveTextContent(expectedB);
  }));
  test('should support removing children without error', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    var _render = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(NotifiesTree, {
        "data-testid": "a-btn",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
          "data-testid": "a"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
          "data-testid": "b"
        })]
      })),
      rerender = _render.rerender;
    yield user.click(_react2.screen.getByTestId('a-btn'));

    // changing children should be safe and not throw errors when notifying instances
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(NotifiesTree, {
      "data-testid": "a-btn",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(HandlesNotification, {
        "data-testid": "c"
      })
    }));
    yield user.click(_react2.screen.getByTestId('a-btn'));
    var expectedC = '1';
    var childC = _react2.screen.getByTestId('c');
    expect(childC).toHaveTextContent(expectedC);
  }));
});