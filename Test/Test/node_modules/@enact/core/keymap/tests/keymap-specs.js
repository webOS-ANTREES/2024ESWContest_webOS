"use strict";

var keymap = _interopRequireWildcard(require("../"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
describe('keymap', function () {
  test('should support adding single keyCodes for a name', function () {
    keymap.add('testEnter', 13);
    var expected = true;
    var actual = keymap.is('testEnter', 13);
    keymap.remove('testEnter', 13);
    expect(actual).toBe(expected);
  });
  test('should support removing a single keyCode for a name', function () {
    keymap.add('testEnter', 13);
    keymap.remove('testEnter', 13);
    var expected = false;
    var actual = keymap.is('testEnter', 13);
    expect(actual).toBe(expected);
  });
  test('should support adding an array of keyCodes for a name', function () {
    keymap.add('testEnter', [13, 16777221]);
    var expected = true;
    var actual = keymap.is('testEnter', 13) && keymap.is('testEnter', 16777221);
    keymap.remove('testEnter', [13, 16777221]);
    expect(actual).toBe(expected);
  });
  test('should support removing an array of keyCodes for a name', function () {
    keymap.add('testEnter', [13, 16777221]);
    keymap.remove('testEnter', [13, 16777221]);
    var expected = false;
    var actual = keymap.is('testEnter', 13) || keymap.is('testEnter', 16777221);
    expect(actual).toBe(expected);
  });
  test('should support adding an map of keyCodes', function () {
    var map = {
      testEnter: [13, 16777221],
      testUp: 38,
      testDown: 40
    };
    keymap.addAll(map);
    var expected = true;
    var actual = keymap.is('testEnter', 13) && keymap.is('testEnter', 16777221) && keymap.is('testUp', 38) && keymap.is('testDown', 40);
    keymap.removeAll(map);
    expect(actual).toBe(expected);
  });
  test('should removing an map of keyCodes', function () {
    var map = {
      testEnter: [13, 16777221],
      testUp: 38,
      testDown: 40
    };
    keymap.addAll(map);
    keymap.removeAll(map);
    var expected = false;
    var actual = keymap.is('testEnter', 13) || keymap.is('testEnter', 16777221) || keymap.is('testUp', 38) || keymap.is('testDown', 40);
    expect(actual).toBe(expected);
  });
  test('should use case-insensitive names', function () {
    keymap.add('testEnter', 13);
    var expected = true;
    var actual = keymap.is('TeStEnTeR', 13);
    keymap.remove('testEnter', 13);
    expect(actual).toBe(expected);
  });
  test('should not add entry with a falsy name', function () {
    keymap.add('', 13);
    var expected = false;
    var actual = keymap.is('', 13);
    expect(actual).toBe(expected);
  });
});