"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Resizable = void 0;
Object.defineProperty(exports, "ResizeContext", {
  enumerable: true,
  get: function get() {
    return _ResizeContext["default"];
  }
});
exports["default"] = void 0;
var _hoc = _interopRequireDefault(require("@enact/core/hoc"));
var _invariant = _interopRequireDefault(require("invariant"));
var _ResizeContext = _interopRequireDefault(require("./ResizeContext"));
var _useResize = _interopRequireDefault(require("./useResize"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                           * A higher-order component that handles component resize event.
                                                                                                                                                                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                                                                                                                                                                           * @module ui/Resizable
                                                                                                                                                                                                                                                                                                                                                                                           * @exports Resizable
                                                                                                                                                                                                                                                                                                                                                                                           */ /**
                                                                                                                                                                                                                                                                                                                                                                                               * Default config for `Resizable`.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * @memberof ui/Resizable.Resizable
                                                                                                                                                                                                                                                                                                                                                                                               * @hocconfig
                                                                                                                                                                                                                                                                                                                                                                                               */
var defaultConfig = {
  /**
   * A handler to process the `resize` event.
   *
   * It should return a truthy value if the event should trigger a resize.
   *
   * @type {Function}
   * @default null
   * @see {@link core/handle}
   * @memberof ui/Resizable.Resizable.defaultConfig
   */
  filter: null,
  /**
   * The name of the event on the wrapped component to listen to for size changes.
   *
   * This event name will be passed to the wrapped component and will also be forwarded (if
   * needed) to the parent component.
   *
   * @type {String}
   * @required
   * @memberof ui/Resizable.Resizable.defaultConfig
   */
  resize: null
};

/**
 * A higher-order component that notifies a container that the wrapped component has been resized.
 *
 * It may be useful in cases where a component may need to update itself as a result of its children
 * changing in size, such as a {@link ui/Scroller|Scroller}.
 *
 * Containers must provide an `invalidateBounds` method via React's context in order for `Resizable`
 * instances to notify it of resize.
 *
 * The wrapped component must respond to the configured
 * {@link ui/Resizable.Resizable.defaultConfig.resize|resize} event.
 *
 * @class Resizable
 * @memberof ui/Resizable
 * @hoc
 * @public
 */
var Resizable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var resize = config.resize;
  !resize ? process.env.NODE_ENV !== "production" ? (0, _invariant["default"])(false, "resize is required by Resizable but was omitted when applied to ".concat(Wrapped.displayName)) : (0, _invariant["default"])(false) : void 0;

  // eslint-disable-next-line no-shadow
  return function Resizable(props) {
    var handlers = (0, _useResize["default"])(props, config);
    var resizableProps = Object.assign({}, props, handlers);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, resizableProps));
  };
});
exports.Resizable = Resizable;
var _default = Resizable;
exports["default"] = _default;