"use strict";

var _Registry = _interopRequireDefault(require("@enact/core/internal/Registry"));
var _react = require("@testing-library/react");
var _Resizable = require("../Resizable");
var _useResize = _interopRequireDefault(require("../useResize"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
describe('useResize', function () {
  var data;
  var DivComponent = function DivComponent(props) {
    data = props;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "component"
    });
  };
  var ResizeButtonWithHook = function ResizeButtonWithHook(props) {
    var handlers = (0, _useResize["default"])(props, {
      resize: 'onClick'
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(DivComponent, _objectSpread(_objectSpread({}, handlers), {}, {
      children: props.children
    }));
  };
  describe('config', function () {
    test('should pass \'onClick\' handler to the wrapped component', function () {
      var resizeRegistry = _Registry["default"].create();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Resizable.ResizeContext.Provider, {
        value: resizeRegistry.register,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ResizeButtonWithHook, {})
      }));
      expect(data).toHaveProperty('onClick');
      var expected = 'function';
      var actual = typeof data.onClick;
      expect(actual).toBe(expected);
    });
  });
});