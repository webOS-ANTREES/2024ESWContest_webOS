"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ResolutionDecorator = void 0;
var _react = require("react");
var _reactDom = _interopRequireDefault(require("react-dom"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _hoc = _interopRequireDefault(require("@enact/core/hoc"));
var _resolution = require("./resolution");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); } /*
                                                                                                                                                                                                                      * Exports the {@link ui/resolution.ResolutionDecorator} higher-order component (HOC).
                                                                                                                                                                                                                      *
                                                                                                                                                                                                                      * not jsdoc module on purpose
                                                                                                                                                                                                                      */ /**
                                                                                                                                                                                                                          * Default config for `ResolutionDecorator`.
                                                                                                                                                                                                                          *
                                                                                                                                                                                                                          * @memberof ui/resolution.ResolutionDecorator
                                                                                                                                                                                                                          * @hocconfig
                                                                                                                                                                                                                          */
var defaultConfig = {
  /**
   * Attaches an event listener to the window to listen for resize events.
   *
   * @type {Boolean}
   * @default true
   * @public
   * @memberof ui/resolution.ResolutionDecorator.defaultConfig
   */
  dynamic: true,
  /**
   * Determines how to calculate font-size.
   * When set to `scale` and the screen is in `landscape` orientation,
   * calculates font-size linearly based on screen resolution.
   * When set to `normal`, the font-size will be the pxPerRem value of the best match screen type.
   *
   * @type {('normal'|'scale')}
   * @default 'normal'
   * @private
   * @memberof ui/resolution.ResolutionDecorator.defaultConfig
   */
  intermediateScreenHandling: 'normal',
  /**
   * Determines how to get the best match screen type of current resolution.
   * When set to `true`, the matched screen type will be the one that is smaller and
   * the closest to the screen resolution.
   * When set to `false`, the matched screen type will be the one that is greater and
   * the closest to the screen resolution.
   *
   * @type {Boolean}
   * @private
   * @memberof ui/resolution.ResolutionDecorator.defaultConfig
   */
  matchSmallerScreenType: false,
  /**
   * An array of objects containing declarations for screen types to add to the list of known
   * screen types.
   *
   * @type {Object[]}
   * @default null
   * @public
   * @memberof ui/resolution.ResolutionDecorator.defaultConfig
   */
  screenTypes: null
};

/**
 * A higher-order component that configures resolution support for its wrapped component tree.
 *
 * Configuration options:
 *	* `dynamic: true` - when `true`, updates the resolution classes when the window resizes
 *	* `screenTypes: null` - defines a set of screen types to support
 *
 * Example:
 * ```
 *	// Will have the resolution classes and will be updated when the window resizes
 *	const AppWithResolution = ResolutionDecorator(App);
 *	// Will have the resolution classes for the screen at the time of render only
 *	const AppWithStaticResolution = ResolutionDecorator({dynamic: false}, App);
 *	const AppWithScreenTypes = ResolutionDecorator({screenTypes: [
 *		{name: 'hd', pxPerRem: 16, width: 1280, height: 720, aspectRatioName: 'hdtv', base: true}
 *	]}, App);
 * ```
 * @class ResolutionDecorator
 * @memberof ui/resolution
 * @hoc
 * @public
 */
var ResolutionDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;
  if (config.screenTypes) {
    (0, _resolution.defineScreenTypes)(config.screenTypes);
  }
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);
    var _super = _createSuper(_class);
    function _class(props) {
      var _this;
      _classCallCheck(this, _class);
      _this = _super.call(this, props);
      _this.handleResize = function () {
        var classNames = _this.didClassesChange();
        if (classNames) {
          _this.setState({
            resolutionClasses: classNames
          });
        }
      };
      _resolution.config.intermediateScreenHandling = config.intermediateScreenHandling;
      _resolution.config.matchSmallerScreenType = config.matchSmallerScreenType;
      (0, _resolution.init)({
        measurementNode: typeof window !== 'undefined' && window
      });
      _this.state = {
        resolutionClasses: ''
      };
      return _this;
    }
    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (config.dynamic) window.addEventListener('resize', this.handleResize);
        // eslint-disable-next-line react/no-find-dom-node
        this.rootNode = _reactDom["default"].findDOMNode(this);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (config.dynamic) window.removeEventListener('resize', this.handleResize);
      }
    }, {
      key: "didClassesChange",
      value:
      /*
       * Compare our current version of the resolved resolution class names with a fresh
       * initialization of RI.
       *
       * @returns {String|undefined} A string of new class names or undefined when there is no change.
       * @private
       */
      function didClassesChange() {
        var prevClassNames = (0, _resolution.getResolutionClasses)();
        (0, _resolution.init)({
          measurementNode: this.rootNode
        });
        var classNames = (0, _resolution.getResolutionClasses)();
        if (prevClassNames !== classNames) {
          return classNames;
        }
      }
    }, {
      key: "render",
      value: function render() {
        // Check if the classes are different from our previous classes
        var classes = (0, _resolution.getResolutionClasses)();
        if (this.props.className) classes += (classes ? ' ' : '') + this.props.className;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, this.props), {}, {
          className: classes
        }));
      }
    }]);
    return _class;
  }(_react.Component), _class.displayName = 'ResolutionDecorator', _class.propTypes = /** @lends ui/resolution.ResolutionDecorator.prototype */{
    className: _propTypes["default"].string
  }, _class;
});
exports.ResolutionDecorator = ResolutionDecorator;
var _default = ResolutionDecorator;
exports["default"] = _default;