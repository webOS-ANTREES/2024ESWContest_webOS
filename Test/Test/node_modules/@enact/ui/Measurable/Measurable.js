"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMeasurable = exports["default"] = exports.Measurable = void 0;
var _hoc = _interopRequireDefault(require("@enact/core/hoc"));
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; } /* global ResizeObserver, MutationObserver */ /**
                                                                                                                     * A higher-order component that adds the ability to measure nodes conveniently.
                                                                                                                     *
                                                                                                                     * @module ui/Measurable
                                                                                                                     * @exports Measurable
                                                                                                                     */ /**
                                                                                                                         * Default config for {@link ui/Measurable.Measurable}.
                                                                                                                         *
                                                                                                                         * @memberof ui/Measurable.Measurable
                                                                                                                         * @hocconfig
                                                                                                                         */
var defaultConfig = {
  /**
   * Configures the prop name to pass the measurement object.
   *
   * @type {String}
   * @default 'measurement'
   * @memberof ui/Measurable.Measurable.defaultConfig
   */
  measurementProp: 'measurement',
  /**
   * Configures the prop name to pass a function to capture a reference to the element to measure.
   *
   * @type {String}
   * @default 'forwardRef'
   * @memberof ui/Measurable.Measurable.defaultConfig
   */
  refProp: 'forwardRef'
};
var useMeasurable = function useMeasurable() {
  var _useState = (0, _react.useState)(),
    _useState2 = _slicedToArray(_useState, 2),
    measurement = _useState2[0],
    setMeasurement = _useState2[1];
  var ref = (0, _react.useRef)(null);
  (0, _react.useLayoutEffect)(function () {
    var refToMeasure = ref.current;
    if (!refToMeasure) {
      return;
    }

    // Support for ResizeObserver
    if (typeof ResizeObserver === 'function') {
      var resizeObserver = new ResizeObserver(function (entries) {
        entries.forEach(function (entry) {
          if (entry.target === refToMeasure) {
            // we want to measure including the padding, hence refers to `target` instead of `contentRect`
            setMeasurement(entry.target.getBoundingClientRect());
          }
        });
      });
      resizeObserver.observe(refToMeasure);
      return function () {
        resizeObserver.disconnect(refToMeasure);
        resizeObserver = null;
      };
      // Fallback support for MutationObserver
    } else if (typeof MutationObserver === 'function') {
      var mutationObserver = new MutationObserver(function (mutationsList) {
        var _iterator = _createForOfIteratorHelper(mutationsList),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var mutation = _step.value;
            if (mutation.type === 'childList') {
              setMeasurement(mutation.target.getBoundingClientRect());
            } else if (mutation.type === 'attributes' && (mutation.attributeName === 'style' || mutation.attributeName === 'class')) {
              setMeasurement(refToMeasure.getBoundingClientRect());
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
      mutationObserver.observe(refToMeasure, {
        attributes: true,
        childList: true,
        subtree: true
      });
      return function () {
        mutationObserver.disconnect();
        mutationObserver = null;
      };
    }
  }, [] // disconnect on unmount
  );

  return {
    ref: ref,
    measurement: measurement
  };
};

/**
 * A higher-order component that adds the ability to measure a referenced node and get that value
 * back as a prop.
 *
 * Applying `Measurable` to a component will pass two additional props: function to fetch the `ref`
 * and the measurement object (currently this executes `getBoundingClientRect` returning its full
 * complement of properties). Both prop names are configurable through the HOC config object.
 *
 * Changes to the referenced node will result in new measurements being returned as props. That
 * being said, it probably is not wise to use this during animation as it may cause unwanted
 * performance issues.
 *
 * @see https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node
 * @class Measurable
 * @memberof ui/Measurable
 * @hoc
 * @public
 */
exports.useMeasurable = useMeasurable;
var Measurable = (0, _hoc["default"])(defaultConfig, function (configHoc, Wrapped) {
  return function MeasurableHoc(props) {
    var _measurementProps;
    // Take the config from Measurable and insert it into a fresh instance of defineMeasurable
    var _useMeasurable = useMeasurable(),
      ref = _useMeasurable.ref,
      measurement = _useMeasurable.measurement;
    var measurementProps = (_measurementProps = {}, _defineProperty(_measurementProps, configHoc.refProp, ref), _defineProperty(_measurementProps, configHoc.measurementProp, measurement), _measurementProps);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, props), measurementProps));
  };
});
exports.Measurable = Measurable;
var _default = Measurable;
exports["default"] = _default;