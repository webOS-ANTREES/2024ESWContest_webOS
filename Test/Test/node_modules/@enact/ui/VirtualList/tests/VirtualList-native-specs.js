"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _VirtualList = _interopRequireDefault(require("../VirtualList"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["index"],
  _excluded2 = ["index"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
describe('VirtualList with native scrollMode', function () {
  var clientSize, dataSize, items, itemSize, renderItem;
  beforeEach(function () {
    clientSize = {
      clientWidth: 1280,
      clientHeight: 720
    };
    dataSize = 100;
    items = [];
    itemSize = 30;
    renderItem = function renderItem(_ref) {
      var index = _ref.index,
        rest = _objectWithoutProperties(_ref, _excluded);
      // eslint-disable-line enact/display-name
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
        id: 'item' + index,
        children: items[index].name
      }));
    };
    for (var i = 0; i < dataSize; i++) {
      items.push({
        name: 'Account ' + i
      });
    }
  });
  afterEach(function () {
    clientSize = null;
    dataSize = null;
    items = null;
    itemSize = null;
    renderItem = null;
  });
  test('should render a list of \'items\'', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
      clientSize: clientSize,
      dataSize: dataSize,
      itemRenderer: renderItem,
      itemSize: itemSize,
      scrollMode: "native"
    }));
    var expected = 'Account 0';
    var actual = _react.screen.getByRole('list').children.item(0).textContent;
    expect(actual).toBe(expected);
  });
  test('should render overhang items when clientSize is not given', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
      dataSize: dataSize,
      itemRenderer: renderItem,
      itemSize: itemSize,
      scrollMode: "native"
    }));
    var expected = 3;
    var actual = _react.screen.getByRole('list').children.length;
    expect(actual).toBe(expected);
  });
  test('should render (clientHeight / itemHeight + overhang) items', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
      clientSize: clientSize,
      dataSize: dataSize,
      itemRenderer: renderItem,
      itemSize: itemSize,
      scrollMode: "native"
    }));
    var expected = 27; // 720 / 30 + 3
    var actual = _react.screen.getByRole('list').children.length;
    expect(actual).toBe(expected);
  });
  test('should re-render clientHeight / itemHeight + overhang) items after changing client size', function () {
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
        clientSize: clientSize,
        dataSize: dataSize,
        itemRenderer: renderItem,
        itemSize: itemSize,
        scrollMode: "native"
      })),
      rerender = _render.rerender;
    var newClientSize = {
      clientWidth: 1280,
      clientHeight: 360
    };
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
      clientSize: newClientSize,
      dataSize: dataSize,
      itemRenderer: renderItem,
      itemSize: itemSize,
      scrollMode: "native"
    }));
    var expected = 15; // 360 / 30 + 3
    var actual = _react.screen.getByRole('list').children.length;
    expect(actual).toBe(expected);
  });
  describe('Adding an item', function () {
    test('should render an added item named \'Password 0\' as the first item', function (done) {
      var itemArray = [{
        name: 'A'
      }, {
        name: 'B'
      }, {
        name: 'C'
      }];
      var renderItemArray = function renderItemArray(_ref2) {
        var index = _ref2.index,
          rest = _objectWithoutProperties(_ref2, _excluded2);
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, rest), {}, {
          id: 'item' + index,
          children: itemArray[index].name
        }));
      };
      var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
          clientSize: clientSize,
          dataSize: itemArray.length,
          itemRenderer: renderItemArray,
          itemSize: itemSize,
          scrollMode: "native"
        })),
        rerender = _render2.rerender;
      itemArray.unshift({
        name: 'Password 0'
      });
      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualList["default"], {
        clientSize: clientSize,
        dataSize: itemArray.length,
        itemRenderer: renderItemArray,
        itemSize: itemSize,
        scrollMode: "native"
      }));
      jest.useFakeTimers();
      (0, _react.act)(function () {
        return jest.advanceTimersByTime(0);
      });
      var expected = itemArray[0].name;
      var actual = _react.screen.getByRole('list').children.item(0).textContent;
      expect(actual).toBe(expected);
      done();
      jest.useRealTimers();
    });
  });
});