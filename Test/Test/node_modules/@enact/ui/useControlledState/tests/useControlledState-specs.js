"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _useControlledState3 = _interopRequireDefault(require("../useControlledState"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
describe('useControlledState', function () {
  var data;
  function Component(props) {
    var _useControlledState = (0, _useControlledState3["default"])(props.defaultValue, props.value, 'value' in props),
      _useControlledState2 = _slicedToArray(_useControlledState, 2),
      value = _useControlledState2[0],
      setValue = _useControlledState2[1];
    var handleChange = function handleChange(ev) {
      return setValue(ev.value);
    };
    data = setValue;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      onChange: handleChange,
      children: value
    });
  }
  test('should use the default value when the value is undefined', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      defaultValue: "abc"
    }));
    var actual = _react.screen.queryByText('abc');
    expect(actual).toBeInTheDocument();
  });
  test('should not change default value', function () {
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        defaultValue: "abc"
      })),
      rerender = _render.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      defaultValue: "def"
    }));
    var actual = _react.screen.queryByText('abc');
    expect(actual).toBeInTheDocument();
  });
  test('should not change uncontrolled setting', function () {
    var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        defaultValue: "abc"
      })),
      rerender = _render2.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      defaultValue: null,
      value: "def"
    }));
    var actual = _react.screen.queryByText('abc');
    expect(actual).toBeInTheDocument();
  });
  test('should update controlled value', function () {
    var _render3 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        value: "abc"
      })),
      rerender = _render3.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      value: "def"
    }));
    var actual = _react.screen.queryByText('def');
    expect(actual).toBeInTheDocument();
  });
  test('should not change controlled setting', function () {
    var _render4 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        value: "abc"
      })),
      rerender = _render4.rerender;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      defaultValue: "def",
      value: "ghi"
    }));
    var actual = _react.screen.queryByText('ghi');
    expect(actual).toBeInTheDocument();
  });
  test('should not allow setting a value when controlled', function () {
    var handleChange = jest.fn();
    var value = 'ghi';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      onChange: handleChange,
      value: "abc"
    }));
    var component = _react.screen.queryByText('abc');
    data(value);
    expect(component).toBeInTheDocument();
  });
});