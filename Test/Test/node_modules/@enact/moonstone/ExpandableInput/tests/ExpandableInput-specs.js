"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _ExpandableInput = require("../ExpandableInput");
var _jsxRuntime = require("react/jsx-runtime");
describe('ExpandableInputBase', function () {
  var inputHint = ' Input field';
  describe('#aria-label', function () {
    test('should use title, value, and input hint', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableInput.ExpandableInputBase, {
        "data-testid": "inputField",
        title: "Item",
        value: "value"
      }));
      var inputField = _react.screen.getByTestId('inputField').firstElementChild;
      var expectedValue = 'Item value' + inputHint;
      var expectedAttribute = 'aria-label';
      expect(inputField).toHaveAttribute(expectedAttribute, expectedValue);
    });
    test('should use title, noneText, and input hint when value is not set', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableInput.ExpandableInputBase, {
        "data-testid": "inputField",
        noneText: "noneText",
        title: "Item"
      }));
      var inputField = _react.screen.getByTestId('inputField').firstElementChild;
      var expectedValue = 'Item noneText' + inputHint;
      var expectedAttribute = 'aria-label';
      expect(inputField).toHaveAttribute(expectedAttribute, expectedValue);
    });
    test('should use title and input hint when value and noneText are not set', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableInput.ExpandableInputBase, {
        "data-testid": "inputField",
        title: "Item"
      }));
      var inputField = _react.screen.getByTestId('inputField').firstElementChild;
      var expectedValue = 'Item ' + inputHint;
      var expectedAttribute = 'aria-label';
      expect(inputField).toHaveAttribute(expectedAttribute, expectedValue);
    });
    test('should use title, character count, and input hint when type is `password`', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableInput.ExpandableInputBase, {
        "data-testid": "inputField",
        title: "Item",
        type: "password",
        value: "long"
      }));
      var inputField = _react.screen.getByTestId('inputField').firstElementChild;
      var expectedValue = 'Item 4 characters' + inputHint;
      var expectedAttribute = 'aria-label';
      expect(inputField).toHaveAttribute(expectedAttribute, expectedValue);
    });
    test('should use title, single character count, and input hint when type=`password` and value length=1', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableInput.ExpandableInputBase, {
        "data-testid": "inputField",
        title: "Item",
        type: "password",
        value: "1"
      }));
      var inputField = _react.screen.getByTestId('inputField').firstElementChild;
      var expectedValue = 'Item 1 character' + inputHint;
      var expectedAttribute = 'aria-label';
      expect(inputField).toHaveAttribute(expectedAttribute, expectedValue);
    });
  });
  describe('#label', function () {
    test('should use value', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableInput.ExpandableInputBase, {
        title: "Item",
        value: "value"
      }));
      var inputField = _react.screen.getByText('value');
      expect(inputField).toBeInTheDocument();
    });
    test('should use noneText when value is not set', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableInput.ExpandableInputBase, {
        noneText: "noneText",
        title: "Item"
      }));
      var inputField = _react.screen.getByText('noneText');
      expect(inputField).toBeInTheDocument();
    });
    test('should be excluded when type is `password`', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableInput.ExpandableInputBase, {
        title: "Item",
        type: "password",
        value: "value"
      }));
      var inputField = _react.screen.queryByText('value');
      expect(inputField).toBeNull();
    });
  });
});
describe('ExpandableInput', function () {
  test('should pass onChange callback to input', function () {
    var handleChange = jest.fn();
    var value = 'input string';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableInput.ExpandableInput, {
      onChange: handleChange,
      open: true,
      title: "Item",
      value: "value"
    }));
    _react.fireEvent.change(_react.screen.getAllByText('value')[1].nextElementSibling, {
      target: {
        value: value
      }
    });
    var expected = value;
    var actual = handleChange.mock.calls[0][0].value;
    expect(actual).toBe(expected);
  });
});