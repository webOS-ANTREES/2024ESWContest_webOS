"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _ToggleButton = _interopRequireDefault(require("../ToggleButton"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
describe('ToggleButton', function () {
  var toggleOnLabel = 'It\'s on!';
  var toggleOffLabel = 'It\'s off!';
  var textChild = 'Toggle Me';
  test('should use \'toggleOffLabel\' if toggled off and label provided', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleButton["default"], {
      toggleOffLabel: toggleOffLabel,
      children: textChild
    }));
    var button = _react.screen.getByRole('button');
    expect(button).toHaveTextContent(toggleOffLabel);
  });
  test('should use \'toggleOnLabel\' if toggled on and label provided', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleButton["default"], {
      toggleOnLabel: toggleOnLabel,
      selected: true,
      children: textChild
    }));
    var button = _react.screen.getByRole('button');
    expect(button).toHaveTextContent(toggleOnLabel);
  });
  test('should use child node for label when \'toggleOffLabel\' is missing', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleButton["default"], {
      toggleOnLabel: toggleOnLabel,
      children: textChild
    }));
    var button = _react.screen.getByRole('button');
    expect(button).toHaveTextContent(textChild);
  });
  test('should use child node for label when \'toggleOnLabel\' is missing', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleButton["default"], {
      toggleOffLabel: toggleOffLabel,
      selected: true,
      children: textChild
    }));
    var button = _react.screen.getByRole('button');
    expect(button).toHaveTextContent(textChild);
  });
  test('should set "aria-pressed" to the value of "selected"', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleButton["default"], {
      toggleOffLabel: toggleOffLabel,
      selected: false,
      children: textChild
    }));
    var expected = 'false';
    var actual = _react.screen.getByRole('button');
    expect(actual).toHaveAttribute('aria-pressed', expected);
  });
});