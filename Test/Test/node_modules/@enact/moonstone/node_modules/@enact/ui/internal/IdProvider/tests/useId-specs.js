"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _useId = _interopRequireDefault(require("../useId"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
describe('useId', function () {
  var data = [];
  function Base(props) {
    data.push(props);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      id: data.id
    });
  }
  function Component(_ref) {
    var key = _ref.key,
      prefix = _ref.prefix,
      onUnmount = _ref.onUnmount;
    var provider = (0, _useId["default"])({
      prefix: prefix
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Base, _objectSpread(_objectSpread({}, provider), {}, {
      id: provider.generateId(key, prefix, onUnmount)
    }));
  }
  afterEach(function () {
    return data.splice(0, data.length);
  });
  test('should provide a generateId method', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 'function';
    var actual = typeof data[0].generateId;
    expect(actual).toBe(expected);
  });
  test('should generate different ids for different instances of the same component', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {})]
    }));
    var firstID = data[0].id;
    var lastID = data[1].id;
    expect(firstID).not.toBe(lastID);
  });
  test('should maintain the same id across renders', function () {
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {})),
      rerender = _render.rerender;
    var expected = data[0].id;
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var actual = data[1].id;
    expect(actual).toBe(expected);
  });
  test('should prefix the id with the provided value', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      prefix: "my-id"
    }));
    var id = data[0].id;
    var expected = 'my-id';
    var actual = id.substring(0, 5);
    expect(actual).toBe(expected);
  });
  test('should call onUnmount callback', function () {
    var spy = jest.fn();
    var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        onUnmount: spy
      })),
      unmount = _render2.unmount;
    unmount();
    expect(spy).toHaveBeenCalledTimes(1);
  });
});