"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Resizable = void 0;
Object.defineProperty(exports, "ResizeContext", {
  enumerable: true,
  get: function get() {
    return _ResizeContext["default"];
  }
});
exports["default"] = void 0;
var _hoc = _interopRequireDefault(require("@enact/core/hoc"));
var _invariant = _interopRequireDefault(require("invariant"));
var _ResizeContext = _interopRequireDefault(require("./ResizeContext"));
var _useResize = _interopRequireDefault(require("./useResize"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * A higher-order component that handles component resize event.
 *
 * @module ui/Resizable
 * @exports Resizable
 */ /**
 * Default config for `Resizable`.
 *
 * @memberof ui/Resizable.Resizable
 * @hocconfig
 */
var defaultConfig = {
  /**
   * A handler to process the `resize` event.
   *
   * It should return a truthy value if the event should trigger a resize.
   *
   * @type {Function}
   * @default null
   * @see {@link core/handle}
   * @memberof ui/Resizable.Resizable.defaultConfig
   */
  filter: null,
  /**
   * The name of the event on the wrapped component to listen to for size changes.
   *
   * This event name will be passed to the wrapped component and will also be forwarded (if
   * needed) to the parent component.
   *
   * @type {String}
   * @required
   * @memberof ui/Resizable.Resizable.defaultConfig
   */
  resize: null
};

/**
 * A higher-order component that notifies a container that the wrapped component has been resized.
 *
 * It may be useful in cases where a component may need to update itself as a result of its children
 * changing in size, such as a {@link ui/Scroller|Scroller}.
 *
 * Containers must provide an `invalidateBounds` method via React's context in order for `Resizable`
 * instances to notify it of resize.
 *
 * The wrapped component must respond to the configured
 * {@link ui/Resizable.Resizable.defaultConfig.resize|resize} event.
 *
 * @class Resizable
 * @memberof ui/Resizable
 * @hoc
 * @public
 */
var Resizable = exports.Resizable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var resize = config.resize;
  !resize ? process.env.NODE_ENV !== "production" ? (0, _invariant["default"])(false, "resize is required by Resizable but was omitted when applied to ".concat(Wrapped.displayName)) : (0, _invariant["default"])(false) : void 0;

  // eslint-disable-next-line no-shadow
  return function Resizable(props) {
    var handlers = (0, _useResize["default"])(props, config);
    var resizableProps = Object.assign({}, props, handlers);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread({}, resizableProps));
  };
});
var _default = exports["default"] = Resizable;