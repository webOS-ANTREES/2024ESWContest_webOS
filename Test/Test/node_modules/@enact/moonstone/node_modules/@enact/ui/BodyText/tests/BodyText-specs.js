"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _Layout = require("../../Layout");
var _BodyText = _interopRequireWildcard(require("../BodyText"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
describe('BodyText Specs', function () {
  test('should render a single <p> tag', function () {
    var msg = 'Hello BodyText!';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText["default"], {
      children: msg
    }));
    var expected = 'P';
    var actual = _react.screen.getByText(msg).nodeName;
    expect(actual).toBe(expected);
  });
  test('should render BodyText with content', function () {
    var content = 'Hello BodyText!';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText["default"], {
      children: content
    }));
    var bodyText = _react.screen.getByText(content);
    expect(bodyText).toBeInTheDocument();
  });
  test('should not include the centered class by default', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText.BodyTextBase, {
      "data-testid": "bodyText"
    }));
    var bodyText = _react.screen.getByTestId('bodyText');
    var expected = 'centered';
    expect(bodyText).not.toHaveClass(expected);
  });
  test('should include the centered class if `centered` is true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText["default"], {
      centered: true,
      "data-testid": "bodyText"
    }));
    var bodyText = _react.screen.getByTestId('bodyText');
    var expected = 'centered';
    expect(bodyText).toHaveClass(expected);
  });
  test('should support changing the component element to a functional component', function () {
    var component = _Layout.Cell;
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText.BodyTextBase, {
      component: component,
      "data-testid": "bodyText"
    }));
    var bodyText = _react.screen.getByTestId('bodyText');
    var expected = 'cell';
    expect(bodyText).toHaveClass(expected);
  });
  test('should support changing the component element to a different DOM node', function () {
    var componentTag = 'address';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText.BodyTextBase, {
      component: componentTag,
      "data-testid": "bodyText"
    }));
    var bodyText = _react.screen.getByTestId('bodyText');
    var expected = 'ADDRESS';
    var actual = bodyText.nodeName;
    expect(actual).toBe(expected);
  });
});