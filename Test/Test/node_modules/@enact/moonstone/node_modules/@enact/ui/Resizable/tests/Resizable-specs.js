"use strict";

var _Registry = _interopRequireDefault(require("@enact/core/internal/Registry"));
var _react = require("@testing-library/react");
var _Resizable = _interopRequireWildcard(require("../Resizable"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
describe('Resizable', function () {
  var data;
  var DivComponent = function DivComponent(props) {
    data = props;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "component"
    });
  };
  var ResizableComponent = (0, _Resizable["default"])({
    resize: 'onClick'
  }, DivComponent);
  describe('config', function () {
    test('should pass \'onClick\' handler to the wrapped component', function () {
      var resizeRegistry = _Registry["default"].create();
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Resizable.ResizeContext.Provider, {
        value: resizeRegistry.register,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ResizableComponent, {})
      }));
      expect(data).toHaveProperty('onClick');
      var expected = 'function';
      var actual = typeof data.onClick;
      expect(actual).toBe(expected);
    });
  });
});