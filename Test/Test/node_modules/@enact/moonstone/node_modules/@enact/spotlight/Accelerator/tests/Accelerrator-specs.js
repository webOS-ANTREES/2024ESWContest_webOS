"use strict";

var _Accelerator = _interopRequireDefault(require("../Accelerator"));
var _react = require("@testing-library/react");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
describe('Accelerator', function () {
  test('should invoke callback function passed by processKey method', function () {
    var SpotlightAccelerator = new _Accelerator["default"]([3, 2]);
    var acceleratorCallback = jest.fn();
    var handleKeyDown = function handleKeyDown(ev) {
      SpotlightAccelerator.processKey(ev, acceleratorCallback);
    };
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        onKeyDown: handleKeyDown,
        children: "button"
      })
    }));
    var button = _react.screen.queryByText('button');
    _react.fireEvent.keyDown(button, {
      which: 13,
      keyCode: 13,
      code: 13
    });
    expect(acceleratorCallback).toHaveBeenCalled();
  });
  test('should set \'accelerating\' true when keyDown event occurs several time', function () {
    var SpotlightAccelerator = new _Accelerator["default"]([3, 2]);
    var acceleratorCallback = jest.fn();
    var actual = false;
    var handleKeyDown = function handleKeyDown(ev) {
      SpotlightAccelerator.processKey(ev, acceleratorCallback);
    };
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        onKeyDown: handleKeyDown,
        children: "button"
      })
    }));
    var button = _react.screen.queryByText('button');
    _react.fireEvent.keyDown(button, {
      which: 13,
      keyCode: 13,
      code: 13
    });
    actual = actual | SpotlightAccelerator.isAccelerating();
    _react.fireEvent.keyDown(button, {
      which: 13,
      keyCode: 13,
      code: 13
    });
    actual = actual | SpotlightAccelerator.isAccelerating();
    _react.fireEvent.keyDown(button, {
      which: 13,
      keyCode: 13,
      code: 13
    });
    actual = actual | SpotlightAccelerator.isAccelerating();
    expect(actual).toBe(1);
  });
});