"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _Spottable = _interopRequireDefault(require("../Spottable"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var id = 'test-spottable';
describe('Spottable', function () {
  test('should add the spottable class', function () {
    var Component = (0, _Spottable["default"])('div');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      "data-testid": id
    }));
    var div = _react.screen.getByTestId(id);
    var expectedClass = 'spottable';
    expect(div).toHaveClass(expectedClass);
  });
  test('should add the spottable class to a {disabled} component', function () {
    var Component = (0, _Spottable["default"])('div');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      "data-testid": id,
      disabled: true
    }));
    var div = _react.screen.getByTestId(id);
    var expectedClass = 'spottable';
    expect(div).toHaveClass(expectedClass);
  });
  test('should not add the spottable class to a {spotlightDisabled} component', function () {
    var Component = (0, _Spottable["default"])('div');
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      "data-testid": id,
      spotlightDisabled: true
    }));
    var div = _react.screen.getByTestId(id);
    var expectedClass = 'spottable';
    expect(div).not.toHaveClass(expectedClass);
  });
  test('should emit {onSpotlightDisappear} when unmounted while focused', function () {
    var spy = jest.fn();
    var Component = (0, _Spottable["default"])('div');
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": id,
        onSpotlightDisappear: spy
      })),
      unmount = _render.unmount;
    var div = _react.screen.getByTestId(id);
    div.focus();
    unmount();
    var expected = 1;
    expect(spy).toHaveBeenCalledTimes(expected);
    expect(spy).toBeCalledWith({
      type: 'onSpotlightDisappear'
    });
  });
  describe('shouldComponentUpdate', function () {
    test('should re-render when a non-Spottable prop changes', function () {
      var spy = jest.fn(function (props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
      });
      var Component = (0, _Spottable["default"])(spy);
      var _render2 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {})),
        rerender = _render2.rerender;
      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-id": "123"
      }));
      var expected = 3;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
    test('should re-render when {selectionKeys} changes', function () {
      var spy = jest.fn(function (props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
      });
      var Component = (0, _Spottable["default"])(spy);
      var _render3 = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
          selectionKeys: [1, 2, 3]
        })),
        rerender = _render3.rerender;
      rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        selectionKeys: [2, 1, 3]
      }));
      var expected = 3;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
    test('should not re-render when focused', function () {
      var spy = jest.fn(function (props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
      });
      var Component = (0, _Spottable["default"])(spy);
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        "data-testid": id
      }));
      var div = _react.screen.getByTestId(id);
      div.focus();
      var expected = 2;
      expect(spy).toHaveBeenCalledTimes(expected);
    });
  });
});