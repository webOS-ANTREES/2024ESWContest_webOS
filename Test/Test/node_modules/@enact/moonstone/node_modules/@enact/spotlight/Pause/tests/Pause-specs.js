"use strict";

var _Pause = _interopRequireWildcard(require("../Pause"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var PAUSED = 'Paused';
var NOT_PAUSED = 'Not Paused';
describe('Pause', function () {
  test('should pause spotlight', function () {
    var subject = new _Pause["default"]();
    subject.pause();
    var expected = PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    subject.resume();
    expect(actual).toBe(expected);
  });
  test('should resume spotlight', function () {
    var subject = new _Pause["default"]();
    subject.pause();
    subject.resume();
    var expected = NOT_PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    expect(actual).toBe(expected);
  });
  test('should not resume spotlight when another Paused instance is in control', function () {
    var subject = new _Pause["default"]();
    var another = new _Pause["default"]();
    another.pause();
    subject.pause();
    var expected = PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    another.resume();
    expect(actual).toBe(expected);
  });
  test('should not report paused when another Paused instance is in control', function () {
    var subject = new _Pause["default"]();
    var another = new _Pause["default"]();
    another.pause();
    subject.pause();
    var expected = NOT_PAUSED;
    var actual = subject.isPaused() ? PAUSED : NOT_PAUSED;
    another.resume();
    expect(actual).toBe(expected);
  });
  test('should not report paused when the global Spotlight is paused', function () {
    var subject = new _Pause["default"]();
    (0, _Pause.pause)();
    subject.pause();
    var expected = NOT_PAUSED;
    var actual = subject.isPaused() ? PAUSED : NOT_PAUSED;
    (0, _Pause.resume)();
    expect(actual).toBe(expected);
  });
  test('should allow the global Spotlight to resume', function () {
    var subject = new _Pause["default"]();
    subject.pause();
    (0, _Pause.resume)();
    var expected = NOT_PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    expect(actual).toBe(expected);
  });
  test('should return name of the pause instance', function () {
    var subject = new _Pause["default"]('paused');
    var expected = 'Pause<paused>';
    var actual = subject.toString();
    expect(actual).toBe(expected);
  });
});