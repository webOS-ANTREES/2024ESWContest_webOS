"use strict";

var _ilib = _interopRequireDefault(require("ilib"));
var _DateFmt = _interopRequireDefault(require("ilib/lib/DateFmt"));
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _DatePicker = _interopRequireDefault(require("../DatePicker"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var dateToLocaleString = function dateToLocaleString(date) {
  return new _DateFmt["default"]({
    date: 'dmwy',
    length: 'full',
    timezone: 'local',
    useNative: false
  }).format(date);
};
describe('DatePicker', function () {
  test('should not generate a label when value is undefined', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      "data-testid": "datePicker",
      title: "Date"
    }));
    var expected = 1;
    var actual = _react.screen.getByTestId('datePicker').children.item(0).children;
    expect(actual).toHaveLength(expected);
  });
  test('should emit an onChange event when changing a component picker', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleChange = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      locale: "en-US",
      onChange: handleChange,
      open: true,
      title: "Date",
      value: new Date(2000, 6, 15)
    }));
    var monthPickerUp = _react.screen.getByLabelText('7 month change a value with up down button').children.item(0);
    yield user.click(monthPickerUp);
    var expected = 1;
    expect(handleChange).toBeCalledTimes(expected);
  }));
  test('should omit labels when noLabels is true', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      "data-testid": "datePicker",
      day: 1,
      maxDays: 31,
      maxMonths: 12,
      month: 1,
      noLabels: true,
      open: true,
      order: ['m', 'd', 'y'],
      title: "Date",
      year: 2000
    }));
    var dayLabel = _react.screen.queryByText('day');
    var monthLabel = _react.screen.queryByText('month');
    var yearLabel = _react.screen.queryByText('year');
    expect(dayLabel).toBeNull();
    expect(monthLabel).toBeNull();
    expect(yearLabel).toBeNull();
  });
  test('should create pickers arranged by order', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      day: 1,
      maxDays: 31,
      maxMonths: 12,
      month: 1,
      open: true,
      order: ['m', 'd', 'y'],
      title: "Date",
      year: 2000
    }));
    var dateComponent = _react.screen.getByText('day').parentElement.parentElement;
    var expectedFirst = 'month';
    var actualFirst = dateComponent.children.item(0);
    var expectedSecond = 'day';
    var actualSecond = dateComponent.children.item(1);
    var expectedThird = 'year';
    var actualThird = dateComponent.children.item(2);
    expect(actualFirst).toHaveClass(expectedFirst);
    expect(actualSecond).toHaveClass(expectedSecond);
    expect(actualThird).toHaveClass(expectedThird);
  });
  test('should accept a JavaScript Date for its value prop', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 8, 12)
    }));
    var year = _react.screen.getByText('2000');
    expect(year).toBeInTheDocument();
  });
  test('should set "dayAriaLabel" to day picker', function () {
    var label = 'custom day aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      dayAriaLabel: label,
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 8, 12)
    }));
    var dayPicker = _react.screen.getByLabelText(label).parentElement;
    var expected = 'day';
    expect(dayPicker).toBeInTheDocument();
    expect(dayPicker).toHaveClass(expected);
  });
  test('should set "monthAriaLabel" to month picker', function () {
    var label = 'custom month aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      locale: "en-US",
      monthAriaLabel: label,
      open: true,
      title: "Date",
      value: new Date(2000, 8, 12)
    }));
    var monthPicker = _react.screen.getByLabelText(label).parentElement;
    var expected = 'month';
    expect(monthPicker).toBeInTheDocument();
    expect(monthPicker).toHaveClass(expected);
  });
  test('should set "yearAriaLabel" to year picker', function () {
    var label = 'custom year aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 8, 12),
      yearAriaLabel: label
    }));
    var yearPicker = _react.screen.getByLabelText(label).parentElement;
    var expected = 'year';
    expect(yearPicker).toBeInTheDocument();
    expect(yearPicker).toHaveClass(expected);
  });
  test('should set "dayLabel" to day picker', function () {
    var label = 'custom day label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      dayLabel: label,
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1)
    }));
    var dayPicker = _react.screen.getByText(label).parentElement;
    var expected = 'day';
    expect(dayPicker).toHaveClass(expected);
  });
  test('should set "monthLabel" to month picker', function () {
    var label = 'custom month label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      monthLabel: label,
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1)
    }));
    var monthPicker = _react.screen.getByText(label).parentElement;
    var expected = 'month';
    expect(monthPicker).toHaveClass(expected);
  });
  test('should set "yearLabel" to year picker', function () {
    var label = 'custom year label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1),
      yearLabel: label
    }));
    var yearPicker = _react.screen.getByText(label).parentElement;
    var expected = 'year';
    expect(yearPicker).toHaveClass(expected);
  });
  test('should set "data-webos-voice-disabled" to day picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      "data-webos-voice-disabled": true,
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 1, 1)
    }));
    var dayPicker = _react.screen.getByLabelText('1 day change a value with up down button');
    var expected = 'data-webos-voice-disabled';
    expect(dayPicker).toHaveAttribute(expected);
  });
  test('should set "data-webos-voice-disabled" to month picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      "data-webos-voice-disabled": true,
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 0, 1)
    }));
    var monthPicker = _react.screen.getByLabelText('1 month change a value with up down button');
    var expected = 'data-webos-voice-disabled';
    expect(monthPicker).toHaveAttribute(expected);
  });
  test('should set "data-webos-voice-disabled" to year picker when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      "data-webos-voice-disabled": true,
      locale: "en-US",
      open: true,
      title: "Date",
      value: new Date(2000, 1, 1)
    }));
    var yearPicker = _react.screen.getByLabelText('2000 year change a value with up down button');
    var expected = 'data-webos-voice-disabled';
    expect(yearPicker).toHaveAttribute(expected);
  });
  test('should format the date label to locale `en-US`', function () {
    var date = new Date(2000, 0, 1);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      locale: "en-US",
      open: true,
      title: "Date",
      value: date
    }));
    var header = _react.screen.getByText(dateToLocaleString(date)).parentElement.parentElement;
    var expected = 'label';
    expect(header).toHaveClass(expected);
  });
  test('should format the date label to locale `ar-SA`', function () {
    _ilib["default"].setLocale('ar-SA');
    var date = new Date(2000, 0, 1);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      locale: "ar-SA",
      open: true,
      title: "Date",
      value: date
    }));
    var header = _react.screen.getByText(dateToLocaleString(date)).parentElement.parentElement;
    var expected = 'label';
    expect(header).toHaveClass(expected);
  });
});