"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ToggleIconDecorator = exports.ToggleIconBase = exports.ToggleIcon = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));
var _ToggleIcon = _interopRequireDefault(require("@enact/ui/ToggleIcon"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Provides Moonstone-themed Icon component with interactive toggleable capabilities.
 *
 * `ToggleIcon` does not implement a visual change when a user interacts with the control and must
 * be customized by the consumer using {@link ui/ToggleIcon.ToggleIconBase.css|css className overrides}.
 *
 * Often, an {@link moonstone/Icon.Icon|Icon value} is passed as `children` to represent the
 * selected state but is not required. Omitting `children` allows the consumer to implement more
 * advanced approaches such as styling the `::before` and `::after` pseudo-elements to save a DOM
 * node.
 *
 * The following Moonstone components use `ToggleIcon`, and make good examples of various usages.
 *
 * * {@link moonstone/Checkbox.Checkbox|Checkbox},
 * * {@link moonstone/FormCheckbox.FormCheckbox|FormCheckbox},
 * * {@link moonstone/Switch.Switch|Switch},
 * * {@link moonstone/RadioItem.RadioItem|RadioItem}, and
 * * {@link moonstone/SelectableItem.SelectableItem|SelectableItem}.
 *
 * @example
 * <ToggleIcon onToggle={(props)=> console.log(props.selected)}>
 *   check
 * </ToggleIcon>
 *
 * @module moonstone/ToggleIcon
 * @exports ToggleIcon
 * @exports ToggleIconBase
 * @exports ToggleIconDecorator
 */ /**
 * A component that indicates a boolean state.
 *
 * @class ToggleIconBase
 * @memberof moonstone/ToggleIcon
 * @extends ui/ToggleIcon.ToggleIcon
 * @ui
 * @public
 */
var ToggleIconBase = exports.ToggleIconBase = (0, _kind["default"])({
  name: 'ToggleIcon',
  render: function render(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleIcon["default"], _objectSpread(_objectSpread({}, props), {}, {
      iconComponent: _Icon["default"]
    }));
  }
});

/**
 * Moonstone-specific behaviors to apply to `ToggleIconBase`.
 *
 * @hoc
 * @memberof moonstone/ToggleIcon
 * @mixes moonstone/Skinnable.Skinnable
 * @public
 */
var ToggleIconDecorator = exports.ToggleIconDecorator = (0, _compose["default"])(_Pure["default"], _Skinnable["default"]);

/**
 * A customizable Moonstone starting point {@link moonstone/Icon.Icon|Icon} that responds to the
 * `selected` prop.
 *
 * @class ToggleIcon
 * @memberof moonstone/ToggleIcon
 * @extends moonstone/ToggleIcon.ToggleIconBase
 * @mixes moonstone/ToggleIcon.ToggleIconDecorator
 * @ui
 * @public
 */
var ToggleIcon = exports.ToggleIcon = ToggleIconDecorator(ToggleIconBase);
var _default = exports["default"] = ToggleIcon;