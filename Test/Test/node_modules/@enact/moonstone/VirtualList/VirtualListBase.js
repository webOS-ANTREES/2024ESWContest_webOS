"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VirtualListBaseNative = exports.VirtualListBase = exports.ScrollableVirtualListNative = exports.ScrollableVirtualList = void 0;
var _target = require("@enact/spotlight/src/target");
var _keymap = require("@enact/core/keymap");
var _spotlight = _interopRequireWildcard(require("@enact/spotlight"));
var _Accelerator = _interopRequireDefault(require("@enact/spotlight/Accelerator"));
var _Pause = _interopRequireDefault(require("@enact/spotlight/Pause"));
var _Spottable = require("@enact/spotlight/Spottable");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clamp = _interopRequireDefault(require("ramda/src/clamp"));
var _react = require("react");
var _warning = _interopRequireDefault(require("warning"));
var _Scrollable = require("../Scrollable");
var _ScrollableNative = _interopRequireDefault(require("../Scrollable/ScrollableNative"));
var _UiVirtualList = require("../UiVirtualList");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["data-webos-voice-disabled", "data-webos-voice-focused", "data-webos-voice-group-label", "itemRenderer", "itemsRenderer", "role"],
  _excluded2 = ["index"],
  _excluded3 = ["role"],
  _excluded4 = ["role"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var SpotlightAccelerator = new _Accelerator["default"]();
var SpotlightPlaceholder = (0, _Spottable.Spottable)('div');
var dataContainerDisabledAttribute = 'data-spotlight-container-disabled',
  isDown = (0, _keymap.is)('down'),
  isEnter = (0, _keymap.is)('enter'),
  isLeft = (0, _keymap.is)('left'),
  isPageUp = (0, _keymap.is)('pageUp'),
  isPageDown = (0, _keymap.is)('pageDown'),
  isRight = (0, _keymap.is)('right'),
  isUp = (0, _keymap.is)('up'),
  JS = 'JS',
  Native = 'Native',
  getNumberValue = function getNumberValue(index) {
    // using '+ operator' for string > number conversion based on performance: https://jsperf.com/convert-string-to-number-techniques/7
    var number = +index;
    // should return -1 if index is not a number or a negative value
    return number >= 0 ? number : -1;
  },
  nop = function nop() {};

/**
 * The base version of {@link moonstone/VirtualList.VirtualListBase|VirtualListBase} and
 * {@link moonstone/VirtualList.VirtualListBaseNative|VirtualListBaseNative}.
 *
 * @class VirtualListCore
 * @memberof moonstone/VirtualList
 * @ui
 * @private
 */
var VirtualListBaseFactory = function VirtualListBaseFactory(type) {
  var _class;
  var UiBase = type === JS ? _UiVirtualList.VirtualListBase : _UiVirtualList.VirtualListBaseNative;
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(VirtualListCore, _Component);
    var _super = _createSuper(VirtualListCore);
    function VirtualListCore(props) {
      var _this;
      _classCallCheck(this, VirtualListCore);
      _this = _super.call(this, props);
      _this.isScrolledBy5way = false;
      _this.isScrolledByJump = false;
      _this.isWrappedBy5way = false;
      _this.lastFocusedIndex = null;
      _this.preservedIndex = null;
      _this.lastSpotlightDirection = null;
      _this.restoreLastFocused = false;
      _this.uiRefCurrent = null;
      _this.setContainerDisabled = function (bool) {
        var spotlightId = _this.props.spotlightId,
          containerNode = document.querySelector("[data-spotlight-id=\"".concat(spotlightId, "\"]"));
        if (containerNode) {
          containerNode.setAttribute(dataContainerDisabledAttribute, bool);
          if (bool) {
            document.addEventListener('keydown', _this.handleGlobalKeyDown, {
              capture: true
            });
          } else {
            document.removeEventListener('keydown', _this.handleGlobalKeyDown, {
              capture: true
            });
          }
        }
      };
      _this.configureSpotlight = function (spotlightId) {
        var spacing = _this.props.spacing;
        _spotlight["default"].set(spotlightId, {
          enterTo: 'last-focused',
          /*
           * Returns the data-index as the key for last focused
           */
          lastFocusedPersist: _this.lastFocusedPersist,
          /*
           * Restores the data-index into the placeholder if its the only element. Tries to find a
           * matching child otherwise.
           */
          lastFocusedRestore: _this.lastFocusedRestore,
          /*
           * Directs spotlight focus to favor straight elements that are within range of `spacing`
           * over oblique elements, like scroll buttons.
           */
          obliqueMultiplier: spacing > 0 ? spacing : 1
        });
      };
      _this.lastFocusedPersist = function () {
        if (_this.lastFocusedIndex != null) {
          return {
            container: false,
            element: true,
            key: _this.lastFocusedIndex
          };
        }
      };
      /*
       * Restores the data-index into the placeholder if it exists. Tries to find a matching child
       * otherwise.
       */
      _this.lastFocusedRestore = function (_ref, all) {
        var key = _ref.key;
        var placeholder = all.find(function (el) {
          return 'vlPlaceholder' in el.dataset;
        });
        if (placeholder) {
          placeholder.dataset.index = key;
          return placeholder;
        }
        return all.reduce(function (focused, node) {
          return focused || Number(node.dataset.index) === key && node;
        }, null);
      };
      /*
       * Returns a node for a given index after checking `data-index` attribute.
       * Returns null if no matching node is found.
       */
      _this.getItemNode = function (index) {
        var numOfItems = _this.uiRefCurrent.state.numOfItems,
          itemContainerNode = _this.uiRefCurrent.itemContainerRef.current;
        if (itemContainerNode) {
          var itemNode = itemContainerNode.children[index % numOfItems];
          return itemNode && getNumberValue(itemNode.dataset.index) === index ? itemNode : null;
        }
        return null;
      };
      _this.findSpottableItem = function (indexFrom, indexTo) {
        var dataSize = _this.props.dataSize;
        if (indexFrom < 0 && indexTo < 0 || indexFrom >= dataSize && indexTo >= dataSize) {
          return -1;
        } else {
          return (0, _clamp["default"])(0, dataSize - 1, indexFrom);
        }
      };
      _this.getNextIndex = function (_ref2) {
        var index = _ref2.index,
          keyCode = _ref2.keyCode,
          repeat = _ref2.repeat;
        var _this$props = _this.props,
          dataSize = _this$props.dataSize,
          rtl = _this$props.rtl,
          wrap = _this$props.wrap;
        var _this$uiRefCurrent = _this.uiRefCurrent,
          isPrimaryDirectionVertical = _this$uiRefCurrent.isPrimaryDirectionVertical,
          dimensionToExtent = _this$uiRefCurrent.dimensionToExtent;
        var column = index % dimensionToExtent;
        var row = (index - column) % dataSize / dimensionToExtent;
        var isDownKey = isDown(keyCode);
        var isLeftMovement = !rtl && isLeft(keyCode) || rtl && isRight(keyCode);
        var isRightMovement = !rtl && isRight(keyCode) || rtl && isLeft(keyCode);
        var isUpKey = isUp(keyCode);
        var isNextRow = index + dimensionToExtent < dataSize;
        var isNextAdjacent = column < dimensionToExtent - 1 && index < dataSize - 1;
        var isBackward = isPrimaryDirectionVertical && isUpKey || !isPrimaryDirectionVertical && isLeftMovement || null;
        var isForward = isPrimaryDirectionVertical && isDownKey || !isPrimaryDirectionVertical && isRightMovement || null;
        var isWrapped = false;
        var nextIndex = -1;
        var targetIndex = -1;
        if (index >= 0) {
          if (isPrimaryDirectionVertical) {
            if (isUpKey && row) {
              targetIndex = index - dimensionToExtent;
            } else if (isDownKey && isNextRow) {
              targetIndex = index + dimensionToExtent;
            } else if (isLeftMovement && column) {
              targetIndex = index - 1;
            } else if (isRightMovement && isNextAdjacent) {
              targetIndex = index + 1;
            }
          } else if (isLeftMovement && row) {
            targetIndex = index - dimensionToExtent;
          } else if (isRightMovement && isNextRow) {
            targetIndex = index + dimensionToExtent;
          } else if (isUpKey && column) {
            targetIndex = index - 1;
          } else if (isDownKey && isNextAdjacent) {
            targetIndex = index + 1;
          }
          if (targetIndex >= 0) {
            nextIndex = targetIndex;
          }
        }
        if (!repeat && nextIndex === -1 && wrap) {
          if (isForward && _this.findSpottableItem((row + 1) * dimensionToExtent, dataSize) < 0) {
            nextIndex = _this.findSpottableItem(0, index);
            isWrapped = true;
          } else if (isBackward && _this.findSpottableItem(-1, row * dimensionToExtent - 1) < 0) {
            nextIndex = _this.findSpottableItem(dataSize, index);
            isWrapped = true;
          }
        }
        return {
          isDownKey: isDownKey,
          isUpKey: isUpKey,
          isLeftMovement: isLeftMovement,
          isRightMovement: isRightMovement,
          isWrapped: isWrapped,
          nextIndex: nextIndex
        };
      };
      /**
       * Handle `onKeyDown` event
       */
      _this.onAcceleratedKeyDown = function (_ref3) {
        var isWrapped = _ref3.isWrapped,
          keyCode = _ref3.keyCode,
          nextIndex = _ref3.nextIndex,
          repeat = _ref3.repeat,
          target = _ref3.target;
        var _this$props2 = _this.props,
          cbScrollTo = _this$props2.cbScrollTo,
          wrap = _this$props2.wrap;
        var _this$uiRefCurrent2 = _this.uiRefCurrent,
          dimensionToExtent = _this$uiRefCurrent2.dimensionToExtent,
          _this$uiRefCurrent2$p = _this$uiRefCurrent2.primary,
          clientSize = _this$uiRefCurrent2$p.clientSize,
          itemSize = _this$uiRefCurrent2$p.itemSize,
          scrollPosition = _this$uiRefCurrent2.scrollPosition,
          scrollPositionTarget = _this$uiRefCurrent2.scrollPositionTarget;
        var index = getNumberValue(target.dataset.index);
        var direction = (0, _spotlight.getDirection)(keyCode);
        _this.isScrolledBy5way = false;
        _this.isScrolledByJump = false;
        if (nextIndex >= 0) {
          var row = Math.floor(index / dimensionToExtent),
            nextRow = Math.floor(nextIndex / dimensionToExtent),
            start = _this.uiRefCurrent.getGridPosition(nextIndex).primaryPosition,
            end = _this.props.itemSizes ? _this.uiRefCurrent.getItemBottomPosition(nextIndex) : start + itemSize,
            startBoundary = type === Native ? scrollPosition : scrollPositionTarget,
            endBoundary = startBoundary + clientSize;
          _this.lastFocusedIndex = nextIndex;
          if (start >= startBoundary && end <= endBoundary) {
            // The next item could be still out of viewport. So we need to prevent scrolling into view with `isScrolledBy5way` flag.
            _this.isScrolledBy5way = true;
            _this.focusByIndex(nextIndex, direction);
            _this.isScrolledBy5way = false;
          } else if (row === nextRow) {
            _this.focusByIndex(nextIndex, direction);
          } else {
            _this.isScrolledBy5way = true;
            _this.isWrappedBy5way = isWrapped;
            if (isWrapped && wrap === true && _this.getItemNode(nextIndex) === null) {
              _this.pause.pause();
              target.blur();
            }
            _this.focusByIndex(nextIndex, direction);
            cbScrollTo({
              index: nextIndex,
              stickTo: index < nextIndex ? 'end' : 'start',
              animate: !(isWrapped && wrap === 'noAnimation')
            });
          }
        } else if (!repeat && _spotlight["default"].move(direction)) {
          SpotlightAccelerator.reset();
        }
      };
      _this.onKeyDown = function (ev) {
        var keyCode = ev.keyCode,
          target = ev.target;
        var direction = (0, _spotlight.getDirection)(keyCode);
        if (direction) {
          _spotlight["default"].setPointerMode(false);
          if (SpotlightAccelerator.processKey(ev, nop)) {
            ev.stopPropagation();
          } else {
            var spotlightId = _this.props.spotlightId;
            var targetIndex = target.dataset.index;
            var isNotItem =
            // if target has an index, it must be an item
            !targetIndex &&
            // if it lacks an index and is inside the scroller, we need to handle this
            target.matches("[data-spotlight-id=\"".concat(spotlightId, "\"] *"));
            var index = !isNotItem ? getNumberValue(targetIndex) : -1;
            var candidate = (0, _target.getTargetByDirectionFromElement)(direction, target);
            var candidateIndex = candidate && candidate.dataset && getNumberValue(candidate.dataset.index);
            var isLeaving = false;
            if (isNotItem) {
              // if the focused node is not an item
              if (!ev.currentTarget.contains(candidate)) {
                // if the candidate is out of a list
                isLeaving = true;
              }
            } else if (candidateIndex !== index) {
              // the focused node is an item and focus will move out of the item
              var repeat = ev.repeat;
              var _this$getNextIndex = _this.getNextIndex({
                  index: index,
                  keyCode: keyCode,
                  repeat: repeat
                }),
                isDownKey = _this$getNextIndex.isDownKey,
                isUpKey = _this$getNextIndex.isUpKey,
                isLeftMovement = _this$getNextIndex.isLeftMovement,
                isRightMovement = _this$getNextIndex.isRightMovement,
                isWrapped = _this$getNextIndex.isWrapped,
                nextIndex = _this$getNextIndex.nextIndex;
              if (nextIndex >= 0) {
                // if the candidate is another item
                ev.preventDefault();
                ev.stopPropagation();
                _this.onAcceleratedKeyDown({
                  isWrapped: isWrapped,
                  keyCode: keyCode,
                  nextIndex: nextIndex,
                  repeat: repeat,
                  target: target
                });
              } else {
                // if the candidate is not found
                var _this$props3 = _this.props,
                  dataSize = _this$props3.dataSize,
                  focusableScrollbar = _this$props3.focusableScrollbar,
                  isHorizontalScrollbarVisible = _this$props3.isHorizontalScrollbarVisible,
                  isVerticalScrollbarVisible = _this$props3.isVerticalScrollbarVisible;
                var _this$uiRefCurrent3 = _this.uiRefCurrent,
                  dimensionToExtent = _this$uiRefCurrent3.dimensionToExtent,
                  isPrimaryDirectionVertical = _this$uiRefCurrent3.isPrimaryDirectionVertical;
                var column = index % dimensionToExtent;
                var row = (index - column) % dataSize / dimensionToExtent;
                var directions = {};
                var isScrollbarVisible;
                if (isPrimaryDirectionVertical) {
                  directions.left = isLeftMovement;
                  directions.right = isRightMovement;
                  directions.up = isUpKey;
                  directions.down = isDownKey;
                  isScrollbarVisible = isVerticalScrollbarVisible;
                } else {
                  directions.left = isUpKey;
                  directions.right = isDownKey;
                  directions.up = isLeftMovement;
                  directions.down = isRightMovement;
                  isScrollbarVisible = isHorizontalScrollbarVisible;
                }
                isLeaving = directions.up && row === 0 || directions.down && row === Math.floor((dataSize - 1) % dataSize / dimensionToExtent) || directions.left && column === 0 || directions.right && (!focusableScrollbar || !isScrollbarVisible) && (column === dimensionToExtent - 1 || index === dataSize - 1 && row === 0);
                if (repeat && isLeaving) {
                  // if focus is about to leave items by holding down an arrowy key
                  ev.preventDefault();
                  ev.stopPropagation();
                } else if (!isLeaving && _spotlight["default"].move(direction)) {
                  var nextTargetIndex = _spotlight["default"].getCurrent().dataset.index;
                  ev.preventDefault();
                  ev.stopPropagation();
                  if (typeof nextTargetIndex === 'string') {
                    _this.onAcceleratedKeyDown({
                      keyCode: keyCode,
                      nextIndex: getNumberValue(nextTargetIndex),
                      repeat: repeat,
                      target: target
                    });
                  }
                }
              }
            }
            if (isLeaving) {
              SpotlightAccelerator.reset();
            }
          }
        } else if (isPageUp(keyCode) || isPageDown(keyCode)) {
          _this.isScrolledBy5way = false;
        }
      };
      _this.onKeyUp = function (_ref4) {
        var keyCode = _ref4.keyCode;
        if ((0, _spotlight.getDirection)(keyCode) || isEnter(keyCode)) {
          SpotlightAccelerator.reset();
        }
      };
      /**
       * Handle global `onKeyDown` event
       */
      _this.handleGlobalKeyDown = function () {
        _this.setContainerDisabled(false);
      };
      /**
       * Focus on the Node of the VirtualList item
       */
      _this.focusOnNode = function (node) {
        if (node) {
          return _spotlight["default"].focus(node);
        }
        return false;
      };
      _this.focusByIndex = function (index, direction) {
        var item = _this.getItemNode(index);
        var returnVal = false;
        if (!item && index >= 0 && index < _this.props.dataSize) {
          // Item is valid but since the the dom doesn't exist yet, we set the index to focus after the ongoing update
          _this.preservedIndex = index;
          _this.lastSpotlightDirection = direction;
          _this.restoreLastFocused = true;
        } else {
          var current = _spotlight["default"].getCurrent(),
            candidate = current ? (0, _target.getTargetByDirectionFromElement)(direction, current) : item;
          if (_this.isWrappedBy5way) {
            SpotlightAccelerator.reset();
            _this.isWrappedBy5way = false;
          }
          _this.pause.resume();
          if (item.contains(candidate)) {
            returnVal = _this.focusOnNode(candidate);
          } else {
            returnVal = _this.focusOnNode(item);
          }
          _this.isScrolledByJump = false;
        }
        return returnVal;
      };
      /**
       * Manage a placeholder
       */
      _this.handlePlaceholderFocus = function (ev) {
        var placeholder = ev.currentTarget;
        if (placeholder) {
          var index = placeholder.dataset.index;
          if (index) {
            _this.preservedIndex = getNumberValue(index);
            _this.lastSpotlightDirection = null;
            _this.restoreLastFocused = true;
          }
        }
      };
      _this.handleUpdateItems = function (_ref5) {
        var firstIndex = _ref5.firstIndex,
          lastIndex = _ref5.lastIndex;
        if (_this.restoreLastFocused && _this.preservedIndex >= firstIndex && _this.preservedIndex <= lastIndex) {
          _this.restoreFocus();
        }
      };
      /**
       * Restore the focus of VirtualList
       */
      _this.isPlaceholderFocused = function () {
        var current = _spotlight["default"].getCurrent();
        if (current && current.dataset.vlPlaceholder && _this.uiRefCurrent.containerRef.current.contains(current)) {
          return true;
        }
        return false;
      };
      _this.restoreFocus = function () {
        if (_this.restoreLastFocused && !_this.isPlaceholderFocused()) {
          var spotlightId = _this.props.spotlightId,
            node = _this.uiRefCurrent.containerRef.current.querySelector("[data-spotlight-id=\"".concat(spotlightId, "\"] [data-index=\"").concat(_this.preservedIndex, "\"]"));
          if (node) {
            // if we're supposed to restore focus and virtual list has positioned a set of items
            // that includes lastFocusedIndex, clear the indicator
            _this.restoreLastFocused = false;

            // try to focus the last focused item
            _this.isScrolledByJump = true;
            var foundLastFocused = _this.focusByIndex(_this.preservedIndex, _this.lastSpotlightDirection);
            _this.isScrolledByJump = false;

            // but if that fails (because it isn't found or is disabled), focus the container so
            // spotlight isn't lost
            if (!foundLastFocused) {
              _this.restoreLastFocused = true;
              _spotlight["default"].focus(spotlightId);
            }
          }
        }
      };
      /**
       * calculator
       */
      _this.calculatePositionOnFocus = function (_ref6) {
        var item = _ref6.item,
          _ref6$scrollPosition = _ref6.scrollPosition,
          scrollPosition = _ref6$scrollPosition === void 0 ? _this.uiRefCurrent.scrollPosition : _ref6$scrollPosition;
        var pageScroll = _this.props.pageScroll,
          numOfItems = _this.uiRefCurrent.state.numOfItems,
          primary = _this.uiRefCurrent.primary,
          offsetToClientEnd = primary.clientSize - primary.itemSize,
          focusedIndex = getNumberValue(item.getAttribute(_Scrollable.dataIndexAttribute));
        if (focusedIndex >= 0) {
          var gridPosition = _this.uiRefCurrent.getGridPosition(focusedIndex);
          if (numOfItems > 0 && focusedIndex % numOfItems !== _this.lastFocusedIndex % numOfItems) {
            var node = _this.getItemNode(_this.lastFocusedIndex);
            if (node) {
              node.blur();
            }
          }
          _this.lastFocusedIndex = focusedIndex;
          if (primary.clientSize >= primary.itemSize) {
            if (gridPosition.primaryPosition > scrollPosition + offsetToClientEnd) {
              // forward over
              gridPosition.primaryPosition -= pageScroll ? 0 : offsetToClientEnd;
            } else if (gridPosition.primaryPosition >= scrollPosition) {
              // inside of client
              if (type === JS) {
                gridPosition.primaryPosition = scrollPosition;
              } else {
                // This code uses the trick to change the target position slightly which will not affect the actual result
                // since a browser ignore `scrollTo` method if the target position is same as the current position.
                gridPosition.primaryPosition = scrollPosition + (_this.uiRefCurrent.scrollPosition === scrollPosition ? 0.1 : 0);
              }
            } else {
              // backward over
              gridPosition.primaryPosition -= pageScroll ? offsetToClientEnd : 0;
            }
          }

          // Since the result is used as a target position to be scrolled,
          // scrondaryPosition should be 0 here.
          gridPosition.secondaryPosition = 0;
          return _this.uiRefCurrent.gridPositionToItemPosition(gridPosition);
        }
      };
      _this.shouldPreventScrollByFocus = function () {
        return type === JS ? _this.isScrolledBy5way : _this.isScrolledBy5way || _this.isScrolledByJump;
      };
      _this.shouldPreventOverscrollEffect = function () {
        return _this.isWrappedBy5way;
      };
      _this.setLastFocusedNode = function (node) {
        _this.lastFocusedIndex = node.dataset && getNumberValue(node.dataset.index);
      };
      _this.updateStatesAndBounds = function (_ref7) {
        var dataSize = _ref7.dataSize,
          moreInfo = _ref7.moreInfo,
          numOfItems = _ref7.numOfItems;
        var _assertThisInitialize = _assertThisInitialized(_this),
          preservedIndex = _assertThisInitialize.preservedIndex;
        return _this.restoreLastFocused && numOfItems > 0 && preservedIndex < dataSize && (preservedIndex < moreInfo.firstVisibleIndex || preservedIndex > moreInfo.lastVisibleIndex);
      };
      _this.getScrollBounds = function () {
        return _this.uiRefCurrent.getScrollBounds();
      };
      _this.initUiRef = function (ref) {
        if (ref) {
          _this.uiRefCurrent = ref;
          _this.props.initUiChildRef(ref);
        }
      };
      var _spotlightId = props.spotlightId;
      if (_spotlightId) {
        _this.configureSpotlight(_spotlightId);
      }
      _this.pause = new _Pause["default"]('VirtualListBase');
      return _this;
    }
    _createClass(VirtualListCore, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        var containerNode = this.uiRefCurrent.containerRef.current;
        var scrollerNode = document.querySelector("[data-spotlight-id=\"".concat(this.props.spotlightId, "\"]"));
        if (type === JS) {
          // prevent native scrolling by Spotlight
          this.preventScroll = function () {
            containerNode.scrollTop = 0;
            containerNode.scrollLeft = _this2.props.rtl ? containerNode.scrollWidth : 0;
          };
          if (containerNode && containerNode.addEventListener) {
            containerNode.addEventListener('scroll', this.preventScroll);
          }
        }
        if (scrollerNode && scrollerNode.addEventListener) {
          scrollerNode.addEventListener('keydown', this.onKeyDown, {
            capture: true
          });
          scrollerNode.addEventListener('keyup', this.onKeyUp, {
            capture: true
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.spotlightId !== this.props.spotlightId) {
          this.configureSpotlight(this.props.spotlightId);
        }
        this.restoreFocus();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var containerNode = this.uiRefCurrent.containerRef.current;
        var scrollerNode = document.querySelector("[data-spotlight-id=\"".concat(this.props.spotlightId, "\"]"));
        if (type === JS) {
          // remove a function for preventing native scrolling by Spotlight
          if (containerNode && containerNode.removeEventListener) {
            containerNode.removeEventListener('scroll', this.preventScroll);
          }
        }
        if (scrollerNode && scrollerNode.removeEventListener) {
          scrollerNode.removeEventListener('keydown', this.onKeyDown, {
            capture: true
          });
          scrollerNode.removeEventListener('keyup', this.onKeyUp, {
            capture: true
          });
        }
        this.pause.resume();
        SpotlightAccelerator.reset();
        this.setContainerDisabled(false);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;
        var _this$props4 = this.props,
          voiceDisabled = _this$props4['data-webos-voice-disabled'],
          voiceFocused = _this$props4['data-webos-voice-focused'],
          voiceGroupLabel = _this$props4['data-webos-voice-group-label'],
          _itemRenderer = _this$props4.itemRenderer,
          _itemsRenderer = _this$props4.itemsRenderer,
          role = _this$props4.role,
          rest = _objectWithoutProperties(_this$props4, _excluded);
        delete rest.initUiChildRef;
        // not used by VirtualList
        delete rest.focusableScrollbar;
        delete rest.scrollAndFocusScrollbarButton;
        delete rest.spotlightId;
        delete rest.wrap;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(UiBase, _objectSpread(_objectSpread({}, rest), {}, {
          containerProps: {
            'data-webos-voice-focused': voiceFocused,
            'data-webos-voice-group-label': voiceGroupLabel,
            'data-webos-voice-disabled': voiceDisabled
          },
          itemRenderer: function itemRenderer(_ref8) {
            var index = _ref8.index,
              itemRest = _objectWithoutProperties(_ref8, _excluded2);
            return (
              // eslint-disable-line react/jsx-no-bind
              _itemRenderer(_objectSpread(_objectSpread({}, itemRest), {}, _defineProperty(_defineProperty({}, _Scrollable.dataIndexAttribute, index), "index", index)))
            );
          },
          onUpdateItems: this.handleUpdateItems,
          ref: this.initUiRef,
          updateStatesAndBounds: this.updateStatesAndBounds,
          itemsRenderer: function itemsRenderer(props) {
            // eslint-disable-line react/jsx-no-bind
            return _itemsRenderer(_objectSpread(_objectSpread({}, props), {}, {
              handlePlaceholderFocus: _this3.handlePlaceholderFocus,
              role: role
            }));
          }
        }));
      }
    }]);
    return VirtualListCore;
  }(_react.Component), _class.propTypes = /** @lends moonstone/VirtualList.VirtualListBase.prototype */{
    /**
     * The `render` function called for each item in the list.
     *
     * > NOTE: The list does NOT always render a component whenever its render function is called
     * due to performance optimization.
     *
     * Usage:
     * ```
     * renderItem = ({index, ...rest}) => {
     * 	return (
     * 		<MyComponent index={index} {...rest} />
     * 	);
     * }
     * ```
     *
     * @type {Function}
     * @param {Object} event
     * @param {Number} event.data-index It is required for Spotlight 5-way navigation. Pass to the root element in the component.
     * @param {Number} event.index The index number of the component to render
     * @param {Number} event.key It MUST be passed as a prop to the root element in the component for DOM recycling.
     *
     * @required
     * @public
     */
    itemRenderer: _propTypes["default"].func.isRequired,
    /**
     * The render function for the items.
     *
     * @type {Function}
     * @required
     * @private
     */
    itemsRenderer: _propTypes["default"].func.isRequired,
    /**
     * Callback method of scrollTo.
     * Normally, {@link moonstone/UiScrollable.Scrollable|Scrollable} should set this value.
     *
     * @type {Function}
     * @private
     */
    cbScrollTo: _propTypes["default"].func,
    /**
     * Disable voice control feature of component.
     *
     * @type {Boolean}
     * @public
     */
    'data-webos-voice-disabled': _propTypes["default"].bool,
    /**
     * Activates the component for voice control.
     *
     * @type {Boolean}
     * @public
     */
    'data-webos-voice-focused': _propTypes["default"].bool,
    /**
     * The voice control group label.
     *
     * @type {String}
     * @public
     */
    'data-webos-voice-group-label': _propTypes["default"].string,
    /**
     * Size of the data.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    dataSize: _propTypes["default"].number,
    /**
     * Allows 5-way navigation to the scrollbar controls. By default, 5-way will
     * not move focus to the scrollbar controls.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    focusableScrollbar: _propTypes["default"].bool,
    /**
     * Passes the instance of {@link ui/VirtualList.VirtualList|VirtualList}.
     *
     * @type {Object}
     * @param {Object} ref
     * @private
     */
    initUiChildRef: _propTypes["default"].func,
    /**
     * Prop to check if horizontal Scrollbar exists or not.
     *
     * @type {Boolean}
     * @private
     */
    isHorizontalScrollbarVisible: _propTypes["default"].bool,
    /**
     * Prop to check if vertical Scrollbar exists or not.
     *
     * @type {Boolean}
     * @private
     */
    isVerticalScrollbarVisible: _propTypes["default"].bool,
    /**
     * The array for individually sized items.
     *
     * @type {Number[]}
     * @private
     */
    itemSizes: _propTypes["default"].array,
    /**
     * It scrolls by page when `true`, by item when `false`.
     *
     * @type {Boolean}
     * @default false
     * @private
     */
    pageScroll: _propTypes["default"].bool,
    /**
     * The ARIA role for the list.
     *
     * @type {String}
     * @default 'list'
     * @public
     */
    role: _propTypes["default"].string,
    /**
     * `true` if rtl, `false` if ltr.
     * Normally, {@link moonstone/UiScrollable.Scrollable|Scrollable} should set this value.
     *
     * @type {Boolean}
     * @private
     */
    rtl: _propTypes["default"].bool,
    /**
     * Spacing between items.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    spacing: _propTypes["default"].number,
    /**
     * Spotlight Id. It would be the same with {@link moonstone/UiScrollable.Scrollable|Scrollable}'s.
     *
     * @type {String}
     * @private
     */
    spotlightId: _propTypes["default"].string,
    /**
     * When it's `true` and the spotlight focus cannot move to the given direction anymore by 5-way keys,
     * a list is scrolled with an animation to the other side and the spotlight focus moves in wraparound manner.
     *
     * When it's `'noAnimation'`, the spotlight focus moves in wraparound manner as same as when it's `true`
     * except that a list is scrolled without an animation.
     *
     * @type {Boolean|String}
     * @default false
     * @public
     */
    wrap: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].oneOf(['noAnimation'])])
  }, _class.defaultProps = {
    dataSize: 0,
    focusableScrollbar: false,
    itemsRenderer: nop,
    // eslint-disable-line react/default-props-match-prop-types
    pageScroll: false,
    spacing: 0,
    wrap: false
  }, _class;
};

/**
 * A Moonstone-styled base component for {@link moonstone/VirtualList.VirtualList|VirtualList} and
 * {@link moonstone/VirtualList.VirtualGridList|VirtualGridList}.
 *
 * @class VirtualListBase
 * @memberof moonstone/VirtualList
 * @extends moonstone/UiVirtualList.VirtualListBase
 * @ui
 * @public
 */
var VirtualListBase = exports.VirtualListBase = VirtualListBaseFactory(JS);
VirtualListBase.displayName = 'VirtualListBase';

/**
 * A Moonstone-styled base component for {@link moonstone/VirtualList.VirtualListNative|VirtualListNative} and
 * {@link moonstone/VirtualList.VirtualGridListNative|VirtualGridListNative}.
 *
 * @class VirtualListBaseNative
 * @memberof moonstone/VirtualList
 * @extends moonstone/UiVirtualList.VirtualListBaseNative
 * @ui
 * @private
 */
var VirtualListBaseNative = exports.VirtualListBaseNative = VirtualListBaseFactory(Native);
VirtualListBaseNative.displayName = 'VirtualListBaseNative';

/**
 * Allows 5-way navigation to the scrollbar controls. By default, 5-way will
 * not move focus to the scrollbar controls.
 *
 * @name focusableScrollbar
 * @memberof moonstone/VirtualList.VirtualListBase.prototype
 * @type {Boolean}
 * @default false
 * @public
 */

/**
 * Unique identifier for the component.
 *
 * When defined and when the `VirtualList` is within a {@link moonstone/Panels.Panel|Panel},
 * the `VirtualList` will store its scroll position and restore that position when returning to
 * the `Panel`.
 *
 * @name id
 * @memberof moonstone/VirtualList.VirtualListBase.prototype
 * @type {String}
 * @public
 */

/**
 * Sets the hint string read when focusing the next button in the vertical scroll bar.
 *
 * @name scrollDownAriaLabel
 * @memberof moonstone/VirtualList.VirtualListBase.prototype
 * @type {String}
 * @default $L('scroll down')
 * @public
 */

/**
 * Sets the hint string read when focusing the previous button in the horizontal scroll bar.
 *
 * @name scrollLeftAriaLabel
 * @memberof moonstone/VirtualList.VirtualListBase.prototype
 * @type {String}
 * @default $L('scroll left')
 * @public
 */

/**
 * Sets the hint string read when focusing the next button in the horizontal scroll bar.
 *
 * @name scrollRightAriaLabel
 * @memberof moonstone/VirtualList.VirtualListBase.prototype
 * @type {String}
 * @default $L('scroll right')
 * @public
 */

/**
 * Sets the hint string read when focusing the previous button in the vertical scroll bar.
 *
 * @name scrollUpAriaLabel
 * @memberof moonstone/VirtualList.VirtualListBase.prototype
 * @type {String}
 * @default $L('scroll up')
 * @public
 */

/* eslint-disable enact/prop-types */
var listItemsRenderer = function listItemsRenderer(props) {
  var cc = props.cc,
    handlePlaceholderFocus = props.handlePlaceholderFocus,
    initUiItemContainerRef = props.itemContainerRef,
    primary = props.primary,
    role = props.role;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [cc.length ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: initUiItemContainerRef,
      role: role,
      children: cc
    }) : null, primary ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)(SpotlightPlaceholder, {
      "data-index": 0,
      "data-vl-placeholder": true
      // a zero width/height element can't be focused by spotlight so we're giving
      // the placeholder a small size to ensure it is navigable
      ,
      style: {
        width: 10
      },
      onFocus: handlePlaceholderFocus
    })]
  });
};
/* eslint-enable enact/prop-types */

var ScrollableVirtualList = exports.ScrollableVirtualList = function ScrollableVirtualList(_ref9) {
  var role = _ref9.role,
    rest = _objectWithoutProperties(_ref9, _excluded3);
  process.env.NODE_ENV !== "production" ? (0, _warning["default"])(!rest.itemSizes || !rest.cbScrollTo, 'VirtualList with `minSize` in `itemSize` prop does not support `cbScrollTo` prop') : void 0;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Scrollable.Scrollable, _objectSpread(_objectSpread({}, rest), {}, {
    childRenderer: function childRenderer(childProps) {
      return (
        /*#__PURE__*/
        // eslint-disable-line react/jsx-no-bind
        (0, _jsxRuntime.jsx)(VirtualListBase, _objectSpread(_objectSpread({}, childProps), {}, {
          focusableScrollbar: rest.focusableScrollbar,
          itemsRenderer: listItemsRenderer,
          role: role
        }))
      );
    }
  }));
};
ScrollableVirtualList.propTypes = /** @lends moonstone/VirtualList.VirtualListBase.prototype */{
  cbScrollTo: _propTypes["default"].func,
  direction: _propTypes["default"].oneOf(['horizontal', 'vertical']),
  focusableScrollbar: _propTypes["default"].bool,
  itemSizes: _propTypes["default"].array,
  preventBubblingOnKeyDown: _propTypes["default"].oneOf(['none', 'programmatic']),
  role: _propTypes["default"].string
};
ScrollableVirtualList.defaultProps = {
  direction: 'vertical',
  focusableScrollbar: false,
  preventBubblingOnKeyDown: 'programmatic',
  role: 'list'
};
var ScrollableVirtualListNative = exports.ScrollableVirtualListNative = function ScrollableVirtualListNative(_ref10) {
  var role = _ref10.role,
    rest = _objectWithoutProperties(_ref10, _excluded4);
  process.env.NODE_ENV !== "production" ? (0, _warning["default"])(!rest.itemSizes || !rest.cbScrollTo, 'VirtualList with `minSize` in `itemSize` prop does not support `cbScrollTo` prop') : void 0;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ScrollableNative["default"], _objectSpread(_objectSpread({}, rest), {}, {
    childRenderer: function childRenderer(childProps) {
      return (
        /*#__PURE__*/
        // eslint-disable-line react/jsx-no-bind
        (0, _jsxRuntime.jsx)(VirtualListBaseNative, _objectSpread(_objectSpread({}, childProps), {}, {
          focusableScrollbar: rest.focusableScrollbar,
          itemsRenderer: listItemsRenderer,
          role: role
        }))
      );
    }
  }));
};
ScrollableVirtualListNative.propTypes = /** @lends moonstone/VirtualList.VirtualListBaseNative.prototype */{
  cbScrollTo: _propTypes["default"].func,
  direction: _propTypes["default"].oneOf(['horizontal', 'vertical']),
  focusableScrollbar: _propTypes["default"].bool,
  itemSizes: _propTypes["default"].array,
  preventBubblingOnKeyDown: _propTypes["default"].oneOf(['none', 'programmatic']),
  role: _propTypes["default"].string
};
ScrollableVirtualListNative.defaultProps = {
  direction: 'vertical',
  focusableScrollbar: false,
  preventBubblingOnKeyDown: 'programmatic',
  role: 'list'
};
var _default = exports["default"] = VirtualListBase;