"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _ExpandablePicker = _interopRequireDefault(require("../ExpandablePicker"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var tap = function tap(node) {
  _react.fireEvent.mouseDown(node);
  _react.fireEvent.mouseUp(node);
};
describe('ExpandablePicker Specs', function () {
  var children = ['option1', 'option2', 'option3'];
  test('should close onChange', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandablePicker["default"], {
      "data-testid": "expandablePicker",
      defaultOpen: true,
      title: "Options",
      children: children
    }));
    var checkButton = _react.screen.getByText('✓');
    tap(checkButton);
    var expected = 'open';
    var actual = _react.screen.getByTestId('expandablePicker');
    expect(actual).not.toHaveClass(expected);
  });
  test('should include value in onChange when value is specified', function () {
    var value = 2;
    var handleChange = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandablePicker["default"], {
      onChange: handleChange,
      open: true,
      title: "Options",
      value: value,
      children: children
    }));
    var checkButton = _react.screen.getByText('✓');
    tap(checkButton);
    var expected = value;
    var actual = handleChange.mock.calls[0][0].value;
    expect(actual).toBe(expected);
  });
  test('should include default value in onChange when value is not specified', function () {
    var value = 0;
    var handleChange = jest.fn();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandablePicker["default"], {
      onChange: handleChange,
      open: true,
      title: "Options",
      children: children
    }));
    var checkButton = _react.screen.getByText('✓');
    tap(checkButton);
    var expected = value;
    var actual = handleChange.mock.calls[0][0].value;
    expect(actual).toBe(expected);
  });
  test('should set "checkButtonAriaLabel" to check button', function () {
    var label = 'custom check button aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandablePicker["default"], {
      checkButtonAriaLabel: label,
      open: true,
      title: "Options",
      children: children
    }));
    var checkButton = _react.screen.getByLabelText(label);
    var expected = '✓';
    expect(checkButton).toHaveTextContent(expected);
  });
  test('should set "decrementAriaLabel" to previous button', function () {
    var label = 'custom previous button aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandablePicker["default"], {
      decrementAriaLabel: label,
      open: true,
      title: "Options",
      children: children
    }));
    var checkButton = _react.screen.getByLabelText(label);
    var expected = 'button decrementer';
    expect(checkButton).toHaveClass(expected);
  });
  test('should set "incrementAriaLabel" to next button', function () {
    var label = 'custom next button aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandablePicker["default"], {
      incrementAriaLabel: label,
      open: true,
      title: "Options",
      children: children
    }));
    var checkButton = _react.screen.getByLabelText(label);
    var expected = 'button incrementer';
    expect(checkButton).toHaveClass(expected);
  });
  test('should set "pickerAriaLabel" to joined picker', function () {
    var label = 'custom joined picker aria-label';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandablePicker["default"], {
      joined: true,
      open: true,
      pickerAriaLabel: label,
      title: "Options",
      children: children
    }));
    var joinedPicker = _react.screen.getByLabelText(label);
    var expected = 'picker joined';
    expect(joinedPicker).toHaveClass(expected);
  });
  test('should set "data-webos-voice-disabled" to decrement button when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandablePicker["default"], {
      "data-webos-voice-disabled": true,
      decrementAriaLabel: "decrementer",
      open: true,
      title: "Options",
      children: children
    }));
    var checkButton = _react.screen.getByLabelText('decrementer');
    var expectedAttribute = 'data-webos-voice-disabled';
    var expectedValue = 'true';
    expect(checkButton).toHaveAttribute(expectedAttribute, expectedValue);
  });
  test('should set "data-webos-voice-disabled" to increment button when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandablePicker["default"], {
      "data-webos-voice-disabled": true,
      incrementAriaLabel: "incrementer",
      open: true,
      title: "Options",
      children: children
    }));
    var checkButton = _react.screen.getByLabelText('incrementer');
    var expectedAttribute = 'data-webos-voice-disabled';
    var expectedValue = 'true';
    expect(checkButton).toHaveAttribute(expectedAttribute, expectedValue);
  });
});