"use strict";

var _FloatingLayer = require("@enact/ui/FloatingLayer");
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _ContextualPopupDecorator = require("../ContextualPopupDecorator");
var _Button = _interopRequireDefault(require("../../Button"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var ContextualButton = (0, _ContextualPopupDecorator.ContextualPopupDecorator)(_Button["default"]);
describe('ContextualPopupDecorator Specs', function () {
  test('should emit onClose event when clicking on contextual button', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleClose = jest.fn();
    var user = _userEvent["default"].setup();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        onClose: handleClose,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));
    var contextualButton = _react.screen.getByRole('button');
    yield user.click(contextualButton);
    expect(handleClose).toHaveBeenCalled();
  }));
  test('should render component into FloatingLayer if open', function () {
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));
    var contextualPopup = _react.screen.getByRole('alert');
    var expected = message;
    var actual = contextualPopup.children.item(0);
    expect(actual).toHaveTextContent(expected);
  });
  test('should not render into FloatingLayer if not open', function () {
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));
    var popup = _react.screen.queryByText(message);
    expect(popup).toBeNull();
  });
  test('should not emit onClose event when clicking outside if noAutoDismiss is true', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleClose = jest.fn();
    var user = _userEvent["default"].setup();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      "data-testid": "outsideArea",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        noAutoDismiss: true,
        onClose: handleClose,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));
    var outsideArea = _react.screen.getByTestId('outsideArea');
    yield user.click(outsideArea);
    expect(handleClose).not.toHaveBeenCalled();
  }));
  test('should emit onClose event when clicking outside if noAutoDismiss is missing', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleClose = jest.fn();
    var user = _userEvent["default"].setup();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      "data-testid": "outsideArea",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        onClose: handleClose,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));
    var outsideArea = _react.screen.getByTestId('outsideArea');
    yield user.click(outsideArea);
    expect(handleClose).toHaveBeenCalled();
  }));
  test('direction attribute should have `right` value when direction is set to `right`', function () {
    var handleClose = jest.fn();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        direction: "right",
        onClose: handleClose,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));
    var contextualPopup = _react.screen.getByRole('alert').children.item(1);
    var expectedAttribute = 'direction';
    var expectedValue = 'right';
    expect(contextualPopup).toHaveAttribute(expectedAttribute, expectedValue);
  });
  test('should have a close button when `showCloseButton` is set to true', function () {
    var handleClose = jest.fn();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        onClose: handleClose,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        showCloseButton: true,
        children: "Hello"
      })
    }));
    var closeButton = (0, _react.within)(_react.screen.getByRole('alert')).getByRole('button');
    expect(closeButton).not.toBeNull();
  });
  test('should not have a close button when `showCloseButton` is not set', function () {
    var handleClose = jest.fn();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        onClose: handleClose,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        children: "Hello"
      })
    }));
    var closeButton = (0, _react.within)(_react.screen.getByRole('alert')).queryByRole('button');
    expect(closeButton).toBeNull();
  });
  test('should emit onClose event when clicking the closeButton', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleClose = jest.fn();
    var user = _userEvent["default"].setup();
    var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
    var message = 'goodbye';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ContextualButton, {
        onClose: handleClose,
        open: true,
        popupComponent: function popupComponent() {
          return message;
        },
        showCloseButton: true,
        children: "Hello"
      })
    }));
    var closeButton = (0, _react.within)(_react.screen.getByRole('alert')).getByRole('button');
    yield user.click(closeButton);
    expect(handleClose).toHaveBeenCalled();
  }));
});