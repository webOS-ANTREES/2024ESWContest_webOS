"use strict";

var _FloatingLayer = require("@enact/ui/FloatingLayer");
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _Tooltip = _interopRequireDefault(require("../Tooltip"));
var _TooltipLabel = _interopRequireDefault(require("../TooltipLabel"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var Root = (0, _FloatingLayer.FloatingLayerDecorator)('div');
describe('TooltipDecorator', function () {
  test('should render component into FloatingLayer if `open=true`', function () {
    var tooltipText = 'This is a tooltip';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer.FloatingLayerBase, {
        open: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip["default"], {
          children: tooltipText
        })
      })
    }));
    var actual = _react.screen.getByText('This is a tooltip');
    expect(actual).toBeInTheDocument();
  });
  test('should not render component into FloatingLayer if `open=false`', function () {
    var tooltipText = 'This is a tooltip';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer.FloatingLayerBase, {
        open: false,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip["default"], {
          children: tooltipText
        })
      })
    }));
    var actual = _react.screen.queryByText('This is a tooltip');
    expect(actual).toBeNull();
  });
  test('should have above class when `direction=above`', function () {
    var tooltipText = 'This is a tooltip';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer.FloatingLayerBase, {
        open: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip["default"], {
          "data-testid": "tooltip",
          direction: "above",
          children: tooltipText
        })
      })
    }));
    var expected = 'above';
    var actual = _react.screen.getByTestId('tooltip');
    expect(actual).toHaveClass(expected);
  });
  test('should have below class when `direction=below`', function () {
    var tooltipText = 'This is a tooltip';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer.FloatingLayerBase, {
        open: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip["default"], {
          "data-testid": "tooltip",
          direction: "below",
          children: tooltipText
        })
      })
    }));
    var expected = 'below';
    var actual = _react.screen.getByTestId('tooltip');
    expect(actual).toHaveClass(expected);
  });
  test('should have left class when `direction=left`', function () {
    var tooltipText = 'This is a tooltip';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer.FloatingLayerBase, {
        open: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip["default"], {
          "data-testid": "tooltip",
          direction: "left",
          children: tooltipText
        })
      })
    }));
    var expected = 'left';
    var actual = _react.screen.getByTestId('tooltip');
    expect(actual).toHaveClass(expected);
  });
  test('should have right class when `direction=right`', function () {
    var tooltipText = 'This is a tooltip';
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer.FloatingLayerBase, {
        open: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip["default"], {
          "data-testid": "tooltip",
          direction: "right",
          children: tooltipText
        })
      })
    }));
    var expected = 'right';
    var actual = _react.screen.getByTestId('tooltip');
    expect(actual).toHaveClass(expected);
  });
  describe('TooltipLabel', function () {
    test('should render a tooltip label', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TooltipLabel["default"], {
        children: "Label"
      }));
      var label = _react.screen.getByText('Label');
      expect(label).toBeInTheDocument();
    });
  });
});