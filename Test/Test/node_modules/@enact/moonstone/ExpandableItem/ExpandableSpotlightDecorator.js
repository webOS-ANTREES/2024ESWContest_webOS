"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ExpandableSpotlightDecorator = void 0;
var _container = require("@enact/spotlight/src/container");
var _handle = require("@enact/core/handle");
var _hoc = _interopRequireDefault(require("@enact/core/hoc"));
var _util = require("@enact/core/util");
var _spotlight = _interopRequireDefault(require("@enact/spotlight"));
var _Pause = _interopRequireDefault(require("@enact/spotlight/Pause"));
var _react = require("react");
var _reactDom = _interopRequireDefault(require("react-dom"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var shouldRenderChildren = function shouldRenderChildren(_ref, _ref2) {
  var disabled = _ref.disabled,
    open = _ref.open;
  var hideChildren = _ref2.hideChildren;
  return hideChildren && open && !disabled;
};

/**
 * Default config for {@link moonstone/ExpandableItem.ExpandableSpotlightDecorator}
 *
 * @memberof moonstone/ExpandableItem.ExpandableSpotlightDecorator
 * @hocconfig
 * @private
 */
var defaultConfig = {
  /**
   * Returns the child -- either a node or a CSS selector -- to focus after expanding.
   *
   * If this function is defined, it will be passed the container node and the current set of
   * props and should return either a node or a CSS selector to be passed to
   * {@link spotlight/Spotlight.focus}.
   *
   * @type {Function}
   * @default null
   * @memberof moonstone/ExpandableItem.ExpandableSpotlightDecorator.defaultConfig
   * @private
   */
  getChildFocusTarget: null,
  /**
   * When `true` and used in conjunction with `noAutoFocus` when `false`, the contents of the
   * container will receive spotlight focus expanded, even in pointer mode.
   *
   * @type {Boolean}
   * @default false
   * @memberof moonstone/ExpandableItem.ExpandableSpotlightDecorator.defaultConfig
   * @private
   */
  noPointerMode: false
};

/**
 * Restores spotlight focus to root container when closing the container if the previously focused
 * component is contained.
 *
 * @class ExpandableSpotlightDecorator
 * @memberof moonstone/ExpandableItem
 * @private
 */
var ExpandableSpotlightDecorator = exports.ExpandableSpotlightDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class;
  var getChildFocusTarget = config.getChildFocusTarget,
    noPointerMode = config.noPointerMode;
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);
    var _super = _createSuper(_class);
    function _class(props) {
      var _this;
      _classCallCheck(this, _class);
      _this = _super.call(this, props);
      _this.highlightContents = function () {
        var current = _spotlight["default"].getCurrent();
        if (_this.containerNode.contains(current) || document.activeElement === document.body) {
          var contents = _this.containerNode.querySelector('[data-expandable-container]');
          if (contents && !_this.props.noAutoFocus && !contents.contains(current)) {
            var focused = false;

            // Attempt to retrieve the Expandable-configured child focus target
            if (getChildFocusTarget) {
              var selectedNode = getChildFocusTarget(contents, _this.props);
              if (selectedNode) {
                focused = _spotlight["default"].focus(selectedNode);
              }
            }
            if (!focused) {
              _spotlight["default"].focus(contents.dataset.spotlightId);
            }
          }
        }
      };
      _this.highlightLabeledItem = function () {
        var current = _spotlight["default"].getCurrent();
        var label = _this.containerNode.querySelector('[data-expandable-label]');
        if (current === label) return;
        if (_this.containerNode.contains(current)) {
          if (_spotlight["default"].getPointerMode()) {
            // If we don't clear the focus, switching back to 5-way before focusing anything
            // will result in what appears to be lost focus
            current.blur();
          }
          _spotlight["default"].focus(label);
        } else {
          var containerIds = (0, _container.getContainersForNode)(label);

          // when focus is not within the expandable (due to a cancel event or the close
          // on blur from ExpandableInput, or some quick key presses), we need to fix the last
          // focused element config so that focus can be restored to the label rather than
          // spotlight getting lost.
          //
          // If there is focus or active container somewhere else, then we only need to fix
          // the nearest containers to the label that arent also containing the currently
          // focused element.
          var node = current || _spotlight["default"].getPointerMode() && (0, _container.getContainerNode)(_spotlight["default"].getActiveContainer());
          if (node) {
            var ids = (0, _container.getContainersForNode)(node);
            containerIds = containerIds.filter(function (id) {
              return !ids.includes(id);
            });
          }
          (0, _container.setContainerLastFocusedElement)(label, containerIds);
        }
      };
      _this.highlight = function (callback) {
        if (_spotlight["default"].isPaused()) return;
        var pointerMode = _spotlight["default"].getPointerMode();
        var changePointerMode = pointerMode && noPointerMode;
        if (changePointerMode) {
          // we temporarily set pointer mode to `false` to ensure that focus is forced away
          // from the collapsing expandable.
          _spotlight["default"].setPointerMode(false);
        }
        callback();
        if (changePointerMode) {
          _spotlight["default"].setPointerMode(pointerMode);
        }
      };
      _this.pause = function () {
        _this.paused.pause();
      };
      _this.resume = function () {
        _this.paused.resume();
      };
      _this.handleHide = function () {
        _this.resume();
        _this.highlight(_this.highlightLabeledItem);
      };
      _this.handle = _handle.handle.bind(_assertThisInitialized(_this));
      _this.handleClose = _this.handle((0, _handle.forward)('onClose'), _this.pause);
      _this.handleOpen = _this.handle((0, _handle.forward)('onOpen'), _this.pause);
      _this.handleShow = function () {
        _this.resume();
        _this.highlight(_this.highlightContents);
      };
      _this.handleBlur = function () {
        _this.renderJob.stop();
      };
      _this.handleFocus = function () {
        if (_this.state.hideChildren) {
          _this.renderJob.idle();
        }
      };
      _this.renderJob = new _util.Job(function () {
        _this.setState({
          hideChildren: false
        });
      });
      _this.setContainerNode = function (node) {
        _this.containerNode = _reactDom["default"].findDOMNode(node); // eslint-disable-line react/no-find-dom-node
      };
      var disabled = props.disabled,
        open = props.open;
      _this.state = {
        hideChildren: !open || disabled,
        open: open && !disabled
      };
      _this.paused = new _Pause["default"]('ExpandableItem');
      return _this;
    }
    _createClass(_class, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (shouldRenderChildren(this.props, prevState)) {
          this.setState({
            open: true
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.resume();
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state = this.state,
          open = _this$state.open,
          hideChildren = _this$state.hideChildren;
        var props = Object.assign({}, this.props);
        delete props.noAutoFocus;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(Wrapped, _objectSpread(_objectSpread({}, props), {}, {
          hideChildren: hideChildren,
          onBlur: this.handleBlur,
          onFocus: this.handleFocus,
          onHide: this.handleHide,
          onShow: this.handleShow,
          onOpen: this.handleOpen,
          onClose: this.handleClose,
          open: open,
          setContainerNode: this.setContainerNode
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        var open = props.open && !props.disabled;
        if (shouldRenderChildren(props, state)) {
          return {
            open: false,
            hideChildren: false
          };
        } else if (open !== state.open) {
          return {
            open: open
          };
        }
        return null;
      }
    }]);
    return _class;
  }(_react.Component), _class.displayName = 'ExpandableSpotlightDecorator', _class.propTypes = /** @lends moonstone/ExpandableItem.ExpandableSpotlightDecorator.prototype */{
    /**
     * Disables ExpandableSpotlightDecorator and the control becomes non-interactive.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes["default"].bool,
    /**
     * When `true`, the contents of the container will not receive spotlight focus when becoming
     * expanded.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    noAutoFocus: _propTypes["default"].bool,
    /**
     * Set the open state of the component, which determines whether it's expanded or not.
     *
     * @type {Boolean}
     * @default true
     * @public
     */
    open: _propTypes["default"].bool
  }, _class.defaultProps = {
    disabled: false,
    noAutoFocus: false
  }, _class;
});
var _default = exports["default"] = ExpandableSpotlightDecorator;