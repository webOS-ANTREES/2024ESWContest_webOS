"use strict";

var _spotlight = _interopRequireDefault(require("@enact/spotlight"));
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _EditableIntegerPicker = require("../EditableIntegerPicker");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var isPaused = function isPaused() {
  return _spotlight["default"].isPaused() ? 'paused' : 'not paused';
};
var tap = function tap(node) {
  _react.fireEvent.mouseDown(node);
  _react.fireEvent.mouseUp(node);
};
var decrement = function decrement() {
  return tap(_react.screen.getByText('-'));
};
var increment = function increment() {
  return tap(_react.screen.getByText('+'));
};
describe('EditableIntegerPicker', function () {
  test('should enable input field when some number is typed on the picker', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      defaultValue: 10,
      max: 100,
      min: 0,
      step: 1
    }));
    var input = _react.screen.getByText('10');
    _react.fireEvent.keyDown(input, {
      keyCode: 50
    });
    var inputField = _react.screen.getByRole('spinbutton');
    var expected = 'input';
    var actual = inputField.firstElementChild.firstElementChild;
    expect(actual).toHaveClass(expected);
  });
  test('should render a child with the current value', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      decrementIcon: 'minus',
      defaultValue: 10,
      incrementIcon: 'plus',
      max: 100,
      min: 0,
      step: 1
    }));
    var pickerItem = _react.screen.getByText('10');
    expect(pickerItem).toBeInTheDocument();
  });
  test('should increase by step amount on increment press', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      decrementIcon: 'minus',
      defaultValue: 10,
      incrementIcon: 'plus',
      max: 100,
      min: 0,
      noAnimation: true,
      step: 10
    }));
    (0, _react.act)(function () {
      return increment();
    });
    var actual = _react.screen.getByText('20');
    expect(actual).toBeInTheDocument();
  });
  test('should decrease by step amount on decrement press', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      decrementIcon: 'minus',
      defaultValue: 10,
      incrementIcon: 'plus',
      max: 100,
      min: 0,
      noAnimation: true,
      step: 10
    }));
    (0, _react.act)(function () {
      return decrement();
    });
    var actual = _react.screen.getByText('0');
    expect(actual).toBeInTheDocument();
  });
  test('should enable input field on click', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      defaultValue: 10,
      max: 100,
      min: 0,
      step: 1
    }));
    yield user.click(_react.screen.getByText('10'));
    var inputField = _react.screen.getByRole('spinbutton');
    var expected = 'input';
    var actual = inputField.firstElementChild.firstElementChild;
    expect(actual).toHaveClass(expected);
  }));
  test('should disable input field when blurred', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      min: 0,
      max: 100,
      defaultValue: 10,
      step: 1
    }));
    yield user.click(_react.screen.getByText('10'));
    var input = _react.screen.getByRole('spinbutton');
    var inputField = input.children.item(0).children.item(0);
    _react.fireEvent.focus(inputField);
    _react.fireEvent.blur(inputField);
    expect(inputField).not.toBeInTheDocument();
  }));
  test('should take value inputted and navigate to the value on blur', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      decrementIcon: 'minus',
      defaultValue: 10,
      incrementIcon: 'plus',
      max: 100,
      min: 0,
      noAnimation: true,
      step: 1
    }));
    yield user.click(_react.screen.getByText('10'));
    var input = _react.screen.getByRole('spinbutton');
    var inputField = input.children.item(0).children.item(0);
    _react.fireEvent.focus(inputField);
    yield user.type(inputField, '38');
    _react.fireEvent.blur(inputField);
    var actual = _react.screen.getByText('38');
    expect(actual).toBeInTheDocument();
  }));
  test('should send change event with correct value on blur', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleChange = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      defaultValue: 10,
      max: 100,
      min: 0,
      noAnimation: true,
      onChange: handleChange,
      step: 1
    }));
    yield user.click(_react.screen.getByText('10'));
    var input = _react.screen.getByRole('spinbutton');
    var inputField = input.children.item(0).children.item(0);
    _react.fireEvent.focus(inputField);
    yield user.type(inputField, '45');
    _react.fireEvent.blur(inputField);
    var expected = 45;
    var actual = handleChange.mock.calls[0][0].value;
    expect(actual).toBe(expected);
  }));
  test('should not send change event with invalid value on blur', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleChange = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      defaultValue: 12,
      max: 100,
      min: 0,
      noAnimation: true,
      onChange: handleChange,
      step: 1
    }));
    yield user.click(_react.screen.getByText('12'));
    var input = _react.screen.getByRole('spinbutton');
    var inputField = input.children.item(0).children.item(0);
    _react.fireEvent.focus(inputField);
    yield user.type(inputField, 'invalid');
    _react.fireEvent.blur(inputField);
    expect(handleChange).not.toHaveBeenCalled();
  }));
  test('should not send two change event when incrementing from edit mode', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleChange = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      defaultValue: 15,
      max: 100,
      min: 0,
      noAnimation: true,
      onChange: handleChange,
      step: 1
    }));
    yield user.click(_react.screen.getByText('15'));
    var input = _react.screen.getByRole('spinbutton');
    var inputField = input.children.item(0).children.item(0);
    _react.fireEvent.focus(inputField);
    yield user.type(inputField, '12');
    _react.fireEvent.blur(inputField);
    var expected = 1;
    expect(handleChange).toHaveBeenCalledTimes(expected);
  }));
  test('should pause the spotlight when input is focused', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      defaultValue: 11,
      max: 100,
      min: 0,
      step: 1
    }));
    yield user.click(_react.screen.getByText('11'));
    var input = _react.screen.getByRole('spinbutton');
    var inputField = input.children.item(0).children.item(0);
    _react.fireEvent.focus(inputField);
    var expected = 'paused';
    var actual = isPaused();
    _spotlight["default"].resume();
    expect(actual).toBe(expected);
  }));
  test('should resume the spotlight when input is blurred', /*#__PURE__*/_asyncToGenerator(function* () {
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPicker, {
      defaultValue: 13,
      max: 100,
      min: 0,
      step: 1
    }));
    yield user.click(_react.screen.getByText('13'));
    var input = _react.screen.getByRole('spinbutton');
    var inputField = input.children.item(0).children.item(0);
    _react.fireEvent.focus(inputField);
    _react.fireEvent.blur(inputField);
    var expected = 'not paused';
    var actual = isPaused();
    expect(actual).toBe(expected);
  }));
  test('should be disabled when limited to a single value', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_EditableIntegerPicker.EditableIntegerPickerBase, {
      max: 0,
      min: 0,
      value: 0
    }));
    var picker = _react.screen.getByLabelText('0 next item');
    var expectedAttribute = 'disabled';
    expect(picker).toHaveAttribute(expectedAttribute);
  });
});