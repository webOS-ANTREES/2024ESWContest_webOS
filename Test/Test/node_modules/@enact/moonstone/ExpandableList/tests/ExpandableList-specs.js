"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _ExpandableList = require("../ExpandableList");
var _jsxRuntime = require("react/jsx-runtime");
describe('ExpandableList', function () {
  var children = ['option1', 'option2', 'option3'];
  describe('#aria-multiselectable', function () {
    test('should be true when select is multiple', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableList.ExpandableListBase, {
        select: "multiple",
        title: "Item",
        children: children
      }));
      var expandableList = _react.screen.getByRole('group');
      var expectedAttribute = 'aria-multiselectable';
      var expectedValue = 'true';
      expect(expandableList).toHaveAttribute(expectedAttribute, expectedValue);
    });
  });
  test('should update when children are updated', function () {
    var _render = (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableList.ExpandableList, {
        open: true,
        title: "Item",
        children: children
      })),
      rerender = _render.rerender;
    var expectedFirst = 3;
    var actualFirst = _react.screen.getAllByRole('checkbox');
    expect(actualFirst).toHaveLength(expectedFirst);
    var removedChildren = children.slice(1);
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableList.ExpandableList, {
      open: true,
      title: "Item",
      children: removedChildren
    }));
    var expectedSecond = 2;
    var actualSecond = _react.screen.getAllByRole('checkbox');
    expect(actualSecond).toHaveLength(expectedSecond);
    var addedChildren = children.concat(['option4']);
    rerender( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableList.ExpandableList, {
      open: true,
      title: "Item",
      children: addedChildren
    }));
    var expectedThird = 4;
    var actualThird = _react.screen.getAllByRole('checkbox');
    expect(actualThird).toHaveLength(expectedThird);
  });
  test('should set "data-webos-voice-disabled" to LabeledItem when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableList.ExpandableListBase, {
      "data-webos-voice-disabled": true,
      open: true,
      title: "Item",
      children: children
    }));
    var expandableList = _react.screen.getByRole('group').firstElementChild;
    var expectedAttribute = 'data-webos-voice-disabled';
    var expectedValue = 'true';
    expect(expandableList).toHaveAttribute(expectedAttribute, expectedValue);
  });
  test('should set "data-webos-voice-disabled" to child item when voice control is disabled', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableList.ExpandableList, {
      "data-webos-voice-disabled": true,
      open: true,
      title: "Item",
      children: children
    }));
    var expandableListItem = _react.screen.getAllByRole('checkbox')[0];
    var expectedAttribute = 'data-webos-voice-disabled';
    var expectedValue = 'true';
    expect(expandableListItem).toHaveAttribute(expectedAttribute, expectedValue);
  });
  test('should allow for selected as array when not multi-select', function () {
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableList.ExpandableList, {
      selected: [0, 1],
      title: "Item",
      children: children
    }));
    var expandableList = _react.screen.getByRole('radiogroup');
    var expected = children[0];
    var actual = expandableList.textContent.slice(-1 * expected.length);
    expect(actual).toBe(expected);
  });
  test('should allow for selected as array when not multi-select with object', function () {
    var childrenWithKey = [{
      children: 'option1',
      key: 'a'
    }, {
      children: 'option2',
      key: 'b'
    }, {
      children: 'option3',
      key: 'c'
    }];
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableList.ExpandableList, {
      selected: [1, 2],
      title: "Item",
      children: childrenWithKey
    }));
    var expandableList = _react.screen.getByRole('radiogroup');
    var expected = childrenWithKey[1].children;
    var actual = expandableList.textContent.slice(-1 * expected.length);
    expect(actual).toBe(expected);
  });
  test('should show noneText when selected is empty array', function () {
    var childrenWithKey = [{
      children: 'option1',
      key: 'a'
    }, {
      children: 'option2',
      key: 'b'
    }, {
      children: 'option3',
      key: 'c'
    }];
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandableList.ExpandableList, {
      noneText: "hello",
      selected: [],
      title: "Item",
      children: childrenWithKey
    }));
    var expandableList = _react.screen.getByRole('radiogroup');
    var expected = 'hello';
    var actual = expandableList.textContent.slice(-1 * expected.length);
    expect(actual).toBe(expected);
  });
});