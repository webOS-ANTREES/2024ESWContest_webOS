"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ViewportBase = exports.Viewport = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _handle = require("@enact/core/handle");
var _spotlight = _interopRequireDefault(require("@enact/spotlight"));
var _Pause = _interopRequireDefault(require("@enact/spotlight/Pause"));
var _ViewManager = _interopRequireWildcard(require("@enact/ui/ViewManager"));
var _invariant = _interopRequireDefault(require("invariant"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
var _reactDom = _interopRequireDefault(require("react-dom"));
var _SharedStateDecorator = _interopRequireWildcard(require("../internal/SharedStateDecorator"));
var _PanelsModule = _interopRequireDefault(require("./Panels.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["arranger", "children", "generateId", "index", "noAnimation"];
var _class;
/**
 * The container for a set of Panels
 *
 * @class Viewport
 * @memberof moonstone/Panels
 * @private
 */
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var ViewportBase = exports.ViewportBase = (_class = /*#__PURE__*/function (_Component) {
  _inherits(ViewportBase, _Component);
  var _super = _createSuper(ViewportBase);
  function ViewportBase() {
    var _this;
    _classCallCheck(this, ViewportBase);
    _this = _super.call(this);
    _this.addTransitioningClass = function () {
      if (_this.node) {
        _this.node.classList.add(_PanelsModule["default"].transitioning);
      }
      return true;
    };
    _this.removeTransitioningClass = function () {
      if (_this.node) {
        _this.node.classList.remove(_PanelsModule["default"].transitioning);
      }
      return true;
    };
    _this.pause = function () {
      return _this.paused.pause();
    };
    _this.resume = function () {
      return _this.paused.resume();
    };
    _this.handle = _handle.handle.bind(_assertThisInitialized(_this));
    _this.handleTransition = _this.handle((0, _handle.forward)('onTransition'), _this.removeTransitioningClass, _this.resume);
    _this.handleWillTransition = _this.handle((0, _handle.forward)('onWillTransition'), _this.addTransitioningClass, _this.pause);
    _this.mapChildren = function (children, generateId) {
      return _react.Children.map(children, function (child, index) {
        if (child) {
          var _child$props$spotligh = child.props.spotlightId,
            spotlightId = _child$props$spotligh === void 0 ? generateId(index, 'panel-container', _spotlight["default"].remove) : _child$props$spotligh;
          var props = {
            spotlightId: spotlightId,
            'data-index': index
          };
          if (child.props.autoFocus == null && _this.state.direction === 'forward') {
            props.autoFocus = 'default-element';
          }
          return /*#__PURE__*/(0, _react.cloneElement)(child, props);
        } else {
          return null;
        }
      });
    };
    _this.getEnteringProp = function (noAnimation) {
      return noAnimation ? null : 'hideChildren';
    };
    _this.paused = new _Pause["default"]('Viewport');
    _this.state = {
      prevIndex: -1,
      direction: 'forward'
    };
    return _this;
  }
  _createClass(ViewportBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // eslint-disable-next-line react/no-find-dom-node
      this.node = _reactDom["default"].findDOMNode(this);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      for (var i = prevProps.index; this.context && i > this.props.index; i--) {
        this.context["delete"](i);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.paused.resume();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        arranger = _this$props.arranger,
        children = _this$props.children,
        generateId = _this$props.generateId,
        index = _this$props.index,
        noAnimation = _this$props.noAnimation,
        rest = _objectWithoutProperties(_this$props, _excluded);
      var enteringProp = this.getEnteringProp(noAnimation);
      var mappedChildren = this.mapChildren(children, generateId);
      var className = (0, _classnames["default"])(_PanelsModule["default"].viewport, rest.className);
      var count = _react.Children.count(mappedChildren);
      !(index === 0 && count === 0 || index < count) ? process.env.NODE_ENV !== "production" ? (0, _invariant["default"])(false, "Panels index, ".concat(index, ", is invalid for number of children, ").concat(count)) : (0, _invariant["default"])(false) : void 0;
      delete rest.controlsRef;
      delete rest.controlsMeasurements;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ViewManager["default"], _objectSpread(_objectSpread({}, rest), {}, {
        arranger: arranger,
        className: className,
        component: "main",
        duration: 250,
        enteringDelay: 100 // TODO: Can we remove this?
        ,
        enteringProp: enteringProp,
        index: index,
        noAnimation: noAnimation,
        onTransition: this.handleTransition,
        onWillTransition: this.handleWillTransition,
        children: mappedChildren
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      return {
        prevIndex: props.index,
        direction: state.prevIndex > props.index ? 'backward' : 'forward'
      };
    }
  }]);
  return ViewportBase;
}(_react.Component), _class.displayName = 'Viewport', _class.contextType = _SharedStateDecorator.SharedState, _class.propTypes = /** @lends moonstone/Panels.Viewport.prototype */{
  /**
   * A function that generates a globally-unique identifier for a panel index
   *
   * @type {Function}
   * @required
   */
  generateId: _propTypes["default"].func.isRequired,
  /**
   * Set of functions that control how the panels are transitioned into and out of the
   * viewport
   *
   * @type {Arranger}
   */
  arranger: _ViewManager.shape,
  /**
   * Panels to be rendered
   *
   * @type {Panel}
   */
  children: _propTypes["default"].node,
  /**
   * Index of the active panel
   *
   * @type {Number}
   * @default 0
   */
  index: _propTypes["default"].number,
  /**
   * Disable panel transitions
   *
   * @type {Boolean}
   * @default false
   */
  noAnimation: _propTypes["default"].bool
}, _class.defaultProps = {
  index: 0,
  noAnimation: false
}, _class);
var Viewport = exports.Viewport = (0, _SharedStateDecorator["default"])(ViewportBase);
var _default = exports["default"] = Viewport;