"use strict";

var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _Breadcrumb = _interopRequireDefault(require("../Breadcrumb"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
describe('Breadcrumb', function () {
  test.skip('should include {index} in the payload of {onSelect}', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleSelect = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Breadcrumb["default"], {
      index: 3,
      onSelect: handleSelect
    }));
    var breadCrumb = _react.screen.getByLabelText('GO TO PREVIOUS');
    yield user.click(breadCrumb);
    var expected = 3;
    var actual = handleSelect.mock.calls[0][0].index;
    expect(actual).toBe(expected);
  }));
  test.skip('should include call both the {onClick} and {onSelect} handlers on click', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleSelect = jest.fn();
    var handleClick = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Breadcrumb["default"], {
      index: 3,
      onClick: handleClick,
      onSelect: handleSelect
    }));
    var breadCrumb = _react.screen.getByLabelText('GO TO PREVIOUS');
    yield user.click(breadCrumb);
    var expected = true;
    var actual = handleSelect.mock.calls.length === 1 && handleClick.mock.calls.length === 1;
    expect(actual).toBe(expected);
  }));
});