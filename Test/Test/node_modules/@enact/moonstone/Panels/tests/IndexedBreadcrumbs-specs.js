"use strict";

var _react = require("@testing-library/react");
var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));
var _IndexedBreadcrumbs = _interopRequireDefault(require("../IndexedBreadcrumbs"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
describe('IndexedBreadcrumbs', function () {
  // Suite-wide setup

  test('should generate {index} breadcrumbs when {index} <= {max}', function () {
    var index = 3;
    var max = 5;
    var breadcrumbs = (0, _IndexedBreadcrumbs["default"])('id', index, max);
    var expected = index;
    var actual = breadcrumbs.length;
    expect(actual).toBe(expected);
  });
  test('should generate {max} breadcrumbs when {index} > {max}', function () {
    var index = 6;
    var max = 1;
    var breadcrumbs = (0, _IndexedBreadcrumbs["default"])('id', index, max);
    var expected = max;
    var actual = breadcrumbs.length;
    expect(actual).toBe(expected);
  });
  test('should pad indices less than 10 with 0', function () {
    var breadcrumbs = (0, _IndexedBreadcrumbs["default"])('id', 1, 5);
    var expected = '01';
    // React creates two children, one for '<' and one for the index label
    var actual = breadcrumbs[0].props.children[1];
    expect(actual).toBe(expected);
  });
  test.skip('should call {onBreadcrumbClick} once when breadcrumb is clicked', /*#__PURE__*/_asyncToGenerator(function* () {
    var handleClick = jest.fn();
    var user = _userEvent["default"].setup();
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)("nav", {
      children: (0, _IndexedBreadcrumbs["default"])('id', 1, 1, handleClick)
    }));
    var breadcrumb = _react.screen.getByLabelText('GO TO PREVIOUS');
    yield user.click(breadcrumb);
    expect(handleClick).toHaveBeenCalled();
  }));
});