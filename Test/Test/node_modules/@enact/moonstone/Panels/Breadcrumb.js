"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.breadcrumbWidth = exports.BreadcrumbBase = exports.Breadcrumb = void 0;
var _handle = require("@enact/core/handle");
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _Spottable = _interopRequireDefault(require("@enact/spotlight/Spottable"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _$L = _interopRequireDefault(require("../internal/$L"));
var _PanelsModule = _interopRequireDefault(require("./Panels.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "index", "onSelect"]; // Since we expose `onSelect` to handle breadcrumb selection, we need that handler to be set on a
// component that proxies mouse events for key events so we create a spottable div that will
// get the right classes as well as handle events correctly.
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var SpottableDiv = (0, _Spottable["default"])('div');

/**
 * The width of a breadcrumb which may be used to allocate space for it in a panels layout.
 * Note: This value will be scaled according to the resolution.
 *
 * @type {Number}
 * @default 96
 * @private
 * @memberof moonstone/Panels
 */
var breadcrumbWidth = exports.breadcrumbWidth = 96;

/**
 * Vertical, transparent bar used to navigate to a prior Panel.
 *
 * {@link moonstone/Panels.ActivityPanels|ActivityPanels} has one breadcrumb, and
 * {@link moonstone/Panels.AlwaysViewingPanels|AlwaysViewingPanels} can have multiple stacked
 * horizontally.
 *
 * @class Breadcrumb
 * @memberof moonstone/Panels
 * @ui
 * @public
 */
var BreadcrumbBase = exports.BreadcrumbBase = exports.Breadcrumb = (0, _kind["default"])({
  name: 'Breadcrumb',
  propTypes: /** @lends moonstone/Panels.Breadcrumb.prototype */{
    /**
     * Index of the associated panel.
     *
     * @type {Number}
     * @required
     */
    index: _propTypes["default"].number.isRequired,
    /**
     * Called when the breadcrumb is clicked.
     *
     * @private
     * @type {Function}
     */
    onClick: _propTypes["default"].func,
    /**
     * Called when the breadcrumb is clicked.
     *
     * The index of the clicked breadcrumb is passed in the event data.
     *
     * @type {Function}
     */
    onSelect: _propTypes["default"].func
  },
  styles: {
    css: _PanelsModule["default"],
    className: 'breadcrumb'
  },
  handlers: {
    onSelect: (0, _handle.handle)((0, _handle.forward)('onClick'), (0, _handle.adaptEvent)(function (ev, _ref) {
      var index = _ref.index;
      return {
        type: 'onSelect',
        index: index
      };
    }, (0, _handle.forward)('onSelect')))
  },
  render: function render(_ref2) {
    var children = _ref2.children,
      index = _ref2.index,
      onSelect = _ref2.onSelect,
      rest = _objectWithoutProperties(_ref2, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableDiv, _objectSpread(_objectSpread({}, rest), {}, {
      "aria-label": (0, _$L["default"])('GO TO PREVIOUS'),
      "data-index": index,
      onClick: function onClick() {
        for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {
          param[_key] = arguments[_key];
        }
        return setTimeout(function () {
          return onSelect.apply(void 0, param);
        }, 50);
      } // eslint-disable-line react/jsx-no-bind
      ,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: _PanelsModule["default"].breadcrumbHeader,
        children: children
      })
    }));
  }
});
var _default = exports["default"] = BreadcrumbBase;