"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.useToggleRole = useToggleRole;
var _react = require("react");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function useToggleRole() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$role = _ref.role,
    role = _ref$role === void 0 ? 'region' : _ref$role,
    _ref$event = _ref.event,
    event = _ref$event === void 0 ? 'onWillTransition' : _ref$event;
  var ref = (0, _react.useRef)(null);
  var handler = (0, _react.useCallback)(function () {
    if (ref.current) {
      // To workaround not reading title when panel transition ends
      ref.current.setAttribute('role', null);
      ref.current.setAttribute('role', role);
    }
  }, [ref, role]);
  return _defineProperty({
    ref: ref
  }, event, handler);
}
var _default = exports["default"] = useToggleRole;