"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ColorPickerDecorator = exports.ColorPickerBase = exports.ColorPicker = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _Spottable = _interopRequireDefault(require("@enact/spotlight/Spottable"));
var _Layout = require("@enact/ui/Layout");
var _Toggleable = _interopRequireDefault(require("@enact/ui/Toggleable"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _react = require("react");
var _BodyText = _interopRequireDefault(require("../BodyText"));
var _Button = _interopRequireWildcard(require("../Button"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Item = _interopRequireDefault(require("../Item"));
var _Popup = _interopRequireDefault(require("../Popup"));
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _Slider = _interopRequireDefault(require("../Slider"));
var _utils = require("./utils");
var _ColorPickerModule = _interopRequireDefault(require("./ColorPicker.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["color", "colorHandler", "css", "disabled", "handleClosePopup", "handleOpenPopup", "popupOpen", "presetColors", "text"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; } /* eslint-disable react-hooks/rules-of-hooks */ /**
                                                                                                                       * Sandstone component to allow the user to choose a color.
                                                                                                                       *
                                                                                                                       * @example
                                                                                                                       * <ColorPicker
                                                                                                                       *	 color={'#FF00FF'}
                                                                                                                       *	 colorHandler={setColor}
                                                                                                                       *	 presetColors={['#FF0000', '#00FF00', '#0000FF']}
                                                                                                                       *	 text={'Color Picker'}
                                                                                                                       * />
                                                                                                                       *
                                                                                                                       * @module sandstone/ColorPicker
                                                                                                                       * @exports ColorPicker
                                                                                                                       * @exports ColorPickerBase
                                                                                                                       * @exports ColorPickerDecorator
                                                                                                                       * @private
                                                                                                                       */
var SpottableButton = (0, _Spottable["default"])(_Button.ButtonBase);

/**
 * A component that contains the content for the {@link sandstone/ColorPicker|ColorPicker} popup.
 *
 * @class PopupContent
 * @memberof sandstone/ColorPicker
 * @ui
 * @private
 */
var PopupContent = function PopupContent(_ref) {
  var color = _ref.color,
    colorHandler = _ref.colorHandler,
    css = _ref.css,
    presetColors = _ref.presetColors;
  var _useState = (0, _react.useState)(0),
    _useState2 = _slicedToArray(_useState, 2),
    hue = _useState2[0],
    setHue = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = _slicedToArray(_useState3, 2),
    saturation = _useState4[0],
    setSaturation = _useState4[1];
  var _useState5 = (0, _react.useState)(0),
    _useState6 = _slicedToArray(_useState5, 2),
    lightness = _useState6[0],
    setLightness = _useState6[1];
  (0, _react.useEffect)(function () {
    var _hexToHSL = (0, _utils.hexToHSL)(color),
      h = _hexToHSL.h,
      s = _hexToHSL.s,
      l = _hexToHSL.l;
    setHue(h);
    setSaturation(s);
    setLightness(l);
  }, [color]);
  var changeHue = (0, _react.useCallback)(function (ev) {
    setHue(ev.value);
  }, []);
  var changeLightness = (0, _react.useCallback)(function (ev) {
    setLightness(ev.value);
  }, []);
  var changeSaturation = (0, _react.useCallback)(function (ev) {
    setSaturation(ev.value);
  }, []);
  var handleClick = (0, _react.useCallback)(function (ev) {
    colorHandler(ev.target.offsetParent.id);
  }, [colorHandler]);
  var onSliderValueChange = (0, _react.useCallback)(function () {
    colorHandler((0, _utils.HSLToHex)(hue, saturation, lightness));
  }, [colorHandler, hue, lightness, saturation]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Cell, {
    className: css.colorPicker,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Row, {
      className: css.colorsRow,
      wrap: true,
      children: presetColors === null || presetColors === void 0 ? void 0 : presetColors.map(function (presetColor, presetColorIndex) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
          size: "25%",
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableButton, {
            className: css.coloredButton,
            id: presetColor,
            minWidth: false,
            onClick: handleClick,
            style: {
              backgroundColor: presetColor
            },
            type: "color"
          })
        }, presetColor + '-' + presetColorIndex);
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Column, {
        className: css.colorPickerSliders,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_BodyText["default"], {
          className: css.colorSliderText,
          css: css,
          children: ["Hue ", hue]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Slider["default"], {
          className: css.colorSlider,
          max: 356,
          min: 0,
          onBlur: onSliderValueChange,
          onClick: onSliderValueChange,
          onChange: changeHue,
          value: hue
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_BodyText["default"], {
          className: css.colorSliderText,
          css: css,
          children: ["Saturation ", saturation, "%"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Slider["default"], {
          className: css.colorSlider,
          max: 100,
          min: 0,
          onBlur: onSliderValueChange,
          onClick: onSliderValueChange,
          onChange: changeSaturation,
          value: saturation
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_BodyText["default"], {
          className: css.colorSliderText,
          css: css,
          children: ["Lightness ", lightness, "%"]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Slider["default"], {
          className: css.colorSlider,
          max: 100,
          min: 0,
          onBlur: onSliderValueChange,
          onClick: onSliderValueChange,
          onChange: changeLightness,
          value: lightness
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: css.coloredDiv,
        style: {
          backgroundColor: "hsl(".concat(hue, " ,").concat(saturation, "%, ").concat(lightness, "%)")
        }
      })]
    })]
  });
};
PopupContent.propTypes = {
  /**
   * Indicates the color.
   *
   * @type {String}
   * @private
   */
  color: _propTypes["default"].string,
  /**
   * Called when color is modified.
   *
   * @type {Function}
   * @private
   */
  colorHandler: _propTypes["default"].func,
  /**
   * Customizes the component by mapping the supplied collection of CSS class names to the
   * corresponding internal elements and states of this component.
   *
   * The following classes are supported:
   *
   * `colorPicker` - The root class name
   * `coloredDiv`  - A class name used for a single div
   *
   * @type {Object}
   * @private
   */
  css: _propTypes["default"].object,
  /**
   * Contains an array with a couple of possible preset colors.
   *
   * @type {Array}
   * @private
   */
  presetColors: _propTypes["default"].array
};

/**
 * The color picker base component which sets-up the component's structure.
 *
 * This component is most often not used directly but may be composed within another component as it
 * is within {@link sandstone/ColorPicker|ColorPicker}.
 *
 * @class ColorPickerBase
 * @memberof sandstone/ColorPicker
 * @ui
 * @private
 */
var ColorPickerBase = exports.ColorPickerBase = (0, _kind["default"])({
  name: 'ColorPicker',
  functional: true,
  propTypes: /** @lends sandstone/ColorPicker.ColorPickerBase.prototype */{
    /**
     * Indicates the color.
     *
     * @type {String}
     * @public
     */
    color: _propTypes["default"].string,
    /**
     * Called when the color is modified.
     *
     * @type {Function}
     * @public
     */
    colorHandler: _propTypes["default"].func,
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * `colorPicker` - The root class name
     * `coloredDiv`  - A class name used for a single div
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,
    /**
     * Applies the `disabled` class.
     *
     * When `true`, the color picker is shown as disabled.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes["default"].bool,
    /**
     * Called to open or close the color picker.
     *
     * @type {Function}
     * @public
     */
    onTogglePopup: _propTypes["default"].func,
    /**
     * Indicates if the color picker is open.
     *
     * When `true`, contextual popup opens.
     *
     * @type {Boolean}
     * @default false
     * @private
     */
    popupOpen: _propTypes["default"].bool,
    /**
     * Contains an array with a couple of possible preset colors.
     *
     * @type {Array}
     * @public
     */
    presetColors: _propTypes["default"].array,
    /**
     * Contains the text that shows near color picker.
     *
     * @type {String}
     * @public
     */
    text: _propTypes["default"].string
  },
  defaultProps: {
    disabled: false,
    popupOpen: false
  },
  handlers: {
    handleClosePopup: function handleClosePopup(ev, _ref2) {
      var onTogglePopup = _ref2.onTogglePopup;
      onTogglePopup();
    },
    handleOpenPopup: function handleOpenPopup(ev, _ref3) {
      var disabled = _ref3.disabled,
        onTogglePopup = _ref3.onTogglePopup;
      if (!disabled) {
        onTogglePopup();
      }
    }
  },
  styles: {
    css: _ColorPickerModule["default"],
    publicClassNames: true
  },
  render: function render(_ref4) {
    var color = _ref4.color,
      colorHandler = _ref4.colorHandler,
      css = _ref4.css,
      disabled = _ref4.disabled,
      handleClosePopup = _ref4.handleClosePopup,
      handleOpenPopup = _ref4.handleOpenPopup,
      popupOpen = _ref4.popupOpen,
      presetColors = _ref4.presetColors,
      text = _ref4.text,
      rest = _objectWithoutProperties(_ref4, _excluded);
    delete rest.onTogglePopup;
    var CloseIcon = (0, _react.useCallback)(function (props) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon["default"], _objectSpread(_objectSpread({}, props), {}, {
        css: css
      }));
    }, [css]);
    var slotAfter = /*#__PURE__*/(0, _jsxRuntime.jsx)(SpottableButton, {
      className: css.coloredButton,
      disabled: disabled,
      onClick: handleOpenPopup,
      style: {
        backgroundColor: color
      },
      type: "color"
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Cell, {
      shrink: true,
      className: css.colorPicker,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Item["default"], _objectSpread(_objectSpread({
        disabled: disabled,
        onClick: handleOpenPopup,
        slotAfter: slotAfter
      }, rest), {}, {
        children: text
      })), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Popup["default"], {
        className: css.colorPopup,
        css: css,
        noAnimation: true,
        onClose: handleClosePopup,
        open: disabled ? false : popupOpen,
        position: "left",
        scrimType: "transparent",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Row, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
            align: "center",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_BodyText["default"], {
              className: css.colorPopupHeader,
              css: css,
              noWrap: true,
              children: text
            })
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
            align: "right",
            shrink: true,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
              className: css.closeButton,
              css: css,
              iconComponent: CloseIcon,
              icon: "closex",
              onClick: handleClosePopup,
              size: "small"
            })
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(PopupContent, {
          color: color,
          colorHandler: colorHandler,
          css: css,
          presetColors: presetColors
        })]
      })]
    });
  }
});

/**
 * Applies Sandstone specific behaviors to {@link sandstone/ColorPicker.ColorPickerBase|ColorPicker} components.
 *
 * @hoc
 * @memberof sandstone/ColorPicker
 * @mixes sandstone/Skinnable.Skinnable
 * @mixes ui/Toggleable.Toggleable
 * @private
 */
var ColorPickerDecorator = exports.ColorPickerDecorator = (0, _compose["default"])(_Skinnable["default"], (0, _Toggleable["default"])({
  prop: 'popupOpen',
  toggle: 'onTogglePopup'
}));

/**
 * A color picker component, ready to use in Sandstone applications.
 *
 * @class ColorPicker
 * @memberof sandstone/ColorPicker
 * @extends sandstone/ColorPicker.ColorPickerBase
 * @mixes sandstone/ColorPicker.ColorPickerDecorator
 * @ui
 * @private
 */
var ColorPicker = exports.ColorPicker = ColorPickerDecorator(ColorPickerBase);
var _default = exports["default"] = ColorPicker;