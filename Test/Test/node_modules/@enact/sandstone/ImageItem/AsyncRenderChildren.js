"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AsyncRenderChildren = AsyncRenderChildren;
exports["default"] = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// A delay that prevents children from being rendered to some extent
// when the user continues to wheel through the list
var delayToRenderChildren = 600;

/**
 * This component introduced to enhance scroll performance when `ImageItem` used in `VirtualGridList`.
 * Basically it renders `children` asynchronously when `children` and `index` changed.
 * When `ImageItem` used in other components, it will render immediately.
 *
 * @class AsyncRenderChildren
 * @memberof sandstone/ImageItem
 * @ui
 * @private
 */
function AsyncRenderChildren(_ref) {
  var children = _ref.children,
    _ref$fallback = _ref.fallback,
    fallback = _ref$fallback === void 0 ? '' : _ref$fallback,
    index = _ref.index;
  var _useState = (0, _react.useState)(index),
    _useState2 = _slicedToArray(_useState, 2),
    prevIndex = _useState2[0],
    setPrevIndex = _useState2[1];
  var timerRef = (0, _react.useRef)(null);
  var async = index !== prevIndex;
  (0, _react.useEffect)(function () {
    if (async) {
      timerRef.current = setTimeout(function () {
        timerRef.current = null;
        setPrevIndex(index);
      }, delayToRenderChildren);
    }
    return function () {
      if (timerRef.current) {
        clearTimeout(timerRef.current);
        timerRef.current = null;
      }
    };
  });
  return async ? fallback : children;
}
AsyncRenderChildren.propTypes = /** @lends sandstone/ImageItem.AsyncRenderChildren.prototype */{
  /**
   * The fallback element that shows before `children` render.
   *
   * @type {*}
   * @private
   */
  fallback: _propTypes["default"].any,
  /**
   * `data-index` of {@link sandstone/ImageItem|ImageItem}.
   * Renders `children` asynchronously when this value changed.
   *
   * @type {Number}
   * @private
   */
  index: _propTypes["default"].number
};
var _default = exports["default"] = AsyncRenderChildren;