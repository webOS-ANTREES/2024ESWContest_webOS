"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.PanelBase = exports.Panel = void 0;
var _handle = _interopRequireWildcard(require("@enact/core/handle"));
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _Layout = require("@enact/ui/Layout");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _$L = _interopRequireDefault(require("../internal/$L"));
var _Panels = require("../internal/Panels");
var _Panel = require("../Panels/Panel");
var _FlexiblePopupPanelsModule = _interopRequireDefault(require("./FlexiblePopupPanels.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "nextButton", "nextButtonVisibility", "onNextClick", "onPrevClick", "prevButton", "prevButtonVisibility", "contentCellSize"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function clamp(val, total) {
  // The extra two `total` values here accommodate negative values
  return (val % total + total) % total;
}

/**
 * The standard view container used inside a {@link sandstone/FlexiblePopupPanels.FlexiblePopupPanels|FlexiblePopupPanels} view
 * manager instance.
 *
 * @class Panel
 * @extends sandstone/Panels.Panel
 * @memberof sandstone/FlexiblePopupPanels
 * @ui
 * @public
 */
var PanelBase = exports.PanelBase = (0, _kind["default"])({
  name: 'Panel',
  contextType: _Panels.PanelsStateContext,
  propTypes: /** @lends sandstone/FlexiblePopupPanels.Panel.prototype */{
    /**
     * The button to use in place of the standard next button.
     *
     * This prop accepts a component (e.g. `Button`), a component instance or a boolean value.
     *
     * If `false`, the button will not show. If set to a component, or `true`, the button will
     * show. This will override the setting of
     * {@link sandstone/FlexiblePopupPanels.FlexiblePopupPanels.nextButtonVisibility|nextButtonVisibility}.
     *
     * Example:
     * ```
     * nextButton={<Button icon="closex" aria-label="Quit">Close</Button>}
     * ```
     *
     * @type {Boolean|Component}
     * @public
     */
    nextButton: _propTypes["default"].any,
    /**
     * Specifies when and how to show `nextButton` on `FlexiblePopupPanels.Panel`.
     *
     * * `'auto'` will display the `nextButton` if more than one `FlexiblePopupPanels.Panel` exists
     * * `'always'` will always display the `nextButton`
     * * `'never'` will always hide the `nextButton`
     *
     * Note, children values will override the generalized parent visibility settings. In this
     * case, a customized `nextButton` on `FlexiblePopupPanels.Panel` will take precedence over the
     * `nextButtonVisibility` value.
     *
     * @type {('auto'|'always'|'never')}
     * @default 'auto'
     * @private
     */
    nextButtonVisibility: _propTypes["default"].oneOf(['auto', 'always', 'never']),
    /**
     * Called when the index value is changed.
     *
     * @type {Function}
     * @private
     */
    onChange: _propTypes["default"].func,
    /**
     * Called when the next button is clicked in `FlexiblePopupPanels.Panel`.
     *
     * Calling `preventDefault` on the passed event will prevent advancing to the next panel.
     *
     * @type {Function}
     * @private
     */
    onNextClick: _propTypes["default"].func,
    /**
     * Called when the previous button is clicked in `FlexiblePopupPanels.Panel`.
     *
     * Calling `preventDefault` on the passed event will prevent navigation to the previous panel.
     *
     * @type {Function}
     * @private
     */
    onPrevClick: _propTypes["default"].func,
    /**
     * The button to use in place of the standard prev button.
     *
     * This prop accepts a component (e.g. `Button`), a component instance or a boolean value.
     *
     * If `false`, the button will not show. If set to a component, or `true`, the button will
     * show. This will override the setting of
     * {@link sandstone/FlexiblePopupPanels.FlexiblePopupPanels.prevButtonVisibility|prevButtonVisibility}.
     *
     * Example:
     * ```
     * prevButton={<Button icon="closex" aria-label="Back">Back</Button>}
     * ```
     *
     * @type {Boolean|Component}
     * @public
     */
    prevButton: _propTypes["default"].any,
    /**
     * Specifies when and how to show `prevButton` on `FlexiblePopupPanels.Panel`.
     *
     * * `'auto'` will display the `prevButton` if more than one `FlexiblePopupPanels.Panel` exists
     * * `'always'` will always display the `prevButton`
     * * `'never'` will always hide the `prevButton`
     *
     * Note, children values will override the generalized parent visibility settings. In this case,
     * if user provides a customized `prevButton` on `FlexiblePopupPanels.Panel` will take precedence over the `prevButtonVisibility` value.
     *
     * @type {('auto'|'always'|'never')}
     * @default 'auto'
     * @private
     */
    prevButtonVisibility: _propTypes["default"].oneOf(['auto', 'always', 'never']),
    /**
     * Sets a pre-determined width on this panel.
     *
     * The 'auto' value will attempt to adjust the panel size to the content size.
     * Note: the `title` may not match in width.
     *
     * @type {('auto'|'small'|'large')}
     * @default 'auto'
     * @public
     */
    size: _propTypes["default"].oneOf(['auto', 'small', 'large'])
  },
  defaultProps: {
    size: 'auto'
  },
  styles: {
    css: _FlexiblePopupPanelsModule["default"]
  },
  handlers: {
    onNextClick: (0, _handle["default"])((0, _handle.forwardCustomWithPrevent)('onNextClick'), (0, _handle.forwardCustom)('onChange', function (ev, props, _ref) {
      var count = _ref.count,
        index = _ref.index;
      return {
        index: clamp(index + 1, count)
      };
    }) // wrap around
    ),

    onPrevClick: (0, _handle["default"])((0, _handle.forwardCustomWithPrevent)('onPrevClick'), (0, _handle.forwardCustom)('onChange', function (ev, props, _ref2) {
      var count = _ref2.count,
        index = _ref2.index;
      return {
        index: clamp(index - 1, count)
      };
    }) // wrap around
    )
  },

  computed: {
    className: function className(_ref3) {
      var size = _ref3.size,
        styler = _ref3.styler;
      return styler.append(size);
    },
    contentCellSize: function contentCellSize(_ref4) {
      var size = _ref4.size;
      // These values must be kept in sync with their LESS variable counterparts
      switch (size) {
        case 'small':
          return 600;
        case 'large':
          return 1320;
        default:
          return null;
      }
    }
  },
  render: function render(_ref5, _ref6) {
    var children = _ref5.children,
      nextButton = _ref5.nextButton,
      nextButtonVisibility = _ref5.nextButtonVisibility,
      onNextClick = _ref5.onNextClick,
      onPrevClick = _ref5.onPrevClick,
      prevButton = _ref5.prevButton,
      prevButtonVisibility = _ref5.prevButtonVisibility,
      contentCellSize = _ref5.contentCellSize,
      rest = _objectWithoutProperties(_ref5, _excluded);
    var count = _ref6.count;
    var isPrevButtonVisible = Boolean(prevButtonVisibility === 'always' || prevButtonVisibility === 'auto' && count > 1);
    var isNextButtonVisible = Boolean(nextButtonVisibility === 'always' || nextButtonVisibility === 'auto' && count > 1);
    delete rest.onChange;
    delete rest.size;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel.PanelBase, _objectSpread(_objectSpread({}, rest), {}, {
      css: _FlexiblePopupPanelsModule["default"],
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Layout.Row, {
        className: _FlexiblePopupPanelsModule["default"].bodyLayout,
        inline: true,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
          align: "center",
          shrink: true,
          className: _FlexiblePopupPanelsModule["default"].navCellBefore,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels.NavigationButton, {
            "aria-label": (0, _$L["default"])('Previous'),
            backgroundOpacity: "transparent",
            component: prevButton,
            className: _FlexiblePopupPanelsModule["default"].navButton,
            icon: "arrowlargeleft",
            iconFlip: "auto",
            onClick: onPrevClick,
            size: "small",
            visible: isPrevButtonVisible
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
          className: _FlexiblePopupPanelsModule["default"].content,
          shrink: !contentCellSize,
          size: contentCellSize,
          children: children
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Layout.Cell, {
          align: "center",
          shrink: true,
          className: _FlexiblePopupPanelsModule["default"].navCellAfter,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels.NavigationButton, {
            "aria-label": (0, _$L["default"])('Next'),
            backgroundOpacity: "transparent",
            component: nextButton,
            className: _FlexiblePopupPanelsModule["default"].navButton,
            icon: "arrowlargeright",
            iconFlip: "auto",
            onClick: onNextClick,
            size: "small",
            visible: isNextButtonVisible
          })
        })]
      })
    }));
  }
});
var Panel = exports.Panel = (0, _Panel.PanelDecorator)({
  // favor content but fall back to body if the content lacks spottable elements
  defaultElement: [".".concat(_FlexiblePopupPanelsModule["default"].content, " *"), ".".concat(_FlexiblePopupPanelsModule["default"].body, " *")]
}, PanelBase);
var _default = exports["default"] = Panel;