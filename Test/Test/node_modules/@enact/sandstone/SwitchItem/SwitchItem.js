"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SwitchItemDecorator = exports.SwitchItemBase = exports.SwitchItem = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));
var _Slottable = _interopRequireDefault(require("@enact/ui/Slottable"));
var _Toggleable = _interopRequireDefault(require("@enact/ui/Toggleable"));
var _Item = require("../Item");
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _Switch = require("../Switch");
var _SwitchItemModule = _interopRequireDefault(require("./SwitchItem.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "css", "selected", "slotAfter"];
/**
 * Provides Sandstone-themed item component and interactive toggleable switch.
 *
 * @example
 * <SwitchItem>
 * 	Item
 * </SwitchItem>
 *
 * @module sandstone/SwitchItem
 * @exports SwitchItem
 * @exports SwitchItemBase
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Item = (0, _Item.ItemDecorator)(_Item.ItemBase);
var Switch = (0, _Skinnable["default"])(_Switch.SwitchBase);
Switch.displayName = 'Switch';

/**
 * Renders an item with a {@link sandstone/Switch|Switch}.
 *
 * @class SwitchItemBase
 * @memberof sandstone/SwitchItem
 * @extends sandstone/Item.Item
 * @omit iconComponent
 * @ui
 * @public
 */
var SwitchItemBase = exports.SwitchItemBase = (0, _kind["default"])({
  name: 'SwitchItem',
  propTypes: /** @lends sandstone/SwitchItem.SwitchItemBase.prototype */{
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `switchItem` - The root class name
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,
    /**
     * If true the switch will be selected.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    selected: _propTypes["default"].bool,
    /**
     * Nodes to be inserted after `children` and before the switch.
     *
     * @type {Node}
     * @public
     */
    slotAfter: _propTypes["default"].node
  },
  defaultProps: {
    selected: false
  },
  styles: {
    css: _SwitchItemModule["default"],
    className: 'switchItem',
    publicClassNames: ['switchItem']
  },
  render: function render(_ref) {
    var children = _ref.children,
      css = _ref.css,
      selected = _ref.selected,
      slotAfter = _ref.slotAfter,
      rest = _objectWithoutProperties(_ref, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Item, _objectSpread(_objectSpread({
      "data-webos-voice-intent": "SetToggleItem",
      role: "button"
    }, rest), {}, {
      "aria-pressed": selected,
      css: css,
      selected: selected,
      children: [children, /*#__PURE__*/(0, _jsxRuntime.jsxs)("slotAfter", {
        children: [slotAfter, /*#__PURE__*/(0, _jsxRuntime.jsx)(Switch, {
          selected: selected,
          css: css
        })]
      })]
    }));
  }
});

/**
 * Adds interactive functionality to `SwitchItem`.
 *
 * @class SwitchItemDecorator
 * @memberof sandstone/SwitchItem
 * @mixes ui/Toggleable.Toggleable
 * @hoc
 * @public
 */
var SwitchItemDecorator = exports.SwitchItemDecorator = (0, _compose["default"])((0, _Toggleable["default"])({
  toggleProp: 'onClick'
}), (0, _Slottable["default"])({
  slots: ['label', 'slotAfter', 'slotBefore']
}));

/**
 * A Sandstone-styled item with a switch component.
 *
 * `SwitchItem` will manage its `selected` state via {@link ui/Toggleable|Toggleable} unless set
 * directly.
 *
 * @class SwitchItem
 * @memberof sandstone/SwitchItem
 * @extends sandstone/SwitchItem.SwitchItemBase
 * @mixes sandstone/SwitchItem.SwitchItemDecorator
 * @ui
 * @public
 */
var SwitchItem = exports.SwitchItem = (0, _Pure["default"])(SwitchItemDecorator(SwitchItemBase));
var _default = exports["default"] = SwitchItem;