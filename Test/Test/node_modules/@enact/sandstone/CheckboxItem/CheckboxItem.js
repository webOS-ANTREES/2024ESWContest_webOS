"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.CheckboxItemDecorator = exports.CheckboxItemBase = exports.CheckboxItem = void 0;
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _compose = _interopRequireDefault(require("ramda/src/compose"));
var _Pure = _interopRequireDefault(require("@enact/ui/internal/Pure"));
var _Slottable = _interopRequireDefault(require("@enact/ui/Slottable"));
var _Toggleable = _interopRequireDefault(require("@enact/ui/Toggleable"));
var _Checkbox = require("../Checkbox");
var _Item = require("../Item");
var _Skinnable = _interopRequireDefault(require("../Skinnable"));
var _CheckboxItemModule = _interopRequireDefault(require("./CheckboxItem.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "css", "icon", "indeterminate", "indeterminateIcon", "selected", "slotBefore"];
/**
 * Sandstone styled item components with a toggleable checkbox.
 *
 * @example
 * <CheckboxItem onToggle={console.log}>
 * 	Item with a Checkbox
 * </CheckboxItem>
 *
 * @module sandstone/CheckboxItem
 * @exports CheckboxItem
 * @exports CheckboxItemBase
 * @exports CheckboxItemDecorator
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Item = (0, _Item.ItemDecorator)(_Item.ItemBase);
var Checkbox = (0, _Skinnable["default"])(_Checkbox.CheckboxBase);
Checkbox.displayName = 'Checkbox';

/**
 * A Sandstone-styled item with a checkbox component.
 *
 * `CheckboxItem` may be used to allow the user to select a single option or used as part of a
 * {@link ui/Group|Group} when multiple {@link ui/Group.Group.select|selections} are possible.
 *
 * Usage:
 * ```
 * <CheckboxItem
 * 	defaultSelected={selected}
 * 	onToggle={handleToggle}
 * >
 *  Item with a Checkbox
 * </CheckboxItem>
 * ```
 *
 * @class CheckboxItemBase
 * @memberof sandstone/CheckboxItem
 * @extends sandstone/Item.Item
 * @omit iconComponent
 * @ui
 * @public
 */
var CheckboxItemBase = exports.CheckboxItemBase = (0, _kind["default"])({
  name: 'CheckboxItem',
  propTypes: /** @lends sandstone/CheckboxItem.CheckboxItemBase.prototype */{
    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `checkboxItem` - The root class name
     *
     * @type {Object}
     * @public
     */
    css: _propTypes["default"].object,
    /**
     * The icon content.
     *
     * May be specified as either:
     *
     * * A string that represents an icon from the {@link sandstone/Icon.iconList|iconList},
     * * An HTML entity string, Unicode reference or hex value (in the form '0x...'),
     * * A URL specifying path to an icon image, or
     * * An object representing a resolution independent resource (See {@link ui/resolution})
     *
     * @type {String|Object}
     * @public
     */
    icon: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
    /**
     * Enables the "indeterminate" state.
     *
     * An indeterminate, mixed, or half-selected state is typically used in a hierarchy or group
     * to represent that some, not all, children are selected.
     *
     * NOTE: This does not prevent updating the `selected` state. Applications must control this
     * property directly.
     *
     * @type {Boolean}
     * @public
     */
    indeterminate: _propTypes["default"].bool,
    /**
     * The icon to be used in the `indeterminate` state.
     *
     * May be specified as either:
     *
     * * A string that represents an icon from the {@link sandstone/Icon.iconList|iconList},
     * * An HTML entity string, Unicode reference or hex value (in the form '0x...'),
     * * A URL specifying path to an icon image, or
     * * An object representing a resolution independent resource (See {@link ui/resolution})
     *
     * @type {String}
     * @public
     */
    indeterminateIcon: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
    /**
     * If true the checkbox will be selected.
     *
     * @type {Boolean}
     * @public
     */
    selected: _propTypes["default"].bool,
    /**
     * Nodes to be inserted after the checkbox and before `children`.
     *
     * @type {Node}
     * @public
     */
    slotBefore: _propTypes["default"].node
  },
  styles: {
    css: _CheckboxItemModule["default"],
    className: 'checkboxItem',
    publicClassNames: ['checkboxItem']
  },
  render: function render(_ref) {
    var children = _ref.children,
      css = _ref.css,
      icon = _ref.icon,
      indeterminate = _ref.indeterminate,
      indeterminateIcon = _ref.indeterminateIcon,
      selected = _ref.selected,
      slotBefore = _ref.slotBefore,
      rest = _objectWithoutProperties(_ref, _excluded);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Item, _objectSpread(_objectSpread({
      "data-webos-voice-intent": "SelectCheckItem",
      role: "checkbox"
    }, rest), {}, {
      "aria-checked": selected,
      css: css,
      selected: selected,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("slotBefore", {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Checkbox, {
          className: slotBefore ? css.checkbox : null,
          selected: selected,
          indeterminate: indeterminate,
          indeterminateIcon: indeterminateIcon,
          children: icon
        }), slotBefore]
      }), children]
    }));
  }
});

/**
 * Adds interactive functionality to `CheckboxItem`.
 *
 * @class CheckboxItemDecorator
 * @memberof sandstone/CheckboxItem
 * @mixes ui/Toggleable.Toggleable
 * @hoc
 * @public
 */
var CheckboxItemDecorator = exports.CheckboxItemDecorator = (0, _compose["default"])((0, _Toggleable["default"])({
  toggleProp: 'onClick'
}), (0, _Slottable["default"])({
  slots: ['label', 'slotAfter', 'slotBefore']
}));

/**
 * A Sandstone-styled item with a checkbox component.
 *
 * `CheckboxItem` will manage its `selected` state via {@link ui/Toggleable|Toggleable} unless set
 * directly.
 *
 * @class CheckboxItem
 * @memberof sandstone/CheckboxItem
 * @extends sandstone/CheckboxItem.CheckboxItemBase
 * @mixes sandstone/CheckboxItem.CheckboxItemDecorator
 * @ui
 * @public
 */
var CheckboxItem = exports.CheckboxItem = (0, _Pure["default"])(CheckboxItemDecorator(CheckboxItemBase));
var _default = exports["default"] = CheckboxItem;