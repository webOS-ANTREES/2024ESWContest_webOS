"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.TimesBase = exports.Times = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _kind = _interopRequireDefault(require("@enact/core/kind"));
var _util = require("../internal/util");
var _util2 = require("./util");
var _TimesModule = _interopRequireDefault(require("./Times.module.css"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["currentPeriod", "currentReadable", "noCurrentTime", "noSeparator", "noTotalTime", "totalPeriod", "totalReadable"];
/**
 * Sandstone-styled formatted time component.
 *
 * @class Times
 * @memberof sandstone/MediaPlayer
 * @ui
 * @public
 */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var TimesBase = exports.TimesBase = (0, _kind["default"])({
  name: 'Times',
  propTypes: /** @lends sandstone/MediaPlayer.Times.prototype */{
    /**
     * An instance of a Duration Formatter from i18n.
     *
     * Must has a `format()` method that returns a string.
     *
     * @type {Object}
     * @required
     * @public
     */
    formatter: _propTypes["default"].object.isRequired,
    /**
     * The current time in seconds of the video source.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    current: _propTypes["default"].number,
    /**
     * Removes the current time.
     *
     * @type {Boolean}
     * @public
     */
    noCurrentTime: _propTypes["default"].bool,
    /**
     * Removes the total time.
     *
     * @type {Boolean}
     * @public
     */
    noTotalTime: _propTypes["default"].bool,
    /**
     * The total time (duration) in seconds of the loaded video source.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    total: _propTypes["default"].number
  },
  defaultProps: {
    current: 0,
    total: 0
  },
  styles: {
    css: _TimesModule["default"],
    className: 'times'
  },
  computed: {
    currentPeriod: function currentPeriod(_ref) {
      var current = _ref.current;
      return (0, _util2.secondsToPeriod)(current);
    },
    currentReadable: function currentReadable(_ref2) {
      var current = _ref2.current,
        formatter = _ref2.formatter;
      return (0, _util2.secondsToTime)(current, formatter);
    },
    noSeparator: function noSeparator(_ref3) {
      var noCurrentTime = _ref3.noCurrentTime,
        noTotalTime = _ref3.noTotalTime;
      return noCurrentTime || noTotalTime;
    },
    totalPeriod: function totalPeriod(_ref4) {
      var total = _ref4.total;
      return (0, _util2.secondsToPeriod)(total);
    },
    totalReadable: function totalReadable(_ref5) {
      var total = _ref5.total,
        formatter = _ref5.formatter;
      return (0, _util2.secondsToTime)(total, formatter);
    }
  },
  render: function render(_ref6) {
    var currentPeriod = _ref6.currentPeriod,
      currentReadable = _ref6.currentReadable,
      noCurrentTime = _ref6.noCurrentTime,
      noSeparator = _ref6.noSeparator,
      noTotalTime = _ref6.noTotalTime,
      totalPeriod = _ref6.totalPeriod,
      totalReadable = _ref6.totalReadable,
      rest = _objectWithoutProperties(_ref6, _excluded);
    delete rest.current;
    delete rest.formatter;
    delete rest.total;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", _objectSpread(_objectSpread({}, rest), {}, {
      children: [noCurrentTime ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)("time", {
        className: _TimesModule["default"].currentTime,
        dateTime: currentPeriod,
        children: currentReadable
      }), noSeparator ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        className: _TimesModule["default"].separator,
        children: "/"
      }), noTotalTime ? null : /*#__PURE__*/(0, _jsxRuntime.jsx)("time", {
        className: _TimesModule["default"].totalTime,
        dateTime: totalPeriod,
        children: totalReadable
      })]
    }));
  }
});
var Times = exports.Times = (0, _util.onlyUpdateForProps)(TimesBase, ['current', 'formatter', 'total']);
var _default = exports["default"] = Times;