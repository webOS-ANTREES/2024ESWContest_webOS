"use strict";

var _FloatingLayer = require("@enact/ui/FloatingLayer");
require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _Button = _interopRequireDefault(require("../../Button"));
var _TooltipDecorator = _interopRequireDefault(require("../TooltipDecorator"));
var _TooltipLabel = _interopRequireDefault(require("../TooltipLabel"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var FloatingLayerController = (0, _FloatingLayer.FloatingLayerDecorator)('div');
var TooltipButton = (0, _TooltipDecorator["default"])(_Button["default"]);
describe('TooltipDecorator', function () {
  describe('TooltipLabel', function () {
    test('should apply alignment when `centered` and `marquee`', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TooltipLabel["default"], {
        centered: true,
        marquee: true,
        children: "Label"
      }));
      var expected = 'center';
      var tooltip = _react.screen.getByText('Label');
      expect(tooltip).toHaveStyle({
        'text-align': expected
      });
    });
    test('should not apply alignment when `centered` but not `marquee`', function () {
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TooltipLabel["default"], {
        centered: true,
        children: "Label"
      }));
      var unexpected = 'center';
      var tooltip = _react.screen.getByText('Label');
      expect(tooltip).not.toHaveStyle({
        'text-align': unexpected
      });
    });
  });
  describe('TooltipDecorator', function () {
    beforeEach(function () {
      global.Element.prototype.getBoundingClientRect = jest.fn(function () {
        return {
          width: 501,
          height: 501,
          top: 99,
          left: 99,
          bottom: 0,
          right: 0
        };
      });
    });
    test('should render a tooltip if hovered', /*#__PURE__*/_asyncToGenerator(function* () {
      var tooltipText = 'Tooltip';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
          tooltipDelay: 0,
          tooltipText: tooltipText,
          children: "Label"
        })
      }));
      var button = _react.screen.getByRole('button');
      (0, _react.act)(function () {
        return button.focus();
      });
      _react.fireEvent.mouseOver(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.getByText('Tooltip')).toBeInTheDocument();
      });
    }));
    test('should hide tooltip if not hovered', /*#__PURE__*/_asyncToGenerator(function* () {
      var tooltipText = 'Tooltip';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
          tooltipDelay: 0,
          tooltipText: tooltipText,
          children: "Label"
        })
      }));
      var button = _react.screen.getByRole('button');
      (0, _react.act)(function () {
        return button.focus();
      });
      _react.fireEvent.mouseOver(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.getByText('Tooltip')).toBeInTheDocument();
      });
      (0, _react.act)(function () {
        return button.blur();
      });
      _react.fireEvent.mouseOut(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.queryByText('Tooltip')).not.toBeInTheDocument();
      });
    }));
    test('should render a tooltip if hovered for \'tooltipRelative\'', /*#__PURE__*/_asyncToGenerator(function* () {
      console.error = jest.fn(); // eslint-disable-line no-console
      var tooltipText = 'Tooltip';
      (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
          tooltipDelay: 0,
          tooltipRelative: true,
          tooltipText: tooltipText,
          children: "Label"
        })
      }));
      var button = _react.screen.getByRole('button');
      (0, _react.act)(function () {
        return button.focus();
      });
      _react.fireEvent.mouseOver(button);
      yield (0, _react.waitFor)(function () {
        expect(_react.screen.getByText('Tooltip')).toBeInTheDocument();
      });
    }));
    describe('Tooltip position', function () {
      test('should have \'above\' className when tooltipPosition is set to \'above\'', /*#__PURE__*/_asyncToGenerator(function* () {
        var tooltipText = 'Tooltip';
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
            tooltipDelay: 0,
            tooltipPosition: "above",
            tooltipText: tooltipText,
            children: "Label"
          })
        }));
        var button = _react.screen.getByRole('button');
        button.getBoundingClientRect = jest.fn(function () {
          return {
            width: 300,
            height: 300,
            top: 600,
            left: 600,
            bottom: 0,
            right: 0
          };
        });
        (0, _react.act)(function () {
          return button.focus();
        });
        _react.fireEvent.mouseOver(button);
        yield (0, _react.waitFor)(function () {
          var tooltipArrow = _react.screen.getByText('Tooltip').parentElement.parentElement;
          var expected = 'tooltip above';
          expect(tooltipArrow).toHaveClass(expected);
        });
      }));
      test('should have \'below\' className when tooltipPosition is set to \'below\'', /*#__PURE__*/_asyncToGenerator(function* () {
        var tooltipText = 'Tooltip';
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
            tooltipDelay: 0,
            tooltipPosition: "below",
            tooltipText: tooltipText,
            children: "Label"
          })
        }));
        var button = _react.screen.getByRole('button');
        button.getBoundingClientRect = jest.fn(function () {
          return {
            width: 300,
            height: 300,
            top: 600,
            left: 600,
            bottom: 0,
            right: 0
          };
        });
        (0, _react.act)(function () {
          return button.focus();
        });
        _react.fireEvent.mouseOver(button);
        yield (0, _react.waitFor)(function () {
          var tooltipArrow = _react.screen.getByText('Tooltip').parentElement.parentElement;
          var expected = 'tooltip below';
          expect(tooltipArrow).toHaveClass(expected);
        });
      }));
      test('should have \'left middle\' className when tooltipPosition is set to \'left middle\'', /*#__PURE__*/_asyncToGenerator(function* () {
        var tooltipText = 'Tooltip';
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
            tooltipDelay: 0,
            tooltipPosition: "left middle",
            tooltipText: tooltipText,
            children: "Label"
          })
        }));
        var button = _react.screen.getByRole('button');
        (0, _react.act)(function () {
          return button.focus();
        });
        _react.fireEvent.mouseOver(button);
        yield (0, _react.waitFor)(function () {
          var tooltipArrow = _react.screen.getByText('Tooltip').parentElement.parentElement;
          var expected = 'tooltip left middleArrow';
          expect(tooltipArrow).toHaveClass(expected);
        });
      }));
      test('should have \'right middle\' className when tooltipPosition is set to \'right middle\'', /*#__PURE__*/_asyncToGenerator(function* () {
        var tooltipText = 'Tooltip';
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TooltipButton, {
            tooltipDelay: 0,
            tooltipPosition: "right middle",
            tooltipText: tooltipText,
            children: "Label"
          })
        }));
        var button = _react.screen.getByRole('button');
        (0, _react.act)(function () {
          return button.focus();
        });
        _react.fireEvent.mouseOver(button);
        yield (0, _react.waitFor)(function () {
          var tooltipArrow = _react.screen.getByText('Tooltip').parentElement.parentElement;
          var expected = 'tooltip right middleArrow';
          expect(tooltipArrow).toHaveClass(expected);
        });
      }));
    });
  });
});