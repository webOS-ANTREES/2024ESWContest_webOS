"use strict";

var _react = require("@testing-library/react");
var _Sprite = require("../Sprite");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
describe('Sprite Specs', function () {
  var simpleAnimationProps = {
    src: 'dummyimage',
    rows: 2,
    columns: 2
  };
  describe('events', function () {
    describe('on first render', function () {
      test('should call onSpriteAnimation', function () {
        var handleAnimation = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Sprite.SpriteBase, _objectSpread(_objectSpread({}, simpleAnimationProps), {}, {
          onSpriteAnimation: handleAnimation
        })));
        var expected = 1;
        var actual = handleAnimation.mock.calls.length;
        expect(actual).toBe(expected);
      });
      test('should call onSpriteAnimation and default to "playing"', function () {
        var handleAnimation = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Sprite.SpriteBase, _objectSpread(_objectSpread({}, simpleAnimationProps), {}, {
          onSpriteAnimation: handleAnimation
        })));
        var expected = true;
        var actual = handleAnimation.mock.calls[0][0].playing;
        expect(actual).toBe(expected);
      });
      test('should call onSpriteAnimation with stopped:true when stopped', function () {
        var handleAnimation = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Sprite.SpriteBase, _objectSpread(_objectSpread({}, simpleAnimationProps), {}, {
          onSpriteAnimation: handleAnimation,
          stopped: true
        })));
        var expected = false;
        var actual = handleAnimation.mock.calls[0][0].playing;
        expect(actual).toBe(expected);
      });
      test('should call onSpriteAnimation with paused:true when paused', function () {
        var handleAnimation = jest.fn();
        (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Sprite.SpriteBase, _objectSpread(_objectSpread({}, simpleAnimationProps), {}, {
          onSpriteAnimation: handleAnimation,
          paused: true
        })));
        var expected = true;
        var actual = handleAnimation.mock.calls[0][0].paused;
        expect(actual).toBe(expected);
      });
    });
  });
});