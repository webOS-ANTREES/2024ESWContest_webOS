"use strict";

require("@testing-library/jest-dom");
var _react = require("@testing-library/react");
var _SpotlightRootDecorator = require("../SpotlightRootDecorator");
var _jsxRuntime = require("react/jsx-runtime");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
describe('SpotlightRootDecorator', function () {
  var AppBase = function AppBase(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({
      id: "root",
      "data-testid": "root"
    }, props), {}, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
        children: "123"
      })
    }));
  };
  test('should set `spotlight-input-key` class when the app is focused for the first time', function () {
    var App = (0, _SpotlightRootDecorator.SpotlightRootDecorator)(AppBase);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(App, {}));
    var button = _react.screen.queryByText('123');
    var element = _react.screen.getByTestId('root');
    _react.fireEvent.focus(button);
    var expectedClass = 'spotlight-input-key';
    expect(element).toHaveClass(expectedClass);
  });
  test('should set input type properly in internal variable', function () {
    var App = (0, _SpotlightRootDecorator.SpotlightRootDecorator)(AppBase);
    (0, _react.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(App, {}));
    (0, _SpotlightRootDecorator.setInputType)('touch');
    var expected = 'touch';
    var actual = (0, _SpotlightRootDecorator.getInputType)();
    expect(actual).toBe(expected);
  });
});